<feed xmlns="http://www.w3.org/2005/Atom"> <id>nouman404.github.io/</id><title>BatBato's Blog</title><subtitle>A blog to take notes of what I learn, Writ-Up and many more...</subtitle> <updated>2025-08-28T11:11:05+02:00</updated> <author> <name>Bat</name> <uri>nouman404.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="nouman404.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="nouman404.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Bat </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Notes | AD | AD Tools</title><link href="nouman404.github.io/Notes/AD/Tools" rel="alternate" type="text/html" title="Notes | AD | AD Tools" /><published>2025-08-08T00:00:00+02:00</published> <updated>2025-08-09T12:32:02+02:00</updated> <id>nouman404.github.io/Notes/AD/Tools</id> <content src="nouman404.github.io/Notes/AD/Tools" /> <author> <name>BatBato</name> </author> <category term="Notes" /> <category term="AD" /> <summary> Introduction This post is about understanding how the main tools work, because it is great to achieve an attack but it’s better if you can do it from scratch. So if you know how tools work, then you know how attacks work. Nmap Definition Nmap is a powerful network scanning tool used to discover hosts, services, and vulnerabilities by performing port scanning, OS detection, and more. Defaul... </summary> </entry> <entry><title>CTFs | HeroCTF_2024 | Steganographie | Zipper</title><link href="nouman404.github.io/CTFs/HeroCTF_2024/Steganographie/Zipper" rel="alternate" type="text/html" title="CTFs | HeroCTF_2024 | Steganographie | Zipper" /><published>2024-10-26T00:00:00+02:00</published> <updated>2024-10-27T22:43:15+01:00</updated> <id>nouman404.github.io/CTFs/HeroCTF_2024/Steganographie/Zipper</id> <content src="nouman404.github.io/CTFs/HeroCTF_2024/Steganographie/Zipper" /> <author> <name>BatBato</name> </author> <category term="CTFs" /> <category term="HeroCTF_2024" /> <category term="Steganographie" /> <summary> Zipper In this challenge, we have access to this zip. First I tried to unzip it and we find a PDF with two images talking about the zip format. I tried to run binwalk on them with no luck. But after a wile, I tried to run it on the zip itself: As we can see, we have the zip containing the folder whatiszip, a bunch of other zip or zlib files but also a PNG image. We use binwalk to extract ... </summary> </entry> <entry><title>CTFs | HeroCTF_2024 | Steganographie | Subliminal2</title><link href="nouman404.github.io/CTFs/HeroCTF_2024/Steganographie/Subliminal2" rel="alternate" type="text/html" title="CTFs | HeroCTF_2024 | Steganographie | Subliminal2" /><published>2024-10-26T00:00:00+02:00</published> <updated>2024-10-27T22:26:22+01:00</updated> <id>nouman404.github.io/CTFs/HeroCTF_2024/Steganographie/Subliminal2</id> <content src="nouman404.github.io/CTFs/HeroCTF_2024/Steganographie/Subliminal2" /> <author> <name>BatBato</name> </author> <category term="CTFs" /> <category term="HeroCTF_2024" /> <category term="Steganographie" /> <summary> Subliminal#2 Here we are given a video with a square that appears on each frame. We need to recover every square, reassemble them into one image and save it to get the flag. I used the following code: import cv2 import numpy as np # Path to the video file video_path = 'subliminal_hide.mp4' # Open the video capture cap = cv2.VideoCapture(video_path) # Check if video opened successfully if... </summary> </entry> <entry><title>CTFs | HeroCTF_2024 | Reverse | AutoInfector</title><link href="nouman404.github.io/CTFs/HeroCTF_2024/Reverse/AutoInfector" rel="alternate" type="text/html" title="CTFs | HeroCTF_2024 | Reverse | AutoInfector" /><published>2024-10-26T00:00:00+02:00</published> <updated>2024-10-27T22:26:22+01:00</updated> <id>nouman404.github.io/CTFs/HeroCTF_2024/Reverse/AutoInfector</id> <content src="nouman404.github.io/CTFs/HeroCTF_2024/Reverse/AutoInfector" /> <author> <name>BatBato</name> </author> <category term="CTFs" /> <category term="HeroCTF_2024" /> <category term="Reverse" /> <summary> AutoInfector When we get to this website we have a button to download a file. If we look at the JS that deals with the action of the button, we get the following code: Here is a clearer version of the code: We can use deobfusctor websites like JS Deobfuscator so that we get a better view of the code. The interesting part starts with the onclick section. Lets break this down line b... </summary> </entry> <entry><title>CTFs | HeroCTF_2024 | Misc | Moo</title><link href="nouman404.github.io/CTFs/HeroCTF_2024/Misc/Moo" rel="alternate" type="text/html" title="CTFs | HeroCTF_2024 | Misc | Moo" /><published>2024-10-26T00:00:00+02:00</published> <updated>2024-10-27T22:26:22+01:00</updated> <id>nouman404.github.io/CTFs/HeroCTF_2024/Misc/Moo</id> <content src="nouman404.github.io/CTFs/HeroCTF_2024/Misc/Moo" /> <author> <name>BatBato</name> </author> <category term="CTFs" /> <category term="HeroCTF_2024" /> <category term="Misc" /> <summary> Moo In this challenge, we need to escape the restricted shell we are in. First we can try some commands to see what is working and what is not: So as we can see, a lot of commands are restricted. But the echo one is not. So now we know that our path is in the /usr/local/rbin folder. In this folder are the following files: First I started looking at the rbash file: I thought that... </summary> </entry> </feed>
